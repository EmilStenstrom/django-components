{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Docs (Work in progress)</p> <p>Create simple reusable template components in Django</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\u2728 Reusable components: Create components that can be reused in different parts of your project, or even in different projects.</li> <li>\ud83d\udcc1 Single file components: Keep your Python, CSS, Javascript and HTML in one place (if you wish)</li> <li>\ud83c\udfb0 Slots: Define slots in your components to make them more flexible.</li> <li>\ud83d\udcbb CLI: A command line interface to help you create new components.</li> <li>\ud83d\ude80 Wide compatibility: Works with modern and LTS versions of Django.</li> <li>Load assets: Automatically load the right CSS and Javascript files for your components, with our middleware.</li> </ul>"},{"location":"#summary","title":"Summary","text":"<p>It lets you create \"template components\", that contains both the template, the Javascript and the CSS needed to generate the front end code you need for a modern app. Use components like this:</p> <pre><code>{% component \"calendar\" date=\"2015-06-19\" %}{% endcomponent %}\n</code></pre> <p>And this is what gets rendered (plus the CSS and Javascript you've specified):</p> <pre><code>&lt;div class=\"calendar-component\"&gt;Today's date is &lt;span&gt;2015-06-19&lt;/span&gt;&lt;/div&gt;\n</code></pre> <p>See the example project or read on to learn about the details!</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Release notes</li> <li>Security notes \ud83d\udea8</li> <li>Installation</li> <li>Compatibility</li> <li>Create your first component</li> <li>Using single-file components</li> <li>Use components in templates</li> <li>Use components outside of templates</li> <li>Use components as views</li> <li>Pre-defined components</li> <li>Typing and validating components</li> <li>Pre-defined components</li> <li>Registering components</li> <li>Autodiscovery</li> <li>Using slots in templates</li> <li>Accessing data passed to the component</li> <li>Rendering HTML attributes</li> <li>Template tag syntax</li> <li>Prop drilling and dependency injection (provide / inject)</li> <li>Component hooks</li> <li>Component context and scope</li> <li>Customizing component tags with TagFormatter</li> <li>Defining HTML/JS/CSS files</li> <li>Rendering JS/CSS dependencies</li> <li>Available settings</li> <li>Running with development server</li> <li>Logging and debugging</li> <li>Management Command</li> <li>Writing and sharing component libraries</li> <li>Community examples</li> <li>Running django-components project locally</li> <li>Development guides</li> </ul>"},{"location":"#release-notes","title":"Release notes","text":"<p>Version 0.95 - Added support for dynamic components, where the component name is passed as a variable. (See Dynamic components) - Changed <code>Component.input</code> to raise <code>RuntimeError</code> if accessed outside of render context. Previously it returned <code>None</code> if unset.</p> <p>Version 0.94 - django_components now automatically configures Django to support multi-line tags. (See Multi-line tags) - New setting <code>reload_on_template_change</code>. Set this to <code>True</code> to reload the dev server on changes to component template files. (See Reload dev server on component file changes)</p> <p>Version 0.93 - Spread operator <code>...dict</code> inside template tags. (See Spread operator) - Use template tags inside string literals in component inputs. (See Use template tags inside component inputs) - Dynamic slots, fills and provides - The <code>name</code> argument for these can now be a variable, a template expression, or via spread operator - Component library authors can now configure <code>CONTEXT_BEHAVIOR</code> and <code>TAG_FORMATTER</code> settings independently from user settings.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.92 - BREAKING CHANGE: <code>Component</code> class is no longer a subclass of <code>View</code>. To configure the <code>View</code> class, set the <code>Component.View</code> nested class. HTTP methods like <code>get</code> or <code>post</code> can still be defined directly on <code>Component</code> class, and <code>Component.as_view()</code> internally calls <code>Component.View.as_view()</code>. (See Modifying the View class)</p> <ul> <li> <p>The inputs (args, kwargs, slots, context, ...) that you pass to <code>Component.render()</code> can be accessed from within <code>get_context_data</code>, <code>get_template_string</code> and <code>get_template_name</code> via <code>self.input</code>. (See Accessing data passed to the component)</p> </li> <li> <p>Typing: <code>Component</code> class supports generics that specify types for <code>Component.render</code> (See Adding type hints with Generics)</p> </li> </ul> <p>Version 0.90 - All tags (<code>component</code>, <code>slot</code>, <code>fill</code>, ...) now support \"self-closing\" or \"inline\" form, where you can omit the closing tag:     <pre><code>{# Before #}\n{% component \"button\" %}{% endcomponent %}\n{# After #}\n{% component \"button\" / %}\n</code></pre> - All tags now support the \"dictionary key\" or \"aggregate\" syntax (<code>kwarg:key=val</code>):     <pre><code>{% component \"button\" attrs:class=\"hidden\" %}\n</code></pre> - You can change how the components are written in the template with TagFormatter.</p> <pre><code>The default is `django_components.component_formatter`:\n```django\n{% component \"button\" href=\"...\" disabled %}\n    Click me!\n{% endcomponent %}\n```\n\nWhile `django_components.shorthand_component_formatter` allows you to write components like so:\n\n```django\n{% button href=\"...\" disabled %}\n    Click me!\n{% endbutton %}\n</code></pre> <p>\ud83d\udea8\ud83d\udce2 Version 0.85 Autodiscovery module resolution changed. Following undocumented behavior was removed:</p> <ul> <li>Previously, autodiscovery also imported any <code>[app]/components.py</code> files, and used <code>SETTINGS_MODULE</code> to search for component dirs.</li> <li>To migrate from:<ul> <li><code>[app]/components.py</code> - Define each module in <code>COMPONENTS.libraries</code> setting,   or import each module inside the <code>AppConfig.ready()</code> hook in respective <code>apps.py</code> files.</li> <li><code>SETTINGS_MODULE</code> - Define component dirs using <code>STATICFILES_DIRS</code></li> </ul> </li> <li>Previously, autodiscovery handled relative files in <code>STATICFILES_DIRS</code>. To align with Django, <code>STATICFILES_DIRS</code> now must be full paths (Django docs).</li> </ul> <p>\ud83d\udea8\ud83d\udce2 Version 0.81 Aligned the <code>render_to_response</code> method with the (now public) <code>render</code> method of <code>Component</code> class. Moreover, slots passed to these can now be rendered also as functions.</p> <ul> <li>BREAKING CHANGE: The order of arguments to <code>render_to_response</code> has changed.</li> </ul> <p>Version 0.80 introduces dependency injection with the <code>{% provide %}</code> tag and <code>inject()</code> method.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.79</p> <ul> <li>BREAKING CHANGE: Default value for the <code>COMPONENTS.context_behavior</code> setting was changes from <code>\"isolated\"</code> to <code>\"django\"</code>. If you did not set this value explicitly before, this may be a breaking change. See the rationale for change here.</li> </ul> <p>\ud83d\udea8\ud83d\udce2 Version 0.77 CHANGED the syntax for accessing default slot content.</p> <ul> <li>Previously, the syntax was   <code>{% fill \"my_slot\" as \"alias\" %}</code> and <code>{{ alias.default }}</code>.</li> <li>Now, the syntax is   <code>{% fill \"my_slot\" default=\"alias\" %}</code> and <code>{{ alias }}</code>.</li> </ul> <p>Version 0.74 introduces <code>html_attrs</code> tag and <code>prefix:key=val</code> construct for passing dicts to components.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.70</p> <ul> <li><code>{% if_filled \"my_slot\" %}</code> tags were replaced with <code>{{ component_vars.is_filled.my_slot }}</code> variables.</li> <li>Simplified settings - <code>slot_context_behavior</code> and <code>context_behavior</code> were merged. See the documentation for more details.</li> </ul> <p>Version 0.67 CHANGED the default way how context variables are resolved in slots. See the documentation for more details.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.5 CHANGES THE SYNTAX for components. <code>component_block</code> is now <code>component</code>, and <code>component</code> blocks need an ending <code>endcomponent</code> tag. The new <code>python manage.py upgradecomponent</code> command can be used to upgrade a directory (use --path argument to point to each dir) of templates that use components to the new syntax automatically.</p> <p>This change is done to simplify the API in anticipation of a 1.0 release of django_components. After 1.0 we intend to be stricter with big changes like this in point releases.</p> <p>Version 0.34 adds components as views, which allows you to handle requests and render responses from within a component. See the documentation for more details.</p> <p>Version 0.28 introduces 'implicit' slot filling and the <code>default</code> option for <code>slot</code> tags.</p> <p>Version 0.27 adds a second installable app: django_components.safer_staticfiles. It provides the same behavior as django.contrib.staticfiles but with extra security guarantees (more info below in Security Notes).</p> <p>Version 0.26 changes the syntax for <code>{% slot %}</code> tags. From now on, we separate defining a slot (<code>{% slot %}</code>) from filling a slot with content (<code>{% fill %}</code>). This means you will likely need to change a lot of slot tags to fill. We understand this is annoying, but it's the only way we can get support for nested slots that fill in other slots, which is a very nice featuPpre to have access to. Hoping that this will feel worth it!</p> <p>Version 0.22 starts autoimporting all files inside components subdirectores, to simplify setup. An existing project might start to get AlreadyRegistered-errors because of this. To solve this, either remove your custom loading of components, or set \"autodiscover\": False in settings.COMPONENTS.</p> <p>Version 0.17 renames <code>Component.context</code> and <code>Component.template</code> to <code>get_context_data</code> and <code>get_template_name</code>. The old methods still work, but emit a deprecation warning. This change was done to sync naming with Django's class based views, and make using django-components more familiar to Django users. <code>Component.context</code> and <code>Component.template</code> will be removed when version 1.0 is released.</p>"},{"location":"#security-notes","title":"Security notes \ud83d\udea8","text":"<p>You are advised to read this section before using django-components in production.</p>"},{"location":"#static-files","title":"Static files","text":"<p>Components can be organized however you prefer. That said, our prefered way is to keep the files of a component close together by bundling them in the same directory. This means that files containing backend logic, such as Python modules and HTML templates, live in the same directory as static files, e.g. JS and CSS.</p> <p>If your are using django.contrib.staticfiles to collect static files, no distinction is made between the different kinds of files. As a result, your Python code and templates may inadvertently become available on your static file server. You probably don't want this, as parts of your backend logic will be exposed, posing a potential security vulnerability.</p> <p>As of v0.27, django-components ships with an additional installable app django_components.safer_staticfiles. It is a drop-in replacement for django.contrib.staticfiles. Its behavior is 100% identical except it ignores .py and .html files, meaning these will not end up on your static files server. To use it, add it to INSTALLED_APPS and remove django.contrib.staticfiles.</p> <pre><code>INSTALLED_APPS = [\n    # 'django.contrib.staticfiles',   # &lt;-- REMOVE\n    'django_components',\n    'django_components.safer_staticfiles'  # &lt;-- ADD\n]\n</code></pre> <p>If you are on an older version of django-components, your alternatives are a) passing <code>--ignore &lt;pattern&gt;</code> options to the collecstatic CLI command, or b) defining a subclass of StaticFilesConfig. Both routes are described in the official docs of the staticfiles app.</p> <p>Note that <code>safer_staticfiles</code> excludes the <code>.py</code> and <code>.html</code> files for collectstatic command:</p> <pre><code>python manage.py collectstatic\n</code></pre> <p>but it is ignored on the development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>For a step-by-step guide on deploying production server with static files, see the demo project.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Install the app into your environment:</li> </ol> <p><code>pip install django_components</code></p> <ol> <li>Then add the app into <code>INSTALLED_APPS</code> in settings.py</li> </ol> <pre><code>INSTALLED_APPS = [\n   ...,\n   'django_components',\n]\n</code></pre> <ol> <li>Ensure that <code>BASE_DIR</code> setting is defined in settings.py:</li> </ol> <pre><code>BASE_DIR = Path(__file__).resolve().parent.parent\n</code></pre> <ol> <li> <p>Modify <code>TEMPLATES</code> section of settings.py as follows:</p> </li> <li> <p>Remove <code>'APP_DIRS': True,</code></p> <ul> <li>NOTE: Instead of APP_DIRS, for the same effect, we will use <code>django.template.loaders.app_directories.Loader</code></li> </ul> </li> <li>Add <code>loaders</code> to <code>OPTIONS</code> list and set it to following value:</li> </ol> <pre><code>TEMPLATES = [\n   {\n      ...,\n      'OPTIONS': {\n            'context_processors': [\n               ...\n            ],\n            'loaders':[(\n               'django.template.loaders.cached.Loader', [\n                  # Default Django loader\n                  'django.template.loaders.filesystem.Loader',\n                  # Inluding this is the same as APP_DIRS=True\n                  'django.template.loaders.app_directories.Loader',\n                  # Components loader\n                  'django_components.template_loader.Loader',\n               ]\n            )],\n      },\n   },\n]\n</code></pre> <ol> <li>Modify <code>STATICFILES_DIRS</code> (or add it if you don't have it) so django can find your static JS and CSS files:</li> </ol> <pre><code>STATICFILES_DIRS = [\n   ...,\n   os.path.join(BASE_DIR, \"components\"),\n]\n</code></pre> <p>If <code>STATICFILES_DIRS</code> is omitted or empty, django-components will by default look for    <code>{BASE_DIR}/components</code></p> <p>NOTE: The paths in <code>STATICFILES_DIRS</code> must be full paths. See Django docs.</p>"},{"location":"#optional","title":"Optional","text":"<p>To avoid loading the app in each template using <code>{% load component_tags %}</code>, you can add the tag as a 'builtin' in settings.py</p> <pre><code>TEMPLATES = [\n    {\n        ...,\n        'OPTIONS': {\n            'context_processors': [\n                ...\n            ],\n            'builtins': [\n                'django_components.templatetags.component_tags',\n            ]\n        },\n    },\n]\n</code></pre> <p>Read on to find out how to build your first component!</p>"},{"location":"#compatibility","title":"Compatibility","text":"<p>Django-components supports all supported combinations versions of Django and Python.</p> Python version Django version 3.8 4.2 3.9 4.2 3.10 4.2, 5.0 3.11 4.2, 5.0 3.12 4.2, 5.0"},{"location":"#create-your-first-component","title":"Create your first component","text":"<p>A component in django-components is the combination of four things: CSS, Javascript, a Django template, and some Python code to put them all together.</p> <pre><code>    sampleproject/\n    \u251c\u2500\u2500 calendarapp/\n    \u251c\u2500\u2500 components/             \ud83c\udd95\n    \u2502   \u2514\u2500\u2500 calendar/           \ud83c\udd95\n    \u2502       \u251c\u2500\u2500 calendar.py     \ud83c\udd95\n    \u2502       \u251c\u2500\u2500 script.js       \ud83c\udd95\n    \u2502       \u251c\u2500\u2500 style.css       \ud83c\udd95\n    \u2502       \u2514\u2500\u2500 template.html   \ud83c\udd95\n    \u251c\u2500\u2500 sampleproject/\n    \u251c\u2500\u2500 manage.py\n    \u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Start by creating empty files in the structure above.</p> <p>First, you need a CSS file. Be sure to prefix all rules with a unique class so they don't clash with other rules.</p> [project root]/components/calendar/style.css<pre><code>/* In a file called [project root]/components/calendar/style.css */\n.calendar-component {\n  width: 200px;\n  background: pink;\n}\n.calendar-component span {\n  font-weight: bold;\n}\n</code></pre> <p>Then you need a javascript file that specifies how you interact with this component. You are free to use any javascript framework you want. A good way to make sure this component doesn't clash with other components is to define all code inside an anonymous function that calls itself. This makes all variables defined only be defined inside this component and not affect other components.</p> [project root]/components/calendar/script.js<pre><code>/* In a file called [project root]/components/calendar/script.js */\n(function () {\n  if (document.querySelector(\".calendar-component\")) {\n    document.querySelector(\".calendar-component\").onclick = function () {\n      alert(\"Clicked calendar!\");\n    };\n  }\n})();\n</code></pre> <p>Now you need a Django template for your component. Feel free to define more variables like <code>date</code> in this example. When creating an instance of this component we will send in the values for these variables. The template will be rendered with whatever template backend you've specified in your Django settings file.</p> [project root]/components/calendar/calendar.html<pre><code>{# In a file called [project root]/components/calendar/template.html #}\n&lt;div class=\"calendar-component\"&gt;Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;&lt;/div&gt;\n</code></pre> <p>Finally, we use django-components to tie this together. Start by creating a file called <code>calendar.py</code> in your component calendar directory. It will be auto-detected and loaded by the app.</p> <p>Inside this file we create a Component by inheriting from the Component class and specifying the context method. We also register the global component registry so that we easily can render it anywhere in our templates.</p> [project root]/components/calendar/calendar.py<pre><code># In a file called [project root]/components/calendar/calendar.py\nfrom django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    # Templates inside `[your apps]/components` dir and `[project root]/components` dir\n    # will be automatically found. To customize which template to use based on context\n    # you can override method `get_template_name` instead of specifying `template_name`.\n    #\n    # `template_name` can be relative to dir where `calendar.py` is, or relative to STATICFILES_DIRS\n    template_name = \"template.html\"\n\n    # This component takes one parameter, a date string to show in the template\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    # Both `css` and `js` can be relative to dir where `calendar.py` is, or relative to STATICFILES_DIRS\n    class Media:\n        css = \"style.css\"\n        js = \"script.js\"\n</code></pre> <p>And voil\u00e1!! We've created our first component.</p>"},{"location":"#using-single-file-components","title":"Using single-file components","text":"<p>Components can also be defined in a single file, which is useful for small components. To do this, you can use the <code>template</code>, <code>js</code>, and <code>css</code> class attributes instead of the <code>template_name</code> and <code>Media</code>. For example, here's the calendar component from above, defined in a single file:</p> [project root]/components/calendar.py<pre><code># In a file called [project root]/components/calendar.py\nfrom django_components import Component, register, types\n\n@register(\"calendar\")\nclass Calendar(Component):\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    template: types.django_html = \"\"\"\n        &lt;div class=\"calendar-component\"&gt;Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;&lt;/div&gt;\n    \"\"\"\n\n    css: types.css = \"\"\"\n        .calendar-component { width: 200px; background: pink; }\n        .calendar-component span { font-weight: bold; }\n    \"\"\"\n\n    js: types.js = \"\"\"\n        (function(){\n            if (document.querySelector(\".calendar-component\")) {\n                document.querySelector(\".calendar-component\").onclick = function(){ alert(\"Clicked calendar!\"); };\n            }\n        })()\n    \"\"\"\n</code></pre> <p>This makes it easy to create small components without having to create a separate template, CSS, and JS file.</p>"},{"location":"#syntax-highlight-and-code-assistance","title":"Syntax highlight and code assistance","text":""},{"location":"#vscode","title":"VSCode","text":"<p>Note, in the above example, that the <code>t.django_html</code>, <code>t.css</code>, and <code>t.js</code> types are used to specify the type of the template, CSS, and JS files, respectively. This is not necessary, but if you're using VSCode with the Python Inline Source Syntax Highlighting extension, it will give you syntax highlighting for the template, CSS, and JS.</p>"},{"location":"#pycharm-or-other-jetbrains-ides","title":"Pycharm (or other Jetbrains IDEs)","text":"<p>If you're a Pycharm user (or any other editor from Jetbrains), you can have coding assistance as well:</p> <pre><code>from django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    # language=HTML\n    template= \"\"\"\n        &lt;div class=\"calendar-component\"&gt;Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;&lt;/div&gt;\n    \"\"\"\n\n    # language=CSS\n    css = \"\"\"\n        .calendar-component { width: 200px; background: pink; }\n        .calendar-component span { font-weight: bold; }\n    \"\"\"\n\n    # language=JS\n    js = \"\"\"\n        (function(){\n            if (document.querySelector(\".calendar-component\")) {\n                document.querySelector(\".calendar-component\").onclick = function(){ alert(\"Clicked calendar!\"); };\n            }\n        })()\n    \"\"\"\n</code></pre> <p>You don't need to use <code>types.django_html</code>, <code>types.css</code>, <code>types.js</code> since Pycharm uses language injections. You only need to write the comments <code># language=&lt;lang&gt;</code> above the variables.</p>"},{"location":"#use-components-in-templates","title":"Use components in templates","text":"<p>First load the <code>component_tags</code> tag library, then use the <code>component_[js/css]_dependencies</code> and <code>component</code> tags to render the component to the page.</p> <pre><code>{% load component_tags %}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My example calendar&lt;/title&gt;\n    {% component_css_dependencies %}\n&lt;/head&gt;\n&lt;body&gt;\n    {% component \"calendar\" date=\"2015-06-19\" %}{% endcomponent %}\n    {% component_js_dependencies %}\n&lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>NOTE: Instead of writing <code>{% endcomponent %}</code> at the end, you can use a self-closing tag:</p> <p><code>{% component \"calendar\" date=\"2015-06-19\" / %}</code></p> <p>The output from the above template will be:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My example calendar&lt;/title&gt;\n    &lt;link\n      href=\"/static/calendar/style.css\"\n      type=\"text/css\"\n      media=\"all\"\n      rel=\"stylesheet\"\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"calendar-component\"&gt;\n      Today's date is &lt;span&gt;2015-06-19&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;script src=\"/static/calendar/script.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n  &lt;html&gt;&lt;/html&gt;\n&lt;/html&gt;\n</code></pre> <p>This makes it possible to organize your front-end around reusable components. Instead of relying on template tags and keeping your CSS and Javascript in the static directory.</p>"},{"location":"#use-components-outside-of-templates","title":"Use components outside of templates","text":"<p>New in version 0.81</p> <p>Components can be rendered outside of Django templates, calling them as regular functions (\"React-style\").</p> <p>The component class defines <code>render</code> and <code>render_to_response</code> class methods. These methods accept positional args, kwargs, and slots, offering the same flexibility as the <code>{% component %}</code> tag:</p> <pre><code>class SimpleComponent(Component):\n    template = \"\"\"\n        {% load component_tags %}\n        hello: {{ hello }}\n        foo: {{ foo }}\n        kwargs: {{ kwargs|safe }}\n        slot_first: {% slot \"first\" required / %}\n    \"\"\"\n\n    def get_context_data(self, arg1, arg2, **kwargs):\n        return {\n            \"hello\": arg1,\n            \"foo\": arg2,\n            \"kwargs\": kwargs,\n        }\n\nrendered = SimpleComponent.render(\n    args=[\"world\", \"bar\"],\n    kwargs={\"kw1\": \"test\", \"kw2\": \"ooo\"},\n    slots={\"first\": \"FIRST_SLOT\"},\n    context={\"from_context\": 98},\n)\n</code></pre> <p>Renders:</p> <pre><code>hello: world\nfoo: bar\nkwargs: {'kw1': 'test', 'kw2': 'ooo'}\nslot_first: FIRST_SLOT\n</code></pre>"},{"location":"#inputs-of-render-and-render_to_response","title":"Inputs of <code>render</code> and <code>render_to_response</code>","text":"<p>Both <code>render</code> and <code>render_to_response</code> accept the same input:</p> <pre><code>Component.render(\n    context: Mapping | django.template.Context | None = None,\n    args: List[Any] | None = None,\n    kwargs: Dict[str, Any] | None = None,\n    slots: Dict[str, str | SafeString | SlotFunc] | None = None,\n    escape_slots_content: bool = True\n) -&gt; str:\n</code></pre> <ul> <li> <p><code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code></p> </li> <li> <p><code>kwargs</code> - Keyword args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code></p> </li> <li> <p><code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.   Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string   or <code>SlotFunc</code>.</p> </li> <li> <p><code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. <code>True</code> by default to prevent XSS attacks. If you disable escaping, you should make sure that any content you pass to the slots is safe, especially if it comes from user input.</p> </li> <li> <p><code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.</p> </li> <li>NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via     component's args and kwargs.</li> </ul>"},{"location":"#slotfunc","title":"<code>SlotFunc</code>","text":"<p>When rendering components with slots in <code>render</code> or <code>render_to_response</code>, you can pass either a string or a function.</p> <p>The function has following signature:</p> <pre><code>def render_func(\n   context: Context,\n   data: Dict[str, Any],\n   slot_ref: SlotRef,\n) -&gt; str | SafeString:\n    return nodelist.render(ctx)\n</code></pre> <ul> <li><code>context</code> - Django's Context available to the Slot Node.</li> <li><code>data</code> - Data passed to the <code>{% slot %}</code> tag. See Scoped Slots.</li> <li><code>slot_ref</code> - The default slot content. See Accessing original content of slots.</li> <li>NOTE: The slot is lazily evaluated. To render the slot, convert it to string with <code>str(slot_ref)</code>.</li> </ul> <p>Example:</p> <pre><code>def footer_slot(ctx, data, slot_ref):\n   return f\"\"\"\n      SLOT_DATA: {data['abc']}\n      ORIGINAL: {slot_ref}\n   \"\"\"\n\nMyComponent.render_to_response(\n    slots={\n        \"footer\": footer_slot,\n   },\n)\n</code></pre>"},{"location":"#response-class-of-render_to_response","title":"Response class of <code>render_to_response</code>","text":"<p>While <code>render</code> method returns a plain string, <code>render_to_response</code> wraps the rendered content in a \"Response\" class. By default, this is <code>django.http.HttpResponse</code>.</p> <p>If you want to use a different Response class in <code>render_to_response</code>, set the <code>Component.response_class</code> attribute:</p> <pre><code>class MyResponse(HttpResponse):\n   def __init__(self, *args, **kwargs) -&gt; None:\n      super().__init__(*args, **kwargs)\n      # Configure response\n      self.headers = ...\n      self.status = ...\n\nclass SimpleComponent(Component):\n   response_class = MyResponse\n   template: types.django_html = \"HELLO\"\n\nresponse = SimpleComponent.render_to_response()\nassert isinstance(response, MyResponse)\n</code></pre>"},{"location":"#use-components-as-views","title":"Use components as views","text":"<p>New in version 0.34</p> <p>Note: Since 0.92, Component no longer subclasses View. To configure the View class, set the nested <code>Component.View</code> class</p> <p>Components can now be used as views: - Components define the <code>Component.as_view()</code> class method that can be used the same as <code>View.as_view()</code>.</p> <ul> <li> <p>By default, you can define GET, POST or other HTTP handlers directly on the Component, same as you do with View. For example, you can override <code>get</code> and <code>post</code> to handle GET and POST requests, respectively.</p> </li> <li> <p>In addition, <code>Component</code> now has a <code>render_to_response</code> method that renders the component template based on the provided context and slots' data and returns an <code>HttpResponse</code> object.</p> </li> </ul>"},{"location":"#component-as-view-example","title":"Component as view example","text":"<p>Here's an example of a calendar component defined as a view:</p> <pre><code># In a file called [project root]/components/calendar.py\nfrom django_components import Component, ComponentView, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n\n    template = \"\"\"\n        &lt;div class=\"calendar-component\"&gt;\n            &lt;div class=\"header\"&gt;\n                {% slot \"header\" / %}\n            &lt;/div&gt;\n            &lt;div class=\"body\"&gt;\n                Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    \"\"\"\n\n    # Handle GET requests\n    def get(self, request, *args, **kwargs):\n        context = {\n            \"date\": request.GET.get(\"date\", \"2020-06-06\"),\n        }\n        slots = {\n            \"header\": \"Calendar header\",\n        }\n        # Return HttpResponse with the rendered content\n        return self.render_to_response(\n            context=context,\n            slots=slots,\n        )\n</code></pre> <p>Then, to use this component as a view, you should create a <code>urls.py</code> file in your components directory, and add a path to the component's view:</p> <pre><code># In a file called [project root]/components/urls.py\nfrom django.urls import path\nfrom components.calendar.calendar import Calendar\n\nurlpatterns = [\n    path(\"calendar/\", Calendar.as_view()),\n]\n</code></pre> <p><code>Component.as_view()</code> is a shorthand for calling <code>View.as_view()</code> and passing the component instance as one of the arguments.</p> <p>Remember to add <code>__init__.py</code> to your components directory, so that Django can find the <code>urls.py</code> file.</p> <p>Finally, include the component's urls in your project's <code>urls.py</code> file:</p> <pre><code># In a file called [project root]/urls.py\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"components/\", include(\"components.urls\")),\n]\n</code></pre> <p>Note: Slots content are automatically escaped by default to prevent XSS attacks. To disable escaping, set <code>escape_slots_content=False</code> in the <code>render_to_response</code> method. If you do so, you should make sure that any content you pass to the slots is safe, especially if it comes from user input.</p> <p>If you're planning on passing an HTML string, check Django's use of <code>format_html</code> and <code>mark_safe</code>.</p>"},{"location":"#modifying-the-view-class","title":"Modifying the View class","text":"<p>The View class that handles the requests is defined on <code>Component.View</code>.</p> <p>When you define a GET or POST handlers on the <code>Component</code> class, like so:</p> <pre><code>class MyComponent(Component):\n    def get(self, request, *args, **kwargs):\n        return self.render_to_response(\n            context={\n                \"date\": request.GET.get(\"date\", \"2020-06-06\"),\n            },\n        )\n\n    def post(self, request, *args, **kwargs) -&gt; HttpResponse:\n        variable = request.POST.get(\"variable\")\n        return self.render_to_response(\n            kwargs={\"variable\": variable}\n        )\n</code></pre> <p>Then the request is still handled by <code>Component.View.get()</code> or <code>Component.View.post()</code> methods. However, by default, <code>Component.View.get()</code> points to <code>Component.get()</code>, and so on.</p> <pre><code>class ComponentView(View):\n    component: Component = None\n    ...\n\n    def get(self, request, *args, **kwargs):\n        return self.component.get(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.component.post(request, *args, **kwargs)\n\n    ...\n</code></pre> <p>If you want to define your own <code>View</code> class, you need to: 1. Set the class as <code>Component.View</code> 2. Subclass from <code>ComponentView</code>, so the View instance has access to the component instance.</p> <p>In the example below, we added extra logic into <code>View.setup()</code>.</p> <p>Note that the POST handler is still defined at the top. This is because <code>View</code> subclasses <code>ComponentView</code>, which defines the <code>post()</code> method that calls <code>Component.post()</code>.</p> <p>If you were to overwrite the <code>View.post()</code> method, then <code>Component.post()</code> would be ignored.</p> <pre><code>from django_components import Component, ComponentView\n\nclass MyComponent(Component):\n\n    def post(self, request, *args, **kwargs) -&gt; HttpResponse:\n        variable = request.POST.get(\"variable\")\n        return self.component.render_to_response(\n            kwargs={\"variable\": variable}\n        )\n\n    class View(ComponentView):\n        def setup(self, request, *args, **kwargs):\n            super(request, *args, **kwargs)\n\n            do_something_extra(request, *args, **kwargs)\n</code></pre>"},{"location":"#typing-and-validating-components","title":"Typing and validating components","text":""},{"location":"#adding-type-hints-with-generics","title":"Adding type hints with Generics","text":"<p>New in version 0.92</p> <p>The <code>Component</code> class optionally accepts type parameters that allow you to specify the types of args, kwargs, slots, and data:</p> <pre><code>class Button(Component[Args, Kwargs, Data, Slots]):\n    ...\n</code></pre> <ul> <li><code>Args</code> - Must be a <code>Tuple</code> or <code>Any</code></li> <li><code>Kwargs</code> - Must be a <code>TypedDict</code> or <code>Any</code></li> <li><code>Data</code> - Must be a <code>TypedDict</code> or <code>Any</code></li> <li><code>Slots</code> - Must be a <code>TypedDict</code> or <code>Any</code></li> </ul> <p>Here's a full example:</p> <pre><code>from typing import NotRequired, Tuple, TypedDict, SlotContent, SlotFunc\n\n# Positional inputs\nArgs = Tuple[int, str]\n\n# Kwargs inputs\nclass Kwargs(TypedDict):\n    variable: str\n    another: int\n    maybe_var: NotRequired[int] # May be ommited\n\n# Data returned from `get_context_data`\nclass Data(TypedDict):\n    variable: str\n\n# The data available to the `my_slot` scoped slot\nclass MySlotData(TypedDict):\n    value: int\n\n# Slots\nclass Slots(TypedDict):\n    # Use SlotFunc for slot functions.\n    # The generic specifies the `data` dictionary\n    my_slot: NotRequired[SlotFunc[MySlotData]]\n    # SlotContent == Union[str, SafeString]\n    another_slot: SlotContent\n\nclass Button(Component[Args, Kwargs, Data, Slots]):\n    def get_context_data(self, variable, another):\n        return {\n            \"variable\": variable,\n        }\n</code></pre> <p>When you then call <code>Component.render</code> or <code>Component.render_to_response</code>, you will get type hints:</p> <pre><code>Button.render(\n    # Error: First arg must be `int`, got `float`\n    args=(1.25, \"abc\"),\n    # Error: Key \"another\" is missing\n    kwargs={\n        \"variable\": \"text\",\n    },\n)\n</code></pre>"},{"location":"#usage-for-python-311","title":"Usage for Python &lt;3.11","text":"<p>On Python 3.8-3.10, use <code>typing_extensions</code></p> <pre><code>from typing_extensions import TypedDict, NotRequired\n</code></pre> <p>Additionally on Python 3.8-3.9, also import <code>annotations</code>:</p> <pre><code>from __future__ import annotations\n</code></pre> <p>Moreover, on 3.10 and less, you may not be able to use <code>NotRequired</code>, and instead you will need to mark either all keys are required, or all keys as optional, using TypeDict's <code>total</code> kwarg.</p> <p>See PEP-655 for more info.</p>"},{"location":"#passing-additional-args-or-kwargs","title":"Passing additional args or kwargs","text":"<p>You may have a function that supports any number of args or kwargs:</p> <pre><code>def get_context_data(self, *args, **kwargs):\n    ...\n</code></pre> <p>This is not supported with the typed components.</p> <p>As a workaround: - For <code>*args</code>, set a positional argument that accepts a list of values:</p> <pre><code>```py\n# Tuple of one member of list of strings\nArgs = Tuple[List[str]]\n```\n</code></pre> <ul> <li> <p>For <code>*kwargs</code>, set a keyword argument that accepts a dictionary of values:</p> <pre><code>class Kwargs(TypedDict):\n    variable: str\n    another: int\n    # Pass any extra keys under `extra`\n    extra: Dict[str, any]\n</code></pre> </li> </ul>"},{"location":"#handling-no-args-or-no-kwargs","title":"Handling no args or no kwargs","text":"<p>To declare that a component accepts no Args, Kwargs, etc, you can use <code>EmptyTuple</code> and <code>EmptyDict</code> types:</p> <pre><code>from django_components import Component, EmptyDict, EmptyTuple\n\nArgs = EmptyTuple\nKwargs = Data = Slots = EmptyDict\n\nclass Button(Component[Args, Kwargs, Data, Slots]):\n    ...\n</code></pre>"},{"location":"#runtime-input-validation-with-types","title":"Runtime input validation with types","text":"<p>New in version 0.96</p> <p>NOTE: Kwargs, slots, and data validation is supported only for Python &gt;=3.11</p> <p>In Python 3.11 and later, when you specify the component types, you will get also runtime validation of the inputs you pass to <code>Component.render</code> or <code>Component.render_to_response</code>.</p> <p>So, using the example from before, if you ignored the type errors and still ran the following code:</p> <pre><code>Button.render(\n    # Error: First arg must be `int`, got `float`\n    args=(1.25, \"abc\"),\n    # Error: Key \"another\" is missing\n    kwargs={\n        \"variable\": \"text\",\n    },\n)\n</code></pre> <p>This would raise a <code>TypeError</code>:</p> <pre><code>Component 'Button' expected positional argument at index 0 to be &lt;class 'int'&gt;, got 1.25 of type &lt;class 'float'&gt;\n</code></pre> <p>In case you need to skip these errors, you can either set the faulty member to <code>Any</code>, e.g.:</p> <pre><code># Changed `int` to `Any`\nArgs = Tuple[Any, str]\n</code></pre> <p>Or you can replace <code>Args</code> with <code>Any</code> altogether, to skip the validation of args:</p> <pre><code># Replaced `Args` with `Any`\nclass Button(Component[Any, Kwargs, Data, Slots]):\n    ...\n</code></pre> <p>Same applies to kwargs, data, and slots.</p>"},{"location":"#pre-defined-components","title":"Pre-defined components","text":""},{"location":"#dynamic-components","title":"Dynamic components","text":"<p>If you are writing something like a form component, you may design it such that users give you the component names, and your component renders it.</p> <p>While you can handle this with a series of if / else statements, this is not an extensible solution.</p> <p>Instead, you can use dynamic components. Dynamic components are used in place of normal components.</p> <pre><code>{% load component_tags %}\n{% component \"dynamic\" is=component_name title=\"Cat Museum\" %}\n    {% fill \"content\" %}\n        HELLO_FROM_SLOT_1\n    {% endfill %}\n    {% fill \"sidebar\" %}\n        HELLO_FROM_SLOT_2\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>These behave same way as regular components. You pass it the same args, kwargs, and slots as you would to the component that you want to render.</p> <p>The only exception is that also you supply 1-2 additional inputs: - <code>is</code> - Required - The component name or a component class to render - <code>registry</code> - Optional - The <code>ComponentRegistry</code> that will be searched if <code>is</code> is a component name. If omitted, ALL registries are searched.</p> <p>By default, the dynamic component is registered under the name <code>\"dynamic\"</code>. In case of a conflict, you can change the name used for the dynamic components by defining the <code>COMPONENTS.dynamic_component_name</code> setting.</p> <p>If you need to use the dynamic components in Python, you can also import it from <code>django_components</code>: <pre><code>from django_components import DynamicComponent\n\ncomp = SimpleTableComp if is_readonly else TableComp\n\noutput = DynamicComponent.render(\n    kwargs={\n        \"is\": comp,\n        # Other kwargs...\n    },\n    # args: [...],\n    # slots: {...},\n)\n</code></pre></p>"},{"location":"#registering-components","title":"Registering components","text":"<p>In previous examples you could repeatedly see us using <code>@register()</code> to \"register\" the components. In this section we dive deeper into what it actually means and how you can manage (add or remove) components.</p> <p>As a reminder, we may have a component like this:</p> <pre><code>from django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"template.html\"\n\n    # This component takes one parameter, a date string to show in the template\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n</code></pre> <p>which we then render in the template as:</p> <pre><code>{% component \"calendar\" date=\"1970-01-01\" %}\n{% endcomponent %}\n</code></pre> <p>As you can see, <code>@register</code> links up the component class with the <code>{% component %}</code> template tag. So when the template tag comes across a component called <code>\"calendar\"</code>, it can look up it's class and instantiate it.</p>"},{"location":"#what-is-componentregistry","title":"What is ComponentRegistry","text":"<p>The <code>@register</code> decorator is a shortcut for working with the <code>ComponentRegistry</code>.</p> <p><code>ComponentRegistry</code> manages which components can be used in the template tags.</p> <p>Each <code>ComponentRegistry</code> instance is associated with an instance of Django's <code>Library</code>. And Libraries are inserted into Django template using the <code>{% load %}</code> tags.</p> <p>The <code>@register</code> decorator accepts an optional kwarg <code>registry</code>, which specifies, the <code>ComponentRegistry</code> to register components into. If omitted, the default <code>ComponentRegistry</code> instance defined in django_components is used.</p> <pre><code>my_registry = ComponentRegistry()\n\n@register(registry=my_registry)\nclass MyComponent(Component):\n    ...\n</code></pre> <p>The default <code>ComponentRegistry</code> is associated with the <code>Library</code> that you load when you call <code>{% load component_tags %}</code> inside your template, or when you add <code>django_components.templatetags.component_tags</code> to the template builtins.</p> <p>So when you register or unregister a component to/from a component registry, then behind the scenes the registry automatically adds/removes the component's template tags to/from the Library, so you can call the component from within the templates such as <code>{% component \"my_comp\" %}</code>.</p>"},{"location":"#working-with-componentregistry","title":"Working with ComponentRegistry","text":"<p>The default <code>ComponentRegistry</code> instance can be imported as:</p> <pre><code>from django_components import registry\n</code></pre> <p>You can use the registry to manually add/remove/get components:</p> <pre><code>from django_components import registry\n\n# Register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n\n# Get all or single\nregistry.all()  # {\"button\": ButtonComponent, \"card\": CardComponent}\nregistry.get(\"card\")  # CardComponent\n\n# Unregister single component\nregistry.unregister(\"card\")\n\n# Unregister all components\nregistry.clear()\n</code></pre>"},{"location":"#registering-components-to-custom-componentregistry","title":"Registering components to custom ComponentRegistry","text":"<p>If you are writing a component library to be shared with others, you may want to manage your own instance of <code>ComponentRegistry</code> and register components onto a different <code>Library</code> instance than the default one.</p> <p>The <code>Library</code> instance can be set at instantiation of <code>ComponentRegistry</code>. If omitted, then the default Library instance from django_components is used.</p> <pre><code>from django.template import Library\nfrom django_components import ComponentRegistry\n\nmy_library = Library(...)\nmy_registry = ComponentRegistry(library=my_library)\n</code></pre> <p>When you have defined your own <code>ComponentRegistry</code>, you can either register the components with <code>my_registry.register()</code>, or pass the registry to the <code>@component.register()</code> decorator via the <code>registry</code> kwarg:</p> <pre><code>from path.to.my.registry import my_registry\n\n@register(\"my_component\", registry=my_registry)\nclass MyComponent(Component):\n    ...\n</code></pre> <p>NOTE: The Library instance can be accessed under <code>library</code> attribute of <code>ComponentRegistry</code>.</p>"},{"location":"#componentregistry-settings","title":"ComponentRegistry settings","text":"<p>When you are creating an instance of <code>ComponentRegistry</code>, you can define the components' behavior within the template.</p> <p>The registry accepts these settings: - <code>CONTEXT_BEHAVIOR</code> - <code>TAG_FORMATTER</code></p> <pre><code>from django.template import Library\nfrom django_components import ComponentRegistry, RegistrySettings\n\nregister = library = django.template.Library()\ncomp_registry = ComponentRegistry(\n    library=library,\n    settings=RegistrySettings(\n        CONTEXT_BEHAVIOR=\"isolated\",\n        TAG_FORMATTER=\"django_components.component_formatter\",\n    ),\n)\n</code></pre> <p>These settings are the same as the ones you can set for django_components.</p> <p>In fact, when you set <code>COMPONENT.tag_formatter</code> or <code>COMPONENT.context_behavior</code>, these are forwarded to the default <code>ComponentRegistry</code>.</p> <p>This makes it possible to have multiple registries with different settings in one projects, and makes sharing of component libraries possible.</p>"},{"location":"#autodiscovery","title":"Autodiscovery","text":"<p>Every component that you want to use in the template with the <code>{% component %}</code> tag needs to be registered with the ComponentRegistry. Normally, we use the <code>@register</code> decorator for that:</p> <pre><code>from django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    ...\n</code></pre> <p>But for the component to be registered, the code needs to be executed - the file needs to be imported as a module.</p> <p>One way to do that is by importing all your components in <code>apps.py</code>:</p> <pre><code>from django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    name = \"my_app\"\n\n    def ready(self) -&gt; None:\n        from components.card.card import Card\n        from components.list.list import List\n        from components.menu.menu import Menu\n        from components.button.button import Button\n        ...\n</code></pre> <p>However, there's a simpler way!</p> <p>By default, the Python files in the <code>STATICFILES_DIRS</code> directories are auto-imported in order to auto-register the components.</p> <p>Autodiscovery occurs when Django is loaded, during the <code>ready</code> hook of the <code>apps.py</code> file.</p> <p>If you are using autodiscovery, keep a few points in mind:</p> <ul> <li>Avoid defining any logic on the module-level inside the <code>components</code> dir, that you would not want to run anyway.</li> <li>Components inside the auto-imported files still need to be registered with <code>@register()</code></li> <li>Auto-imported component files must be valid Python modules, they must use suffix <code>.py</code>, and module name should follow PEP-8.</li> </ul> <p>Autodiscovery can be disabled in the settings.</p>"},{"location":"#manually-trigger-autodiscovery","title":"Manually trigger autodiscovery","text":"<p>Autodiscovery can be also triggered manually as a function call. This is useful if you want to run autodiscovery at a custom point of the lifecycle:</p> <pre><code>from django_components import autodiscover\n\nautodiscover()\n</code></pre>"},{"location":"#using-slots-in-templates","title":"Using slots in templates","text":"<p>New in version 0.26:</p> <ul> <li>The <code>slot</code> tag now serves only to declare new slots inside the component template.</li> <li>To override the content of a declared slot, use the newly introduced <code>fill</code> tag instead.</li> <li>Whereas unfilled slots used to raise a warning, filling a slot is now optional by default.</li> <li>To indicate that a slot must be filled, the new <code>required</code> option should be added at the end of the <code>slot</code> tag.</li> </ul> <p>Components support something called 'slots'. When a component is used inside another template, slots allow the parent template to override specific parts of the child component by passing in different content. This mechanism makes components more reusable and composable. This behavior is similar to slots in Vue.</p> <p>In the example below we introduce two block tags that work hand in hand to make this work. These are...</p> <ul> <li><code>{% slot &lt;name&gt; %}</code>/<code>{% endslot %}</code>: Declares a new slot in the component template.</li> <li><code>{% fill &lt;name&gt; %}</code>/<code>{% endfill %}</code>: (Used inside a <code>component</code> tag pair.) Fills a declared slot with the specified content.</li> </ul> <p>Let's update our calendar component to support more customization. We'll add <code>slot</code> tag pairs to its template, template.html.</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        {% slot \"header\" %}Calendar header{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        {% slot \"body\" %}Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>When using the component, you specify which slots you want to fill and where you want to use the defaults from the template. It looks like this:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"body\" %}Can you believe it's already &lt;span&gt;{{ date }}&lt;/span&gt;??{% endfill %}\n{% endcomponent %}\n</code></pre> <p>Since the 'header' fill is unspecified, it's taken from the base template. If you put this in a template, and pass in <code>date=2020-06-06</code>, this is what gets rendered:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        Calendar header\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        Can you believe it's already &lt;span&gt;2020-06-06&lt;/span&gt;??\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"#default-slot","title":"Default slot","text":"<p>Added in version 0.28</p> <p>As you can see, component slots lets you write reusable containers that you fill in when you use a component. This makes for highly reusable components that can be used in different circumstances.</p> <p>It can become tedious to use <code>fill</code> tags everywhere, especially when you're using a component that declares only one slot. To make things easier, <code>slot</code> tags can be marked with an optional keyword: <code>default</code>. When added to the end of the tag (as shown below), this option lets you pass filling content directly in the body of a <code>component</code> tag pair \u2013 without using a <code>fill</code> tag. Choose carefully, though: a component template may contain at most one slot that is marked as <code>default</code>. The <code>default</code> option can be combined with other slot options, e.g. <code>required</code>.</p> <p>Here's the same example as before, except with default slots and implicit filling.</p> <p>The template:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        {% slot \"header\" %}Calendar header{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        {% slot \"body\" default %}Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Including the component (notice how the <code>fill</code> tag is omitted):</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    Can you believe it's already &lt;span&gt;{{ date }}&lt;/span&gt;??\n{% endcomponent %}\n</code></pre> <p>The rendered result (exactly the same as before):</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n  &lt;div class=\"header\"&gt;Calendar header&lt;/div&gt;\n  &lt;div class=\"body\"&gt;Can you believe it's already &lt;span&gt;2020-06-06&lt;/span&gt;??&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>You may be tempted to combine implicit fills with explicit <code>fill</code> tags. This will not work. The following component template will raise an error when compiled.</p> <pre><code>{# DON'T DO THIS #}\n{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"header\" %}Totally new header!{% endfill %}\n    Can you believe it's already &lt;span&gt;{{ date }}&lt;/span&gt;??\n{% endcomponent %}\n</code></pre> <p>By contrast, it is permitted to use <code>fill</code> tags in nested components, e.g.:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% component \"beautiful-box\" %}\n        {% fill \"content\" %} Can you believe it's already &lt;span&gt;{{ date }}&lt;/span&gt;?? {% endfill %}\n    {% endcomponent %}\n{% endcomponent %}\n</code></pre> <p>This is fine too:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"header\" %}\n        {% component \"calendar-header\" %}\n            Super Special Calendar Header\n        {% endcomponent %}\n    {% endfill %}\n{% endcomponent %}\n</code></pre>"},{"location":"#render-fill-in-multiple-places","title":"Render fill in multiple places","text":"<p>Added in version 0.70</p> <p>You can render the same content in multiple places by defining multiple slots with identical names:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        {% slot \"image\" %}Image here{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        {% slot \"image\" %}Image here{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>So if used like:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"image\" %}\n        &lt;img src=\"...\" /&gt;\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>This renders:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        &lt;img src=\"...\" /&gt;\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        &lt;img src=\"...\" /&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"#default-and-required-slots","title":"Default and required slots","text":"<p>If you use a slot multiple times, you can still mark the slot as <code>default</code> or <code>required</code>. For that, you must mark ONLY ONE of the identical slots.</p> <p>We recommend to mark the first occurence for consistency, e.g.:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        {% slot \"image\" default required %}Image here{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        {% slot \"image\" %}Image here{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Which you can then use are regular default slot:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    &lt;img src=\"...\" /&gt;\n{% endcomponent %}\n</code></pre>"},{"location":"#accessing-original-content-of-slots","title":"Accessing original content of slots","text":"<p>Added in version 0.26</p> <p>NOTE: In version 0.77, the syntax was changed from</p> <pre><code>{% fill \"my_slot\" as \"alias\" %} {{ alias.default }}\n</code></pre> <p>to</p> <pre><code>{% fill \"my_slot\" default=\"slot_default\" %} {{ slot_default }}\n</code></pre> <p>Sometimes you may want to keep the original slot, but only wrap or prepend/append content to it. To do so, you can access the default slot via the <code>default</code> kwarg.</p> <p>Similarly to the <code>data</code> attribute, you specify the variable name through which the default slot will be made available.</p> <p>For instance, let's say you're filling a slot called 'body'. To render the original slot, assign it to a variable using the <code>'default'</code> keyword. You then render this variable to insert the default content:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"body\" default=\"body_default\" %}\n        {{ body_default }}. Have a great day!\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>This produces:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        Calendar header\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        Today's date is &lt;span&gt;2020-06-06&lt;/span&gt;. Have a great day!\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"#conditional-slots","title":"Conditional slots","text":"<p>Added in version 0.26.</p> <p>NOTE: In version 0.70, <code>{% if_filled %}</code> tags were replaced with <code>{{ component_vars.is_filled }}</code> variables. If your slot name contained special characters, see the section \"Accessing slot names with special characters\".</p> <p>In certain circumstances, you may want the behavior of slot filling to depend on whether or not a particular slot is filled.</p> <p>For example, suppose we have the following component template:</p> <pre><code>&lt;div class=\"frontmatter-component\"&gt;\n    &lt;div class=\"title\"&gt;\n        {% slot \"title\" %}Title{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"subtitle\"&gt;\n        {% slot \"subtitle\" %}{# Optional subtitle #}{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>By default the slot named 'subtitle' is empty. Yet when the component is used without explicit fills, the div containing the slot is still rendered, as shown below:</p> <pre><code>&lt;div class=\"frontmatter-component\"&gt;\n  &lt;div class=\"title\"&gt;Title&lt;/div&gt;\n  &lt;div class=\"subtitle\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>This may not be what you want. What if instead the outer 'subtitle' div should only be included when the inner slot is in fact filled?</p> <p>The answer is to use the <code>{{ component_vars.is_filled.&lt;name&gt; }}</code> variable. You can use this together with Django's <code>{% if/elif/else/endif %}</code> tags to define a block whose contents will be rendered only if the component slot with the corresponding 'name' is filled.</p> <p>This is what our example looks like with <code>component_vars.is_filled</code>.</p> <pre><code>&lt;div class=\"frontmatter-component\"&gt;\n    &lt;div class=\"title\"&gt;\n        {% slot \"title\" %}Title{% endslot %}\n    &lt;/div&gt;\n    {% if component_vars.is_filled.subtitle %}\n    &lt;div class=\"subtitle\"&gt;\n        {% slot \"subtitle\" %}{# Optional subtitle #}{% endslot %}\n    &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre> <p>Here's our example with more complex branching.</p> <pre><code>&lt;div class=\"frontmatter-component\"&gt;\n    &lt;div class=\"title\"&gt;\n        {% slot \"title\" %}Title{% endslot %}\n    &lt;/div&gt;\n    {% if component_vars.is_filled.subtitle %}\n    &lt;div class=\"subtitle\"&gt;\n        {% slot \"subtitle\" %}{# Optional subtitle #}{% endslot %}\n    &lt;/div&gt;\n    {% elif component_vars.is_filled.title %}\n        ...\n    {% elif component_vars.is_filled.&lt;name&gt; %}\n        ...\n    {% endif %}\n&lt;/div&gt;\n</code></pre> <p>Sometimes you're not interested in whether a slot is filled, but rather that it isn't. To negate the meaning of <code>component_vars.is_filled</code>, simply treat it as boolean and negate it with <code>not</code>:</p> <pre><code>{% if not component_vars.is_filled.subtitle %}\n&lt;div class=\"subtitle\"&gt;\n    {% slot \"subtitle\" / %}\n&lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"#accessing-is_filled-of-slot-names-with-special-characters","title":"Accessing <code>is_filled</code> of slot names with special characters","text":"<p>To be able to access a slot name via <code>component_vars.is_filled</code>, the slot name needs to be composed of only alphanumeric characters and underscores (e.g. <code>this__isvalid_123</code>).</p> <p>However, you can still define slots with other special characters. In such case, the slot name in <code>component_vars.is_filled</code> is modified to replace all invalid characters into <code>_</code>.</p> <p>So a slot named <code>\"my super-slot :)\"</code> will be available as <code>component_vars.is_filled.my_super_slot___</code>.</p>"},{"location":"#scoped-slots","title":"Scoped slots","text":"<p>Added in version 0.76:</p> <p>Consider a component with slot(s). This component may do some processing on the inputs, and then use the processed variable in the slot's default template:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        &lt;div&gt;\n            {% slot \"content\" default %}\n                input: {{ input }}\n            {% endslot %}\n        &lt;/div&gt;\n    \"\"\"\n\n    def get_context_data(self, input):\n        processed_input = do_something(input)\n        return {\"input\": processed_input}\n</code></pre> <p>You may want to design a component so that users of your component can still access the <code>input</code> variable, so they don't have to recompute it.</p> <p>This behavior is called \"scoped slots\". This is inspired by Vue scoped slots and scoped slots of django-web-components.</p> <p>Using scoped slots consists of two steps:</p> <ol> <li>Passing data to <code>slot</code> tag</li> <li>Accessing data in <code>fill</code> tag</li> </ol>"},{"location":"#passing-data-to-slots","title":"Passing data to slots","text":"<p>To pass the data to the <code>slot</code> tag, simply pass them as keyword attributes (<code>key=value</code>):</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        &lt;div&gt;\n            {% slot \"content\" default input=input %}\n                input: {{ input }}\n            {% endslot %}\n        &lt;/div&gt;\n    \"\"\"\n\n    def get_context_data(self, input):\n        processed_input = do_something(input)\n        return {\n            \"input\": processed_input,\n        }\n</code></pre>"},{"location":"#accessing-slot-data-in-fill","title":"Accessing slot data in fill","text":"<p>Next, we head over to where we define a fill for this slot. Here, to access the slot data we set the <code>data</code> attribute to the name of the variable through which we want to access the slot data. In the example below, we set it to <code>data</code>:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"content\" data=\"data\" %}\n        {{ data.input }}\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>To access slot data on a default slot, you have to explictly define the <code>{% fill %}</code> tags.</p> <p>So this works:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"content\" data=\"data\" %}\n        {{ data.input }}\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>While this does not:</p> <pre><code>{% component \"my_comp\" data=\"data\" %}\n    {{ data.input }}\n{% endcomponent %}\n</code></pre> <p>Note: You cannot set the <code>data</code> attribute and <code>default</code> attribute) to the same name. This raises an error:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"content\" data=\"slot_var\" default=\"slot_var\" %}\n        {{ slot_var.input }}\n    {% endfill %}\n{% endcomponent %}\n</code></pre>"},{"location":"#dynamic-slots-and-fills","title":"Dynamic slots and fills","text":"<p>Until now, we were declaring slot and fill names statically, as a string literal, e.g.</p> <pre><code>{% slot \"content\" / %}\n</code></pre> <p>However, sometimes you may want to generate slots based on the given input. One example of this is a table component like that of Vuetify, which creates a header and an item slots for each user-defined column.</p> <p>In django_components you can achieve the same, simply by using a variable (or a template expression) instead of a string literal:</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    {% for header in headers %}\n      &lt;th&gt;\n        {% slot \"header-{{ header.key }}\" value=header.title %}\n          {{ header.title }}\n        {% endslot %}\n      &lt;/th&gt;\n    {% endfor %}\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>When using the component, you can either set the fill explicitly:</p> <pre><code>{% component \"table\" headers=headers items=items %}\n  {% fill \"header-name\" data=\"data\" %}\n    &lt;b&gt;{{ data.value }}&lt;/b&gt;\n  {% endfill %}\n{% endcomponent %}\n</code></pre> <p>Or also use a variable:</p> <pre><code>{% component \"table\" headers=headers items=items %}\n  {# Make only the active column bold #}\n  {% fill \"header-{{ active_header_name }}\" data=\"data\" %}\n    &lt;b&gt;{{ data.value }}&lt;/b&gt;\n  {% endfill %}\n{% endcomponent %}\n</code></pre> <p>NOTE: It's better to use static slot names whenever possible for clarity. The dynamic slot names should be reserved for advanced use only.</p> <p>Lastly, in rare cases, you can also pass the slot name via the spread operator. This is possible, because the slot name argument is actually a shortcut for a <code>name</code> keyword argument.</p> <p>So this:</p> <pre><code>{% slot \"content\" / %}\n</code></pre> <p>is the same as:</p> <pre><code>{% slot name=\"content\" / %}\n</code></pre> <p>So it's possible to define a <code>name</code> key on a dictionary, and then spread that onto the slot tag:</p> <pre><code>{# slot_props = {\"name\": \"content\"} #}\n{% slot ...slot_props / %}\n</code></pre>"},{"location":"#accessing-data-passed-to-the-component","title":"Accessing data passed to the component","text":"<p>When you call <code>Component.render</code> or <code>Component.render_to_response</code>, the inputs to these methods can be accessed from within the instance under <code>self.input</code>.</p> <p>This means that you can use <code>self.input</code> inside: - <code>get_context_data</code> - <code>get_template_name</code> - <code>get_template_string</code></p> <p><code>self.input</code> is defined only for the duration of <code>Component.render</code>, and raises <code>RuntimeError</code> when called outside of this.</p> <p><code>self.input</code> has the same fields as the input to <code>Component.render</code>:</p> <pre><code>class TestComponent(Component):\n    def get_context_data(self, var1, var2, variable, another, **attrs):\n        assert self.input.args == (123, \"str\")\n        assert self.input.kwargs == {\"variable\": \"test\", \"another\": 1}\n        assert self.input.slots == {\"my_slot\": \"MY_SLOT\"}\n        assert isinstance(self.input.context, Context)\n\n        return {\n            \"variable\": variable,\n        }\n\nrendered = TestComponent.render(\n    kwargs={\"variable\": \"test\", \"another\": 1},\n    args=(123, \"str\"),\n    slots={\"my_slot\": \"MY_SLOT\"},\n)\n</code></pre>"},{"location":"#rendering-html-attributes","title":"Rendering HTML attributes","text":"<p>New in version 0.74:</p> <p>You can use the <code>html_attrs</code> tag to render HTML attributes, given a dictionary of values.</p> <p>So if you have a template:</p> <pre><code>&lt;div class=\"{{ classes }}\" data-id=\"{{ my_id }}\"&gt;\n&lt;/div&gt;\n</code></pre> <p>You can simplify it with <code>html_attrs</code> tag:</p> <pre><code>&lt;div {% html_attrs attrs %}&gt;\n&lt;/div&gt;\n</code></pre> <p>where <code>attrs</code> is:</p> <pre><code>attrs = {\n    \"class\": classes,\n    \"data-id\": my_id,\n}\n</code></pre> <p>This feature is inspired by <code>merge_attrs</code> tag of django-web-components and \"fallthrough attributes\" feature of Vue.</p>"},{"location":"#removing-atttributes","title":"Removing atttributes","text":"<p>Attributes that are set to <code>None</code> or <code>False</code> are NOT rendered.</p> <p>So given this input:</p> <pre><code>attrs = {\n    \"class\": \"text-green\",\n    \"required\": False,\n    \"data-id\": None,\n}\n</code></pre> <p>And template:</p> <pre><code>&lt;div {% html_attrs attrs %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Then this renders:</p> <pre><code>&lt;div class=\"text-green\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"#boolean-attributes","title":"Boolean attributes","text":"<p>In HTML, boolean attributes are usually rendered with no value. Consider the example below where the first button is disabled and the second is not:</p> <pre><code>&lt;button disabled&gt;Click me!&lt;/button&gt; &lt;button&gt;Click me!&lt;/button&gt;\n</code></pre> <p>HTML rendering with <code>html_attrs</code> tag or <code>attributes_to_string</code> works the same way, where <code>key=True</code> is rendered simply as <code>key</code>, and <code>key=False</code> is not render at all.</p> <p>So given this input:</p> <pre><code>attrs = {\n    \"disabled\": True,\n    \"autofocus\": False,\n}\n</code></pre> <p>And template:</p> <pre><code>&lt;div {% html_attrs attrs %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Then this renders:</p> <pre><code>&lt;div disabled&gt;&lt;/div&gt;\n</code></pre>"},{"location":"#default-attributes","title":"Default attributes","text":"<p>Sometimes you may want to specify default values for attributes. You can pass a second argument (or kwarg <code>defaults</code>) to set the defaults.</p> <pre><code>&lt;div {% html_attrs attrs defaults %}&gt;\n    ...\n&lt;/div&gt;\n</code></pre> <p>In the example above, if <code>attrs</code> contains e.g. the <code>class</code> key, <code>html_attrs</code> will render:</p> <p><code>class=\"{{ attrs.class }}\"</code></p> <p>Otherwise, <code>html_attrs</code> will render:</p> <p><code>class=\"{{ defaults.class }}\"</code></p>"},{"location":"#appending-attributes","title":"Appending attributes","text":"<p>For the <code>class</code> HTML attribute, it's common that we want to join multiple values, instead of overriding them. For example, if you're authoring a component, you may want to ensure that the component will ALWAYS have a specific class. Yet, you may want to allow users of your component to supply their own classes.</p> <p>We can achieve this by adding extra kwargs. These values will be appended, instead of overwriting the previous value.</p> <p>So if we have a variable <code>attrs</code>:</p> <pre><code>attrs = {\n    \"class\": \"my-class pa-4\",\n}\n</code></pre> <p>And on <code>html_attrs</code> tag, we set the key <code>class</code>:</p> <pre><code>&lt;div {% html_attrs attrs class=\"some-class\" %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Then these will be merged and rendered as:</p> <pre><code>&lt;div data-value=\"my-class pa-4 some-class\"&gt;&lt;/div&gt;\n</code></pre> <p>To simplify merging of variables, you can supply the same key multiple times, and these will be all joined together:</p> <pre><code>{# my_var = \"class-from-var text-red\" #}\n&lt;div {% html_attrs attrs class=\"some-class another-class\" class=my_var %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Renders:</p> <pre><code>&lt;div\n  data-value=\"my-class pa-4 some-class another-class class-from-var text-red\"\n&gt;&lt;/div&gt;\n</code></pre>"},{"location":"#rules-for-html_attrs","title":"Rules for <code>html_attrs</code>","text":"<ol> <li>Both <code>attrs</code> and <code>defaults</code> can be passed as positional args</li> </ol> <p><code>{% html_attrs attrs defaults key=val %}</code></p> <p>or as kwargs</p> <p><code>{% html_attrs key=val defaults=defaults attrs=attrs %}</code></p> <ol> <li> <p>Both <code>attrs</code> and <code>defaults</code> are optional (can be omitted)</p> </li> <li> <p>Both <code>attrs</code> and <code>defaults</code> are dictionaries, and we can define them the same way we define dictionaries for the <code>component</code> tag. So either as <code>attrs=attrs</code> or <code>attrs:key=value</code>.</p> </li> <li> <p>All other kwargs are appended and can be repeated.</p> </li> </ol>"},{"location":"#examples-for-html_attrs","title":"Examples for <code>html_attrs</code>","text":"<p>Assuming that:</p> <pre><code>class_from_var = \"from-var\"\n\nattrs = {\n    \"class\": \"from-attrs\",\n    \"type\": \"submit\",\n}\n\ndefaults = {\n    \"class\": \"from-defaults\",\n    \"role\": \"button\",\n}\n</code></pre> <p>Then:</p> <ul> <li>Empty tag  <code>{% html_attr %}</code></li> </ul> <p>renders (empty string):  <code></code></p> <ul> <li>Only kwargs  <code>{% html_attr class=\"some-class\" class=class_from_var data-id=\"123\" %}</code></li> </ul> <p>renders:  <code>class=\"some-class from-var\" data-id=\"123\"</code></p> <ul> <li>Only attrs  <code>{% html_attr attrs %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs\" type=\"submit\"</code></p> <ul> <li>Attrs as kwarg  <code>{% html_attr attrs=attrs %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs\" type=\"submit\"</code></p> <ul> <li>Only defaults (as kwarg)  <code>{% html_attr defaults=defaults %}</code></li> </ul> <p>renders:  <code>class=\"from-defaults\" role=\"button\"</code></p> <ul> <li>Attrs using the <code>prefix:key=value</code> construct  <code>{% html_attr attrs:class=\"from-attrs\" attrs:type=\"submit\" %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs\" type=\"submit\"</code></p> <ul> <li>Defaults using the <code>prefix:key=value</code> construct  <code>{% html_attr defaults:class=\"from-defaults\" %}</code></li> </ul> <p>renders:  <code>class=\"from-defaults\" role=\"button\"</code></p> <ul> <li>All together (1) - attrs and defaults as positional args:  <code>{% html_attrs attrs defaults class=\"added_class\" class=class_from_var data-id=123 %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs added_class from-var\" type=\"submit\" role=\"button\" data-id=123</code></p> <ul> <li>All together (2) - attrs and defaults as kwargs args:  <code>{% html_attrs class=\"added_class\" class=class_from_var data-id=123 attrs=attrs defaults=defaults %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs added_class from-var\" type=\"submit\" role=\"button\" data-id=123</code></p> <ul> <li>All together (3) - mixed:  <code>{% html_attrs attrs defaults:class=\"default-class\" class=\"added_class\" class=class_from_var data-id=123 %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs added_class from-var\" type=\"submit\" data-id=123</code></p>"},{"location":"#full-example-for-html_attrs","title":"Full example for <code>html_attrs</code>","text":"<pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template: t.django_html = \"\"\"\n        &lt;div\n            {% html_attrs attrs\n                defaults:class=\"pa-4 text-red\"\n                class=\"my-comp-date\"\n                class=class_from_var\n                data-id=\"123\"\n            %}\n        &gt;\n            Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;\n        &lt;/div&gt;\n    \"\"\"\n\n    def get_context_data(self, date: Date, attrs: dict):\n        return {\n            \"date\": date,\n            \"attrs\": attrs,\n            \"class_from_var\": \"extra-class\"\n        }\n\n@register(\"parent\")\nclass Parent(Component):\n    template: t.django_html = \"\"\"\n        {% component \"my_comp\"\n            date=date\n            attrs:class=\"pa-0 border-solid border-red\"\n            attrs:data-json=json_data\n            attrs:@click=\"(e) =&gt; onClick(e, 'from_parent')\"\n        / %}\n    \"\"\"\n\n    def get_context_data(self, date: Date):\n        return {\n            \"date\": datetime.now(),\n            \"json_data\": json.dumps({\"value\": 456})\n        }\n</code></pre> <p>Note: For readability, we've split the tags across multiple lines.</p> <p>Inside <code>MyComp</code>, we defined a default attribute</p> <p><code>defaults:class=\"pa-4 text-red\"</code></p> <p>So if <code>attrs</code> includes key <code>class</code>, the default above will be ignored.</p> <p><code>MyComp</code> also defines <code>class</code> key twice. It means that whether the <code>class</code> attribute is taken from <code>attrs</code> or <code>defaults</code>, the two <code>class</code> values will be appended to it.</p> <p>So by default, <code>MyComp</code> renders:</p> <pre><code>&lt;div class=\"pa-4 text-red my-comp-date extra-class\" data-id=\"123\"&gt;...&lt;/div&gt;\n</code></pre> <p>Next, let's consider what will be rendered when we call <code>MyComp</code> from <code>Parent</code> component.</p> <p><code>MyComp</code> accepts a <code>attrs</code> dictionary, that is passed to <code>html_attrs</code>, so the contents of that dictionary are rendered as the HTML attributes.</p> <p>In <code>Parent</code>, we make use of passing dictionary key-value pairs as kwargs to define individual attributes as if they were regular kwargs.</p> <p>So all kwargs that start with <code>attrs:</code> will be collected into an <code>attrs</code> dict.</p> <pre><code>    attrs:class=\"pa-0 border-solid border-red\"\n    attrs:data-json=json_data\n    attrs:@click=\"(e) =&gt; onClick(e, 'from_parent')\"\n</code></pre> <p>And <code>get_context_data</code> of <code>MyComp</code> will receive <code>attrs</code> input with following keys:</p> <pre><code>attrs = {\n    \"class\": \"pa-0 border-solid\",\n    \"data-json\": '{\"value\": 456}',\n    \"@click\": \"(e) =&gt; onClick(e, 'from_parent')\",\n}\n</code></pre> <p><code>attrs[\"class\"]</code> overrides the default value for <code>class</code>, whereas other keys will be merged.</p> <p>So in the end <code>MyComp</code> will render:</p> <pre><code>&lt;div\n  class=\"pa-0 border-solid my-comp-date extra-class\"\n  data-id=\"123\"\n  data-json='{\"value\": 456}'\n  @click=\"(e) =&gt; onClick(e, 'from_parent')\"\n&gt;\n  ...\n&lt;/div&gt;\n</code></pre>"},{"location":"#rendering-html-attributes-outside-of-templates","title":"Rendering HTML attributes outside of templates","text":"<p>If you need to use serialize HTML attributes outside of Django template and the <code>html_attrs</code> tag, you can use <code>attributes_to_string</code>:</p> <pre><code>from django_components.attributes import attributes_to_string\n\nattrs = {\n    \"class\": \"my-class text-red pa-4\",\n    \"data-id\": 123,\n    \"required\": True,\n    \"disabled\": False,\n    \"ignored-attr\": None,\n}\n\nattributes_to_string(attrs)\n# 'class=\"my-class text-red pa-4\" data-id=\"123\" required'\n</code></pre>"},{"location":"#template-tag-syntax","title":"Template tag syntax","text":"<p>All template tags in django_component, like <code>{% component %}</code> or <code>{% slot %}</code>, and so on, support extra syntax that makes it possible to write components like in Vue or React (JSX).</p>"},{"location":"#self-closing-tags","title":"Self-closing tags","text":"<p>When you have a tag like <code>{% component %}</code> or <code>{% slot %}</code>, but it has no content, you can simply append a forward slash <code>/</code> at the end, instead of writing out the closing tags like <code>{% endcomponent %}</code> or <code>{% endslot %}</code>:</p> <p>So this:</p> <pre><code>{% component \"button\" %}{% endcomponent %}\n</code></pre> <p>becomes</p> <pre><code>{% component \"button\" / %}\n</code></pre>"},{"location":"#special-characters","title":"Special characters","text":"<p>New in version 0.71:</p> <p>Keyword arguments can contain special characters <code># @ . - _</code>, so keywords like so are still valid:</p> <pre><code>&lt;body&gt;\n    {% component \"calendar\" my-date=\"2015-06-19\" @click.native=do_something #some_id=True / %}\n&lt;/body&gt;\n</code></pre> <p>These can then be accessed inside <code>get_context_data</code> so:</p> <pre><code>@register(\"calendar\")\nclass Calendar(Component):\n    # Since # . @ - are not valid identifiers, we have to\n    # use `**kwargs` so the method can accept these args.\n    def get_context_data(self, **kwargs):\n        return {\n            \"date\": kwargs[\"my-date\"],\n            \"id\": kwargs[\"#some_id\"],\n            \"on_click\": kwargs[\"@click.native\"]\n        }\n</code></pre>"},{"location":"#spread-operator","title":"Spread operator","text":"<p>New in version 0.93:</p> <p>Instead of passing keyword arguments one-by-one:</p> <pre><code>{% component \"calendar\" title=\"How to abc\" date=\"2015-06-19\" author=\"John Wick\" / %}\n</code></pre> <p>You can use a spread operator <code>...dict</code> to apply key-value pairs from a dictionary:</p> <pre><code>post_data = {\n    \"title\": \"How to...\",\n    \"date\": \"2015-06-19\",\n    \"author\": \"John Wick\",\n}\n</code></pre> <pre><code>{% component \"calendar\" ...post_data / %}\n</code></pre> <p>This behaves similar to JSX's spread operator or Vue's <code>v-bind</code>.</p> <p>Spread operators are treated as keyword arguments, which means that: 1. Spread operators must come after positional arguments. 2. You cannot use spread operators for positional-only arguments.</p> <p>Other than that, you can use spread operators multiple times, and even put keyword arguments in-between or after them:</p> <pre><code>{% component \"calendar\" ...post_data id=post.id ...extra / %}\n</code></pre> <p>In a case of conflicts, the values added later (right-most) overwrite previous values.</p>"},{"location":"#use-template-tags-inside-component-inputs","title":"Use template tags inside component inputs","text":"<p>New in version 0.93</p> <p>When passing data around, sometimes you may need to do light transformations, like negating booleans or filtering lists.</p> <p>Normally, what you would have to do is to define ALL the variables inside <code>get_context_data()</code>. But this can get messy if your components contain a lot of logic.</p> <pre><code>@register(\"calendar\")\nclass Calendar(Component):\n    def get_context_data(self, id: str, editable: bool):\n        return {\n            \"editable\": editable,\n            \"readonly\": not editable,\n            \"input_id\": f\"input-{id}\",\n            \"icon_id\": f\"icon-{id}\",\n            ...\n        }\n</code></pre> <p>Instead, template tags in django_components (<code>{% component %}</code>, <code>{% slot %}</code>, <code>{% provide %}</code>, etc) allow you to treat literal string values as templates:</p> <pre><code>{% component 'blog_post'\n  \"As positional arg {# yay #}\"\n  title=\"{{ person.first_name }} {{ person.last_name }}\"\n  id=\"{% random_int 10 20 %}\"\n  readonly=\"{{ editable|not }}\"\n  author=\"John Wick {# TODO: parametrize #}\"\n/ %}\n</code></pre> <p>In the example above: - Component <code>test</code> receives a positional argument with value <code>\"As positional arg \"</code>. The comment is omitted. - Kwarg <code>title</code> is passed as a string, e.g. <code>John Doe</code> - Kwarg <code>id</code> is passed as <code>int</code>, e.g. <code>15</code> - Kwarg <code>readonly</code> is passed as <code>bool</code>, e.g. <code>False</code> - Kwarg <code>author</code> is passed as a string, e.g. <code>John Wick</code> (Comment omitted)</p> <p>This is inspired by django-cotton.</p>"},{"location":"#passing-data-as-string-vs-original-values","title":"Passing data as string vs original values","text":"<p>Sometimes you may want to use the template tags to transform or generate the data that is then passed to the component.</p> <p>The data doesn't necessarily have to be strings. In the example above, the kwarg <code>id</code> was passed as an integer, NOT a string.</p> <p>Although the string literals for components inputs are treated as regular Django templates, there is one special case:</p> <p>When the string literal contains only a single template tag, with no extra text, then the value is passed as the original type instead of a string.</p> <p>Here, <code>page</code> is an integer:</p> <pre><code>{% component 'blog_post' page=\"{% random_int 10 20 %}\" / %}\n</code></pre> <p>Here, <code>page</code> is a string:</p> <pre><code>{% component 'blog_post' page=\" {% random_int 10 20 %} \" / %}\n</code></pre> <p>And same applies to the <code>{{ }}</code> variable tags:</p> <p>Here, <code>items</code> is a list:</p> <pre><code>{% component 'cat_list' items=\"{{ cats|slice:':2' }}\" / %}\n</code></pre> <p>Here, <code>items</code> is a string:</p> <pre><code>{% component 'cat_list' items=\"{{ cats|slice:':2' }} See more\" / %}\n</code></pre>"},{"location":"#evaluating-python-expressions-in-template","title":"Evaluating Python expressions in template","text":"<p>You can even go a step further and have a similar experience to Vue or React, where you can evaluate arbitrary code expressions:</p> <pre><code>&lt;MyForm\n  value={ isEnabled ? inputValue : null }\n/&gt;\n</code></pre> <p>Similar is possible with <code>django-expr</code>, which adds an <code>expr</code> tag and filter that you can use to evaluate Python expressions from within the template:</p> <pre><code>{% component \"my_form\"\n  value=\"{% expr 'input_value if is_enabled else None' %}\"\n/ %}\n</code></pre> <p>Note: Never use this feature to mix business logic and template logic. Business logic should still be in the view!</p>"},{"location":"#pass-dictonary-by-its-key-value-pairs","title":"Pass dictonary by its key-value pairs","text":"<p>New in version 0.74:</p> <p>Sometimes, a component may expect a dictionary as one of its inputs.</p> <p>Most commonly, this happens when a component accepts a dictionary of HTML attributes (usually called <code>attrs</code>) to pass to the underlying template.</p> <p>In such cases, we may want to define some HTML attributes statically, and other dynamically. But for that, we need to define this dictionary on Python side:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        {% component \"other\" attrs=attrs / %}\n    \"\"\"\n\n    def get_context_data(self, some_id: str):\n        attrs = {\n            \"class\": \"pa-4 flex\",\n            \"data-some-id\": some_id,\n            \"@click.stop\": \"onClickHandler\",\n        }\n        return {\"attrs\": attrs}\n</code></pre> <p>But as you can see in the case above, the event handler <code>@click.stop</code> and styling <code>pa-4 flex</code> are disconnected from the template. If the component grew in size and we moved the HTML to a separate file, we would have hard time reasoning about the component's template.</p> <p>Luckily, there's a better way.</p> <p>When we want to pass a dictionary to a component, we can define individual key-value pairs as component kwargs, so we can keep all the relevant information in the template. For that, we prefix the key with the name of the dict and <code>:</code>. So key <code>class</code> of input <code>attrs</code> becomes <code>attrs:class</code>. And our example becomes:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        {% component \"other\"\n            attrs:class=\"pa-4 flex\"\n            attrs:data-some-id=some_id\n            attrs:@click.stop=\"onClickHandler\"\n        / %}\n    \"\"\"\n\n    def get_context_data(self, some_id: str):\n        return {\"some_id\": some_id}\n</code></pre> <p>Sweet! Now all the relevant HTML is inside the template, and we can move it to a separate file with confidence:</p> <pre><code>{% component \"other\"\n    attrs:class=\"pa-4 flex\"\n    attrs:data-some-id=some_id\n    attrs:@click.stop=\"onClickHandler\"\n/ %}\n</code></pre> <p>Note: It is NOT possible to define nested dictionaries, so <code>attrs:my_key:two=2</code> would be interpreted as:</p> <pre><code>{\"attrs\": {\"my_key:two\": 2}}\n</code></pre>"},{"location":"#multi-line-tags","title":"Multi-line tags","text":"<p>By default, Django expects a template tag to be defined on a single line.</p> <p>However, this can become unwieldy if you have a component with a lot of inputs:</p> <pre><code>{% component \"card\" title=\"Joanne Arc\" subtitle=\"Head of Kitty Relations\" date_last_active=\"2024-09-03\" ... %}\n</code></pre> <p>Instead, when you install django_components, it automatically configures Django to suport multi-line tags.</p> <p>So we can rewrite the above as:</p> <pre><code>{% component \"card\"\n    title=\"Joanne Arc\"\n    subtitle=\"Head of Kitty Relations\"\n    date_last_active=\"2024-09-03\"\n    ...\n%}\n</code></pre> <p>Much better!</p> <p>To disable this behavior, set <code>COMPONENTS.multiline_tag</code> to <code>False</code></p>"},{"location":"#prop-drilling-and-dependency-injection-provide-inject","title":"Prop drilling and dependency injection (provide / inject)","text":"<p>New in version 0.80:</p> <p>Django components supports dependency injection with the combination of:</p> <ol> <li><code>{% provide %}</code> tag</li> <li><code>inject()</code> method of the <code>Component</code> class</li> </ol>"},{"location":"#what-is-dependency-injection-and-prop-drilling","title":"What is \"dependency injection\" and \"prop drilling\"?","text":"<p>Prop drilling refers to a scenario in UI development where you need to pass data through many layers of a component tree to reach the nested components that actually need the data.</p> <p>Normally, you'd use props to send data from a parent component to its children. However, this straightforward method becomes cumbersome and inefficient if the data has to travel through many levels or if several components scattered at different depths all need the same piece of information.</p> <p>This results in a situation where the intermediate components, which don't need the data for their own functioning, end up having to manage and pass along these props. This clutters the component tree and makes the code verbose and harder to manage.</p> <p>A neat solution to avoid prop drilling is using the \"provide and inject\" technique, AKA dependency injection.</p> <p>With dependency injection, a parent component acts like a data hub for all its descendants. This setup allows any component, no matter how deeply nested it is, to access the required data directly from this centralized provider without having to messily pass props down the chain. This approach significantly cleans up the code and makes it easier to maintain.</p> <p>This feature is inspired by Vue's Provide / Inject and React's Context / useContext.</p>"},{"location":"#how-to-use-provide-inject","title":"How to use provide / inject","text":"<p>As the name suggest, using provide / inject consists of 2 steps</p> <ol> <li>Providing data</li> <li>Injecting provided data</li> </ol> <p>For examples of advanced uses of provide / inject, see this discussion.</p>"},{"location":"#using-provide-tag","title":"Using <code>{% provide %}</code> tag","text":"<p>First we use the <code>{% provide %}</code> tag to define the data we want to \"provide\" (make available).</p> <pre><code>{% provide \"my_data\" key=\"hi\" another=123 %}\n    {% component \"child\" / %}  &lt;--- Can access \"my_data\"\n{% endprovide %}\n\n{% component \"child\" / %}  &lt;--- Cannot access \"my_data\"\n</code></pre> <p>Notice that the <code>provide</code> tag REQUIRES a name as a first argument. This is the key by which we can then access the data passed to this tag.</p> <p><code>provide</code> tag name must resolve to a valid identifier (AKA a valid Python variable name).</p> <p>Once you've set the name, you define the data you want to \"provide\" by passing it as keyword arguments. This is similar to how you pass data to the <code>{% with %}</code> tag.</p> <p>NOTE: Kwargs passed to <code>{% provide %}</code> are NOT added to the context. In the example below, the <code>{{ key }}</code> won't render anything:</p> <pre><code>{% provide \"my_data\" key=\"hi\" another=123 %}\n    {{ key }}\n{% endprovide %}\n</code></pre> <p>Similarly to slots and fills, also provide's name argument can be set dynamically via a variable, a template expression, or a spread operator:</p> <pre><code>{% provide name=name ... %}\n    ...\n{% provide %}\n&lt;/table&gt;\n</code></pre>"},{"location":"#using-inject-method","title":"Using <code>inject()</code> method","text":"<p>To \"inject\" (access) the data defined on the <code>provide</code> tag, you can use the <code>inject()</code> method inside of <code>get_context_data()</code>.</p> <p>For a component to be able to \"inject\" some data, the component (<code>{% component %}</code> tag) must be nested inside the <code>{% provide %}</code> tag.</p> <p>In the example from previous section, we've defined two kwargs: <code>key=\"hi\" another=123</code>. That means that if we now inject <code>\"my_data\"</code>, we get an object with 2 attributes - <code>key</code> and <code>another</code>.</p> <pre><code>class ChildComponent(Component):\n    def get_context_data(self):\n        my_data = self.inject(\"my_data\")\n        print(my_data.key)     # hi\n        print(my_data.another) # 123\n        return {}\n</code></pre> <p>First argument to <code>inject</code> is the key (or name) of the provided data. This must match the string that you used in the <code>provide</code> tag. If no provider with given key is found, <code>inject</code> raises a <code>KeyError</code>.</p> <p>To avoid the error, you can pass a second argument to <code>inject</code> to which will act as a default value, similar to <code>dict.get(key, default)</code>:</p> <pre><code>class ChildComponent(Component):\n    def get_context_data(self):\n        my_data = self.inject(\"invalid_key\", DEFAULT_DATA)\n        assert my_data == DEFAUKT_DATA\n        return {}\n</code></pre> <p>The instance returned from <code>inject()</code> is a subclass of <code>NamedTuple</code>, so the instance is immutable. This ensures that the data returned from <code>inject</code> will always have all the keys that were passed to the <code>provide</code> tag.</p> <p>NOTE: <code>inject()</code> works strictly only in <code>get_context_data</code>. If you try to call it from elsewhere, it will raise an error.</p>"},{"location":"#full-example","title":"Full example","text":"<pre><code>@register(\"child\")\nclass ChildComponent(Component):\n    template = \"\"\"\n        &lt;div&gt; {{ my_data.key }} &lt;/div&gt;\n        &lt;div&gt; {{ my_data.another }} &lt;/div&gt;\n    \"\"\"\n\n    def get_context_data(self):\n        my_data = self.inject(\"my_data\", \"default\")\n        return {\"my_data\": my_data}\n\ntemplate_str = \"\"\"\n    {% load component_tags %}\n    {% provide \"my_data\" key=\"hi\" another=123 %}\n        {% component \"child\" / %}\n    {% endprovide %}\n\"\"\"\n</code></pre> <p>renders:</p> <pre><code>&lt;div&gt;hi&lt;/div&gt;\n&lt;div&gt;123&lt;/div&gt;\n</code></pre>"},{"location":"#component-hooks","title":"Component hooks","text":"<p>New in version 0.96</p> <p>Component hooks are functions that allow you to intercept the rendering process at specific positions.</p>"},{"location":"#available-hooks","title":"Available hooks","text":"<ul> <li><code>on_render_before</code></li> </ul> <pre><code>def on_render_before(\n    self: Component,\n    context: Context,\n    template: Template\n) -&gt; None:\n</code></pre> <pre><code>Hook that runs just before the component's template is rendered.\n\nYou can use this hook to access or modify the context or the template:\n\n```py\ndef on_render_before(self, context, template) -&gt; None:\n    # Insert value into the Context\n    context[\"from_on_before\"] = \":)\"\n\n    # Append text into the Template\n    template.nodelist.append(TextNode(\"FROM_ON_BEFORE\"))\n```\n</code></pre> <ul> <li><code>on_render_after</code></li> </ul> <pre><code>def on_render_after(\n    self: Component,\n    context: Context,\n    template: Template,\n    content: str\n) -&gt; None | str | SafeString:\n</code></pre> <pre><code>Hook that runs just after the component's template was rendered.\nIt receives the rendered output as the last argument.\n\nYou can use this hook to access the context or the template, but modifying\nthem won't have any effect.\n\nTo override the content that gets rendered, you can return a string or SafeString from this hook:\n\n```py\ndef on_render_after(self, context, template, content):\n    # Prepend text to the rendered content\n    return \"Chocolate cookie recipe: \" + content\n```\n</code></pre>"},{"location":"#component-hooks-example","title":"Component hooks example","text":"<p>You can use hooks together with provide / inject to create components that accept a list of items via a slot.</p> <p>In the example below, each <code>tab_item</code> component will be rendered on a separate tab page, but they are all defined in the default slot of the <code>tabs</code> component.</p> <p>See here for how it was done</p> <pre><code>{% component \"tabs\" %}\n  {% component \"tab_item\" header=\"Tab 1\" %}\n    &lt;p&gt;\n      hello from tab 1\n    &lt;/p&gt;\n    {% component \"button\" %}\n      Click me!\n    {% endcomponent %}\n  {% endcomponent %}\n\n  {% component \"tab_item\" header=\"Tab 2\" %}\n    Hello this is tab 2\n  {% endcomponent %}\n{% endcomponent %}\n</code></pre>"},{"location":"#component-context-and-scope","title":"Component context and scope","text":"<p>By default, context variables are passed down the template as in regular Django - deeper scopes can access the variables from the outer scopes. So if you have several nested forloops, then inside the deep-most loop you can access variables defined by all previous loops.</p> <p>With this in mind, the <code>{% component %}</code> tag behaves similarly to <code>{% include %}</code> tag - inside the component tag, you can access all variables that were defined outside of it.</p> <p>And just like with <code>{% include %}</code>, if you don't want a specific component template to have access to the parent context, add <code>only</code> to the <code>{% component %}</code> tag:</p> <pre><code>{% component \"calendar\" date=\"2015-06-19\" only / %}\n</code></pre> <p>NOTE: <code>{% csrf_token %}</code> tags need access to the top-level context, and they will not function properly if they are rendered in a component that is called with the <code>only</code> modifier.</p> <p>If you find yourself using the <code>only</code> modifier often, you can set the context_behavior option to <code>\"isolated\"</code>, which automatically applies the <code>only</code> modifier. This is useful if you want to make sure that components don't accidentally access the outer context.</p> <p>Components can also access the outer context in their context methods like <code>get_context_data</code> by accessing the property <code>self.outer_context</code>.</p>"},{"location":"#customizing-component-tags-with-tagformatter","title":"Customizing component tags with TagFormatter","text":"<p>New in version 0.89</p> <p>By default, components are rendered using the pair of <code>{% component %}</code> / <code>{% endcomponent %}</code> template tags:</p> <pre><code>{% component \"button\" href=\"...\" disabled %}\nClick me!\n{% endcomponent %}\n\n{# or #}\n\n{% component \"button\" href=\"...\" disabled / %}\n</code></pre> <p>You can change this behaviour in the settings under the <code>COMPONENTS.tag_formatter</code>.</p> <p>For example, if you set the tag formatter to <code>django_components.shorthand_component_formatter</code>, the components will use their name as the template tags:</p> <pre><code>{% button href=\"...\" disabled %}\n  Click me!\n{% endbutton %}\n\n{# or #}\n\n{% button href=\"...\" disabled / %}\n</code></pre>"},{"location":"#available-tagformatters","title":"Available TagFormatters","text":"<p>django_components provides following predefined TagFormatters:</p> <ul> <li> <p><code>ComponentFormatter</code> (<code>django_components.component_formatter</code>)</p> <p>Default</p> <p>Uses the <code>component</code> and <code>endcomponent</code> tags, and the component name is gives as the first positional argument.</p> <p>Example as block: <pre><code>{% component \"button\" href=\"...\" %}\n    {% fill \"content\" %}\n        ...\n    {% endfill %}\n{% endcomponent %}\n</code></pre></p> <p>Example as inlined tag: <pre><code>{% component \"button\" href=\"...\" / %}\n</code></pre></p> </li> <li> <p><code>ShorthandComponentFormatter</code> (<code>django_components.shorthand_component_formatter</code>)</p> <p>Uses the component name as start tag, and <code>end&lt;component_name&gt;</code> as an end tag.</p> <p>Example as block: <pre><code>{% button href=\"...\" %}\n    Click me!\n{% endbutton %}\n</code></pre></p> <p>Example as inlined tag: <pre><code>{% button href=\"...\" / %}\n</code></pre></p> </li> </ul>"},{"location":"#writing-your-own-tagformatter","title":"Writing your own TagFormatter","text":""},{"location":"#background","title":"Background","text":"<p>First, let's discuss how TagFormatters work, and how components are rendered in django_components.</p> <p>When you render a component with <code>{% component %}</code> (or your own tag), the following happens: 1. <code>component</code> must be registered as a Django's template tag 2. Django triggers django_components's tag handler for tag <code>component</code>. 3. The tag handler passes the tag contents for pre-processing to <code>TagFormatter.parse()</code>.</p> <pre><code>So if you render this:\n```django\n{% component \"button\" href=\"...\" disabled %}\n{% endcomponent %}\n```\n\nThen `TagFormatter.parse()` will receive a following input:\n```py\n[\"component\", '\"button\"', 'href=\"...\"', 'disabled']\n```\n</code></pre> <ol> <li> <p><code>TagFormatter</code> extracts the component name and the remaining input.</p> <p>So, given the above, <code>TagFormatter.parse()</code> returns the following: <pre><code>TagResult(\n    component_name=\"button\",\n    tokens=['href=\"...\"', 'disabled']\n)\n</code></pre> 5. The tag handler resumes, using the tokens returned from <code>TagFormatter</code>.</p> <p>So, continuing the example, at this point the tag handler practically behaves as if you rendered: <pre><code>{% component href=\"...\" disabled %}\n</code></pre> 6. Tag handler looks up the component <code>button</code>, and passes the args, kwargs, and slots to it.</p> </li> </ol>"},{"location":"#tagformatter","title":"TagFormatter","text":"<p><code>TagFormatter</code> handles following parts of the process above: - Generates start/end tags, given a component. This is what you then call from within your template as <code>{% component %}</code>.</p> <ul> <li>When you <code>{% component %}</code>, tag formatter pre-processes the tag contents, so it can link back the custom template tag to the right component.</li> </ul> <p>To do so, subclass from <code>TagFormatterABC</code> and implement following method: - <code>start_tag</code> - <code>end_tag</code> - <code>parse</code></p> <p>For example, this is the implementation of <code>ShorthandComponentFormatter</code></p> <pre><code>class ShorthandComponentFormatter(TagFormatterABC):\n    # Given a component name, generate the start template tag\n    def start_tag(self, name: str) -&gt; str:\n        return name  # e.g. 'button'\n\n    # Given a component name, generate the start template tag\n    def end_tag(self, name: str) -&gt; str:\n        return f\"end{name}\"  # e.g. 'endbutton'\n\n    # Given a tag, e.g.\n    # `{% button href=\"...\" disabled %}`\n    #\n    # The parser receives:\n    # `['button', 'href=\"...\"', 'disabled']`\n    def parse(self, tokens: List[str]) -&gt; TagResult:\n        tokens = [*tokens]\n        name = tokens.pop(0)\n        return TagResult(\n            name,  # e.g. 'button'\n            tokens  # e.g. ['href=\"...\"', 'disabled']\n        )\n</code></pre> <p>That's it! And once your <code>TagFormatter</code> is ready, don't forget to update the settings!</p>"},{"location":"#defining-htmljscss-files","title":"Defining HTML/JS/CSS files","text":"<p>django_component's management of files builds on top of Django's <code>Media</code> class.</p> <p>To be familiar with how Django handles static files, we recommend reading also:</p> <ul> <li>How to manage static files (e.g. images, JavaScript, CSS)</li> </ul>"},{"location":"#defining-file-paths-relative-to-component-or-static-dirs","title":"Defining file paths relative to component or static dirs","text":"<p>As seen in the getting started example, to associate HTML/JS/CSS files with a component, you set them as <code>template_name</code>, <code>Media.js</code> and <code>Media.css</code> respectively:</p> <pre><code># In a file [project root]/components/calendar/calendar.py\nfrom django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"template.html\"\n\n    class Media:\n        css = \"style.css\"\n        js = \"script.js\"\n</code></pre> <p>In the example above, the files are defined relative to the directory where <code>component.py</code> is.</p> <p>Alternatively, you can specify the file paths relative to the directories set in <code>STATICFILES_DIRS</code>.</p> <p>Assuming that <code>STATICFILES_DIRS</code> contains path <code>[project root]/components</code>, we can rewrite the example as:</p> <pre><code># In a file [project root]/components/calendar/calendar.py\nfrom django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"calendar/template.html\"\n\n    class Media:\n        css = \"calendar/style.css\"\n        js = \"calendar/script.js\"\n</code></pre> <p>NOTE: In case of conflict, the preference goes to resolving the files relative to the component's directory.</p>"},{"location":"#defining-multiple-paths","title":"Defining multiple paths","text":"<p>Each component can have only a single template. However, you can define as many JS or CSS files as you want using a list.</p> <pre><code>class MyComponent(Component):\n    class Media:\n        js = [\"path/to/script1.js\", \"path/to/script2.js\"]\n        css = [\"path/to/style1.css\", \"path/to/style2.css\"]\n</code></pre>"},{"location":"#configuring-css-media-types","title":"Configuring CSS Media Types","text":"<p>You can define which stylesheets will be associated with which CSS Media types. You do so by defining CSS files as a dictionary.</p> <p>See the corresponding Django Documentation.</p> <p>Again, you can set either a single file or a list of files per media type:</p> <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": \"path/to/style1.css\",\n            \"print\": \"path/to/style2.css\",\n        }\n</code></pre> <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": [\"path/to/style1.css\", \"path/to/style2.css\"],\n            \"print\": [\"path/to/style3.css\", \"path/to/style4.css\"],\n        }\n</code></pre> <p>NOTE: When you define CSS as a string or a list, the <code>all</code> media type is implied.</p>"},{"location":"#supported-types-for-file-paths","title":"Supported types for file paths","text":"<p>File paths can be any of:</p> <ul> <li><code>str</code></li> <li><code>bytes</code></li> <li><code>PathLike</code> (<code>__fspath__</code> method)</li> <li><code>SafeData</code> (<code>__html__</code> method)</li> <li><code>Callable</code> that returns any of the above, evaluated at class creation (<code>__new__</code>)</li> </ul> <pre><code>from pathlib import Path\n\nfrom django.utils.safestring import mark_safe\n\nclass SimpleComponent(Component):\n    class Media:\n        css = [\n            mark_safe('&lt;link href=\"/static/calendar/style.css\" rel=\"stylesheet\" /&gt;'),\n            Path(\"calendar/style1.css\"),\n            \"calendar/style2.css\",\n            b\"calendar/style3.css\",\n            lambda: \"calendar/style4.css\",\n        ]\n        js = [\n            mark_safe('&lt;script src=\"/static/calendar/script.js\"&gt;&lt;/script&gt;'),\n            Path(\"calendar/script1.js\"),\n            \"calendar/script2.js\",\n            b\"calendar/script3.js\",\n            lambda: \"calendar/script4.js\",\n        ]\n</code></pre>"},{"location":"#path-as-objects","title":"Path as objects","text":"<p>In the example above, you could see that when we used <code>mark_safe</code> to mark a string as a <code>SafeString</code>, we had to define the full <code>&lt;script&gt;</code>/<code>&lt;link&gt;</code> tag.</p> <p>This is an extension of Django's Paths as objects feature, where \"safe\" strings are taken as is, and accessed only at render time.</p> <p>Because of that, the paths defined as \"safe\" strings are NEVER resolved, neither relative to component's directory, nor relative to <code>STATICFILES_DIRS</code>.</p> <p>\"Safe\" strings can be used to lazily resolve a path, or to customize the <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tag for individual paths:</p> <pre><code>class LazyJsPath:\n    def __init__(self, static_path: str) -&gt; None:\n        self.static_path = static_path\n\n    def __html__(self):\n        full_path = static(self.static_path)\n        return format_html(\n            f'&lt;script type=\"module\" src=\"{full_path}\"&gt;&lt;/script&gt;'\n        )\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"calendar/template.html\"\n\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    class Media:\n        css = \"calendar/style.css\"\n        js = [\n            # &lt;script&gt; tag constructed by Media class\n            \"calendar/script1.js\",\n            # Custom &lt;script&gt; tag\n            LazyJsPath(\"calendar/script2.js\"),\n        ]\n</code></pre>"},{"location":"#customize-how-paths-are-rendered-into-html-tags-with-media_class","title":"Customize how paths are rendered into HTML tags with <code>media_class</code>","text":"<p>Sometimes you may need to change how all CSS <code>&lt;link&gt;</code> or JS <code>&lt;script&gt;</code> tags are rendered for a given component. You can achieve this by providing your own subclass of Django's <code>Media</code> class to component's <code>media_class</code> attribute.</p> <p>Normally, the JS and CSS paths are passed to <code>Media</code> class, which decides how the paths are resolved and how the <code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> tags are constructed.</p> <p>To change how the tags are constructed, you can override the <code>Media.render_js</code> and <code>Media.render_css</code> methods:</p> <pre><code>from django.forms.widgets import Media\nfrom django_components import Component, register\n\nclass MyMedia(Media):\n    # Same as original Media.render_js, except\n    # the `&lt;script&gt;` tag has also `type=\"module\"`\n    def render_js(self):\n        tags = []\n        for path in self._js:\n            if hasattr(path, \"__html__\"):\n                tag = path.__html__()\n            else:\n                tag = format_html(\n                    '&lt;script type=\"module\" src=\"{}\"&gt;&lt;/script&gt;',\n                    self.absolute_path(path)\n                )\n        return tags\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"calendar/template.html\"\n\n    class Media:\n        css = \"calendar/style.css\"\n        js = \"calendar/script.js\"\n\n    # Override the behavior of Media class\n    media_class = MyMedia\n</code></pre> <p>NOTE: The instance of the <code>Media</code> class (or it's subclass) is available under <code>Component.media</code> after the class creation (<code>__new__</code>).</p>"},{"location":"#rendering-jscss-dependencies","title":"Rendering JS/CSS dependencies","text":"<p>The JS and CSS files included in components are not automatically rendered. Instead, use the following tags to specify where to render the dependencies:</p> <ul> <li><code>component_dependencies</code> - Renders both JS and CSS</li> <li><code>component_js_dependencies</code> - Renders only JS</li> <li><code>component_css_dependencies</code> - Reneders only CSS</li> </ul> <p>JS files are rendered as <code>&lt;script&gt;</code> tags. CSS files are rendered as <code>&lt;style&gt;</code> tags.</p>"},{"location":"#setting-up-componentdependencymiddleware","title":"Setting Up <code>ComponentDependencyMiddleware</code>","text":"<p><code>ComponentDependencyMiddleware</code> is a Django middleware designed to manage and inject CSS/JS dependencies for rendered components dynamically. It ensures that only the necessary stylesheets and scripts are loaded in your HTML responses, based on the components used in your Django templates.</p> <p>To set it up, add the middleware to your <code>MIDDLEWARE</code> in settings.py:</p> <pre><code>MIDDLEWARE = [\n    # ... other middleware classes ...\n    'django_components.middleware.ComponentDependencyMiddleware'\n    # ... other middleware classes ...\n]\n</code></pre> <p>Then, enable <code>RENDER_DEPENDENCIES</code> in setting.py:</p> <pre><code>COMPONENTS = {\n    \"RENDER_DEPENDENCIES\": True,\n    # ... other component settings ...\n}\n</code></pre>"},{"location":"#available-settings","title":"Available settings","text":"<p>All library settings are handled from a global <code>COMPONENTS</code> variable that is read from <code>settings.py</code>. By default you don't need it set, there are resonable defaults.</p> <p>Here's overview of all available settings and their defaults:</p> <pre><code>COMPONENTS = {\n    \"autodiscover\": True,\n    \"context_behavior\": \"django\",  # \"django\" | \"isolated\"\n    \"dynamic_component_name\": \"dynamic\",\n    \"libraries\": [],  # [\"mysite.components.forms\", ...]\n    \"multiline_tags\": True,\n    \"reload_on_template_change\": False,\n    \"tag_formatter\": \"django_components.component_formatter\",\n    \"template_cache_size\": 128,\n}\n</code></pre>"},{"location":"#libraries-load-component-modules","title":"<code>libraries</code> - Load component modules","text":"<p>Configure the locations where components are loaded. To do this, add a <code>COMPONENTS</code> variable to you <code>settings.py</code> with a list of python paths to load. This allows you to build a structure of components that are independent from your apps.</p> <pre><code>COMPONENTS = {\n    \"libraries\": [\n        \"mysite.components.forms\",\n        \"mysite.components.buttons\",\n        \"mysite.components.cards\",\n    ],\n}\n</code></pre> <p>Where <code>mysite/components/forms.py</code> may look like this:</p> <pre><code>@register(\"form_simple\")\nclass FormSimple(Component):\n    template = \"\"\"\n        &lt;form&gt;\n            ...\n        &lt;/form&gt;\n    \"\"\"\n\n@register(\"form_other\")\nclass FormOther(Component):\n    template = \"\"\"\n        &lt;form&gt;\n            ...\n        &lt;/form&gt;\n    \"\"\"\n</code></pre> <p>In the rare cases when you need to manually trigger the import of libraries, you can use the <code>import_libraries</code> function:</p> <pre><code>from django_components import import_libraries\n\nimport_libraries()\n</code></pre>"},{"location":"#autodiscover-toggle-autodiscovery","title":"<code>autodiscover</code> - Toggle autodiscovery","text":"<p>If you specify all the component locations with the setting above and have a lot of apps, you can (very) slightly speed things up by disabling autodiscovery.</p> <pre><code>COMPONENTS = {\n    \"autodiscover\": False,\n}\n</code></pre>"},{"location":"#dynamic_component_name","title":"<code>dynamic_component_name</code>","text":"<p>By default, the dynamic component is registered under the name <code>\"dynamic\"</code>. In case of a conflict, use this setting to change the name used for the dynamic components.</p> <pre><code>COMPONENTS = {\n    \"dynamic_component_name\": \"new_dynamic\",\n}\n</code></pre>"},{"location":"#multiline_tags-enabledisable-multiline-support","title":"<code>multiline_tags</code> - Enable/Disable multiline support","text":"<p>If <code>True</code>, template tags can span multiple lines. Default: <code>True</code></p> <pre><code>COMPONENTS = {\n    \"multiline_tags\": True,\n}\n</code></pre>"},{"location":"#template_cache_size-tune-the-template-cache","title":"<code>template_cache_size</code> - Tune the template cache","text":"<p>Each time a template is rendered it is cached to a global in-memory cache (using Python's <code>lru_cache</code> decorator). This speeds up the next render of the component. As the same component is often used many times on the same page, these savings add up.</p> <p>By default the cache holds 128 component templates in memory, which should be enough for most sites. But if you have a lot of components, or if you are using the <code>template</code> method of a component to render lots of dynamic templates, you can increase this number. To remove the cache limit altogether and cache everything, set template_cache_size to <code>None</code>.</p> <pre><code>COMPONENTS = {\n    \"template_cache_size\": 256,\n}\n</code></pre>"},{"location":"#context_behavior-make-components-isolated-or-not","title":"<code>context_behavior</code> - Make components isolated (or not)","text":"<p>NOTE: <code>context_behavior</code> and <code>slot_context_behavior</code> options were merged in v0.70.</p> <p>If you are migrating from BEFORE v0.67, set <code>context_behavior</code> to <code>\"django\"</code>. From v0.67 to v0.78 (incl) the default value was <code>\"isolated\"</code>.</p> <p>For v0.79 and later, the default is again <code>\"django\"</code>. See the rationale for change here.</p> <p>You can configure what variables are available inside the <code>{% fill %}</code> tags. See Component context and scope.</p> <p>This has two modes:</p> <ul> <li><code>\"django\"</code> - Default - The default Django template behavior.</li> </ul> <p>Inside the <code>{% fill %}</code> tag, the context variables you can access are a union of:</p> <ul> <li>All the variables that were OUTSIDE the fill tag, including any loops or with tag</li> <li> <p>Data returned from <code>get_context_data()</code> of the component that wraps the fill tag.</p> </li> <li> <p><code>\"isolated\"</code> - Similar behavior to Vue or React, this is useful if you want to make sure that components don't accidentally access variables defined outside of the component.</p> </li> </ul> <p>Inside the <code>{% fill %}</code> tag, you can ONLY access variables from 2 places:</p> <ul> <li><code>get_context_data()</code> of the component which defined the template (AKA the \"root\" component)</li> <li>Any loops (<code>{% for ... %}</code>) that the <code>{% fill %}</code> tag is part of.</li> </ul> <pre><code>COMPONENTS = {\n    \"context_behavior\": \"isolated\",\n}\n</code></pre>"},{"location":"#example-django","title":"Example \"django\"","text":"<p>Given this template:</p> <pre><code>class RootComp(Component):\n    template = \"\"\"\n        {% with cheese=\"feta\" %}\n            {% component 'my_comp' %}\n                {{ my_var }}  # my_var\n                {{ cheese }}  # cheese\n            {% endcomponent %}\n        {% endwith %}\n    \"\"\"\n    def get_context_data(self):\n        return { \"my_var\": 123 }\n</code></pre> <p>Then if <code>get_context_data()</code> of the component <code>\"my_comp\"</code> returns following data:</p> <pre><code>{ \"my_var\": 456 }\n</code></pre> <p>Then the template will be rendered as:</p> <pre><code>456   # my_var\nfeta  # cheese\n</code></pre> <p>Because <code>\"my_comp\"</code> overshadows the variable <code>\"my_var\"</code>, so <code>{{ my_var }}</code> equals <code>456</code>.</p> <p>And variable <code>\"cheese\"</code> equals <code>feta</code>, because the fill CAN access all the data defined in the outer layers, like the <code>{% with %}</code> tag.</p>"},{"location":"#example-isolated","title":"Example \"isolated\"","text":"<p>Given this template:</p> <pre><code>class RootComp(Component):\n    template = \"\"\"\n        {% with cheese=\"feta\" %}\n            {% component 'my_comp' %}\n                {{ my_var }}  # my_var\n                {{ cheese }}  # cheese\n            {% endcomponent %}\n        {% endwith %}\n    \"\"\"\n    def get_context_data(self):\n        return { \"my_var\": 123 }\n</code></pre> <p>Then if <code>get_context_data()</code> of the component <code>\"my_comp\"</code> returns following data:</p> <pre><code>{ \"my_var\": 456 }\n</code></pre> <p>Then the template will be rendered as:</p> <pre><code>123   # my_var\n      # cheese\n</code></pre> <p>Because variables <code>\"my_var\"</code> and <code>\"cheese\"</code> are searched only inside <code>RootComponent.get_context_data()</code>. But since <code>\"cheese\"</code> is not defined there, it's empty.</p> <p>Notice that the variables defined with the <code>{% with %}</code> tag are ignored inside the <code>{% fill %}</code> tag with the <code>\"isolated\"</code> mode.</p>"},{"location":"#reload_on_template_change-reload-dev-server-on-component-file-changes","title":"<code>reload_on_template_change</code> - Reload dev server on component file changes","text":"<p>If <code>True</code>, configures Django to reload on component files. See Reload dev server on component file changes.</p> <p>NOTE: This setting should be enabled only for the dev environment!</p>"},{"location":"#tag_formatter-change-how-components-are-used-in-templates","title":"<code>tag_formatter</code> - Change how components are used in templates","text":"<p>Sets the <code>TagFormatter</code> instance. See the section Customizing component tags with TagFormatter.</p> <p>Can be set either as direct reference, or as an import string;</p> <pre><code>COMPONENTS = {\n    \"tag_formatter\": \"django_components.component_formatter\"\n}\n</code></pre> <p>Or</p> <pre><code>from django_components import component_formatter\n\nCOMPONENTS = {\n    \"tag_formatter\": component_formatter\n}\n</code></pre>"},{"location":"#running-with-development-server","title":"Running with development server","text":""},{"location":"#reload-dev-server-on-component-file-changes","title":"Reload dev server on component file changes","text":"<p>This is relevant if you are using the project structure as shown in our examples, where HTML, JS, CSS and Python are separate and nested in a directory.</p> <p>In this case you may notice that when you are running a development server, the server sometimes does not reload when you change comoponent files.</p> <p>From relevant StackOverflow thread:</p> <p>TL;DR is that the server won't reload if it thinks the changed file is in a templates directory, or in a nested sub directory of a templates directory. This is by design.</p> <p>To make the dev server reload on all component files, set <code>reload_on_template_change</code> to <code>True</code>. This configures Django to watch for component files too.</p> <p>NOTE: This setting should be enabled only for the dev environment!</p>"},{"location":"#logging-and-debugging","title":"Logging and debugging","text":"<p>Django components supports logging with Django. This can help with troubleshooting.</p> <p>To configure logging for Django components, set the <code>django_components</code> logger in <code>LOGGING</code> in <code>settings.py</code> (below).</p> <p>Also see the <code>settings.py</code> file in sampleproject for a real-life example.</p> <pre><code>import logging\nimport sys\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    \"handlers\": {\n        \"console\": {\n            'class': 'logging.StreamHandler',\n            'stream': sys.stdout,\n        },\n    },\n    \"loggers\": {\n        \"django_components\": {\n            \"level\": logging.DEBUG,\n            \"handlers\": [\"console\"],\n        },\n    },\n}\n</code></pre>"},{"location":"#management-command","title":"Management Command","text":"<p>You can use the built-in management command <code>startcomponent</code> to create a django component. The command accepts the following arguments and options:</p> <ul> <li> <p><code>name</code>: The name of the component to create. This is a required argument.</p> </li> <li> <p><code>--path</code>: The path to the components directory. This is an optional argument. If not provided, the command will use the <code>BASE_DIR</code> setting from your Django settings.</p> </li> <li> <p><code>--js</code>: The name of the JavaScript file. This is an optional argument. The default value is <code>script.js</code>.</p> </li> <li> <p><code>--css</code>: The name of the CSS file. This is an optional argument. The default value is <code>style.css</code>.</p> </li> <li> <p><code>--template</code>: The name of the template file. This is an optional argument. The default value is <code>template.html</code>.</p> </li> <li> <p><code>--force</code>: This option allows you to overwrite existing files if they exist. This is an optional argument.</p> </li> <li> <p><code>--verbose</code>: This option allows the command to print additional information during component creation. This is an optional argument.</p> </li> <li> <p><code>--dry-run</code>: This option allows you to simulate component creation without actually creating any files. This is an optional argument. The default value is <code>False</code>.</p> </li> </ul>"},{"location":"#management-command-usage","title":"Management Command Usage","text":"<p>To use the command, run the following command in your terminal:</p> <pre><code>python manage.py startcomponent &lt;name&gt; --path &lt;path&gt; --js &lt;js_filename&gt; --css &lt;css_filename&gt; --template &lt;template_filename&gt; --force --verbose --dry-run\n</code></pre> <p>Replace <code>&lt;name&gt;</code>, <code>&lt;path&gt;</code>, <code>&lt;js_filename&gt;</code>, <code>&lt;css_filename&gt;</code>, and <code>&lt;template_filename&gt;</code> with your desired values.</p>"},{"location":"#management-command-examples","title":"Management Command Examples","text":"<p>Here are some examples of how you can use the command:</p>"},{"location":"#creating-a-component-with-default-settings","title":"Creating a Component with Default Settings","text":"<p>To create a component with the default settings, you only need to provide the name of the component:</p> <pre><code>python manage.py startcomponent my_component\n</code></pre> <p>This will create a new component named <code>my_component</code> in the <code>components</code> directory of your Django project. The JavaScript, CSS, and template files will be named <code>script.js</code>, <code>style.css</code>, and <code>template.html</code>, respectively.</p>"},{"location":"#creating-a-component-with-custom-settings","title":"Creating a Component with Custom Settings","text":"<p>You can also create a component with custom settings by providing additional arguments:</p> <pre><code>python manage.py startcomponent new_component --path my_components --js my_script.js --css my_style.css --template my_template.html\n</code></pre> <p>This will create a new component named <code>new_component</code> in the <code>my_components</code> directory. The JavaScript, CSS, and template files will be named <code>my_script.js</code>, <code>my_style.css</code>, and <code>my_template.html</code>, respectively.</p>"},{"location":"#overwriting-an-existing-component","title":"Overwriting an Existing Component","text":"<p>If you want to overwrite an existing component, you can use the <code>--force</code> option:</p> <pre><code>python manage.py startcomponent my_component --force\n</code></pre> <p>This will overwrite the existing <code>my_component</code> if it exists.</p>"},{"location":"#simulating-component-creation","title":"Simulating Component Creation","text":"<p>If you want to simulate the creation of a component without actually creating any files, you can use the <code>--dry-run</code> option:</p> <pre><code>python manage.py startcomponent my_component --dry-run\n</code></pre> <p>This will simulate the creation of <code>my_component</code> without creating any files.</p>"},{"location":"#writing-and-sharing-component-libraries","title":"Writing and sharing component libraries","text":"<p>You can publish and share your components for others to use. Here are the steps to do so:</p>"},{"location":"#writing-component-libraries","title":"Writing component libraries","text":"<ol> <li> <p>Create a Django project with the following structure:</p> <pre><code>project/\n  |--  myapp/\n    |--  __init__.py\n    |--  apps.py\n    |--  templates/\n      |--  table/\n        |--  table.py\n        |--  table.js\n        |--  table.css\n        |--  table.html\n    |--  menu.py   &lt;--- single-file component\n  |--  templatetags/\n    |--  __init__.py\n    |--  mytags.py\n</code></pre> </li> <li> <p>Create custom <code>Library</code> and <code>ComponentRegistry</code> instances in <code>mytags.py</code></p> <p>This will be the entrypoint for using the components inside Django templates.</p> <p>Remember that Django requires the <code>Library</code> instance to be accessible under the <code>register</code> variable (See Django docs):</p> <pre><code>from django.template import Library\nfrom django_components import ComponentRegistry, RegistrySettings\n\nregister = library = django.template.Library()\ncomp_registry = ComponentRegistry(\n    library=library,\n    settings=RegistrySettings(\n        CONTEXT_BEHAVIOR=\"isolated\",\n        TAG_FORMATTER=\"django_components.component_formatter\",\n    ),\n)\n</code></pre> <p>As you can see above, this is also the place where we configure how our components should behave, using the <code>settings</code> argument. If omitted, default settings are used.</p> <p>For library authors, we recommend setting <code>CONTEXT_BEHAVIOR</code> to <code>\"isolated\"</code>, so that the state cannot leak into the components, and so the components' behavior is configured solely through the inputs. This means that the components will be more predictable and easier to debug.</p> <p>Next, you can decide how will others use your components by settingt the <code>TAG_FORMATTER</code> options.</p> <p>If omitted or set to <code>\"django_components.component_formatter\"</code>, your components will be used like this:</p> <pre><code>{% component \"table\" items=items headers=headers %}\n{% endcomponent %}\n</code></pre> <p>Or you can use <code>\"django_components.component_shorthand_formatter\"</code> to use components like so:</p> <pre><code>{% table items=items headers=headers %}\n{% endtable %}\n</code></pre> <p>Or you can define a custom TagFormatter.</p> <p>Either way, these settings will be scoped only to your components. So, in the user code, there may be components side-by-side that use different formatters:</p> <pre><code>{% load mytags %}\n\n{# Component from your library \"mytags\", using the \"shorthand\" formatter #}\n{% table items=items headers=header %}\n{% endtable %}\n\n{# User-created components using the default settings #}\n{% component \"my_comp\" title=\"Abc...\" %}\n{% endcomponent %}\n</code></pre> </li> <li> <p>Write your components and register them with your instance of <code>ComponentRegistry</code></p> <p>There's one difference when you are writing components that are to be shared, and that's that the components must be explicitly registered with your instance of <code>ComponentRegistry</code> from the previous step.</p> <p>For better user experience, you can also define the types for the args, kwargs, slots and data.</p> <p>It's also a good idea to have a common prefix for your components, so they can be easily distinguished from users' components. In the example below, we use the prefix <code>my_</code> / <code>My</code>.</p> <pre><code>from typing import Dict, NotRequired, Optional, Tuple, TypedDict\n\nfrom django_components import Component, SlotFunc, register, types\n\nfrom myapp.templatetags.mytags import comp_registry\n\n# Define the types\nclass EmptyDict(TypedDict):\n    pass\n\ntype MyMenuArgs = Tuple[int, str]\n\nclass MyMenuSlots(TypedDict):\n    default: NotRequired[Optional[SlotFunc[EmptyDict]]]\n\nclass MyMenuProps(TypedDict):\n    vertical: NotRequired[bool]\n    klass: NotRequired[str]\n    style: NotRequired[str]\n\n# Define the component\n# NOTE: Don't forget to set the `registry`!\n@register(\"my_menu\", registry=comp_registry)\nclass MyMenu(Component[MyMenuArgs, MyMenuProps, MyMenuSlots, Any]):\n    def get_context_data(\n        self,\n        *args,\n        attrs: Optional[Dict] = None,\n    ):\n        return {\n            \"attrs\": attrs,\n        }\n\n    template: types.django_html = \"\"\"\n        {# Load django_components template tags #}\n        {% load component_tags %}\n\n        &lt;div {% html_attrs attrs class=\"my-menu\" %}&gt;\n            &lt;div class=\"my-menu__content\"&gt;\n                {% slot \"default\" default / %}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    \"\"\"\n</code></pre> </li> <li> <p>Import the components in <code>apps.py</code></p> <p>Normally, users rely on autodiscovery and <code>STATICFILES_DIRS</code> to load the component files.</p> <p>Since you, as the library author, are not in control of the file system, it is recommended to load the components manually.</p> <p>We recommend doing this in the <code>AppConfig.ready()</code> hook of your <code>apps.py</code>:</p> <pre><code>from django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"myapp\"\n\n    # This is the code that gets run when user adds myapp\n    # to Django's INSTALLED_APPS\n    def ready(self) -&gt; None:\n        # Import the components that you want to make available\n        # inside the templates.\n        from myapp.templates import (\n            menu,\n            table,\n        )\n</code></pre> <p>Note that you can also include any other startup logic within <code>AppConfig.ready()</code>.</p> </li> </ol> <p>And that's it! The next step is to publish it.</p>"},{"location":"#publishing-component-libraries","title":"Publishing component libraries","text":"<p>Once you are ready to share your library, you need to build a distribution and then publish it to PyPI.</p> <p>django_components uses the <code>build</code> utility to build a distribution:</p> <pre><code>python -m build --sdist --wheel --outdir dist/ .\n</code></pre> <p>And to publish to PyPI, you can use <code>twine</code> (See Python user guide)</p> <pre><code>twine upload --repository pypi dist/* -u __token__ -p &lt;PyPI_TOKEN&gt;\n</code></pre> <p>Notes on publishing: - The user of the package NEEDS to have installed and configured <code>django_components</code>. - If you use components where the HTML / CSS / JS files are separate, you may need to define <code>MANIFEST.in</code> to include those files with the distribution (see user guide).</p>"},{"location":"#installing-and-using-component-libraries","title":"Installing and using component libraries","text":"<p>After the package has been published, all that remains is to install it in other django projects:</p> <ol> <li> <p>Install the package:</p> <pre><code>pip install myapp\n</code></pre> </li> <li> <p>Add the package to <code>INSTALLED_APPS</code></p> <pre><code>INSTALLED_APPS = [\n    ...\n    \"myapp\",\n]\n</code></pre> </li> <li> <p>Optionally add the template tags to the <code>builtins</code>, so you don't have to call <code>{% load mytags %}</code> in every template:</p> <pre><code>TEMPLATES = [\n    {\n        ...,\n        'OPTIONS': {\n            'context_processors': [\n                ...\n            ],\n            'builtins': [\n                'myapp.templatetags.mytags',\n            ]\n        },\n    },\n]\n</code></pre> </li> <li> <p>And, at last, you can use the components in your own project!</p> <pre><code>{% my_menu title=\"Abc...\" %}\n    Hello World!\n{% endmy_menu %}\n</code></pre> </li> </ol>"},{"location":"#community-examples","title":"Community examples","text":"<p>One of our goals with <code>django-components</code> is to make it easy to share components between projects. If you have a set of components that you think would be useful to others, please open a pull request to add them to the list below.</p> <ul> <li>django-htmx-components: A set of components for use with htmx. Try out the live demo.</li> </ul>"},{"location":"#running-django-components-project-locally","title":"Running django-components project locally","text":""},{"location":"#install-locally-and-run-the-tests","title":"Install locally and run the tests","text":"<p>Start by forking the project by clicking the Fork button up in the right corner in the GitHub . This makes a copy of the repository in your own name. Now you can clone this repository locally and start adding features:</p> <pre><code>git clone https://github.com/&lt;your GitHub username&gt;/django-components.git\n</code></pre> <p>To quickly run the tests install the local dependencies by running:</p> <pre><code>pip install -r requirements-dev.txt\n</code></pre> <p>Now you can run the tests to make sure everything works as expected:</p> <pre><code>pytest\n</code></pre> <p>The library is also tested across many versions of Python and Django. To run tests that way:</p> <pre><code>pyenv install -s 3.8\npyenv install -s 3.9\npyenv install -s 3.10\npyenv install -s 3.11\npyenv install -s 3.12\npyenv local 3.8 3.9 3.10 3.11 3.12\ntox -p\n</code></pre>"},{"location":"#developing-against-live-django-app","title":"Developing against live Django app","text":"<p>How do you check that your changes to django-components project will work in an actual Django project?</p> <p>Use the sampleproject demo project to validate the changes:</p> <ol> <li>Navigate to sampleproject directory:</li> </ol> <pre><code>cd sampleproject\n</code></pre> <ol> <li>Install dependencies from the requirements.txt file:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Link to your local version of django-components:</li> </ol> <pre><code>pip install -e ..\n</code></pre> <p>NOTE: The path (in this case <code>..</code>) must point to the directory that has the <code>setup.py</code> file.</p> <ol> <li>Start Django server    <pre><code>python manage.py runserver\n</code></pre></li> </ol> <p>Once the server is up, it should be available at http://127.0.0.1:8000.</p> <p>To display individual components, add them to the <code>urls.py</code>, like in the case of http://127.0.0.1:8000/greeting</p>"},{"location":"#development-guides","title":"Development guides","text":"<ul> <li>Slot rendering flot</li> </ul>"},{"location":"CHANGELOG/","title":"Release notes","text":"<p>Version 0.95 - Added support for dynamic components, where the component name is passed as a variable. (See Dynamic components) - Changed <code>Component.input</code> to raise <code>RuntimeError</code> if accessed outside of render context. Previously it returned <code>None</code> if unset.</p> <p>Version 0.94 - django_components now automatically configures Django to support multi-line tags. (See Multi-line tags) - New setting <code>reload_on_template_change</code>. Set this to <code>True</code> to reload the dev server on changes to component template files. (See Reload dev server on component file changes)</p> <p>Version 0.93 - Spread operator <code>...dict</code> inside template tags. (See Spread operator) - Use template tags inside string literals in component inputs. (See Use template tags inside component inputs) - Dynamic slots, fills and provides - The <code>name</code> argument for these can now be a variable, a template expression, or via spread operator - Component library authors can now configure <code>CONTEXT_BEHAVIOR</code> and <code>TAG_FORMATTER</code> settings independently from user settings.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.92 - BREAKING CHANGE: <code>Component</code> class is no longer a subclass of <code>View</code>. To configure the <code>View</code> class, set the <code>Component.View</code> nested class. HTTP methods like <code>get</code> or <code>post</code> can still be defined directly on <code>Component</code> class, and <code>Component.as_view()</code> internally calls <code>Component.View.as_view()</code>. (See Modifying the View class)</p> <ul> <li> <p>The inputs (args, kwargs, slots, context, ...) that you pass to <code>Component.render()</code> can be accessed from within <code>get_context_data</code>, <code>get_template_string</code> and <code>get_template_name</code> via <code>self.input</code>. (See Accessing data passed to the component)</p> </li> <li> <p>Typing: <code>Component</code> class supports generics that specify types for <code>Component.render</code> (See Adding type hints with Generics)</p> </li> </ul> <p>Version 0.90 - All tags (<code>component</code>, <code>slot</code>, <code>fill</code>, ...) now support \"self-closing\" or \"inline\" form, where you can omit the closing tag:     <pre><code>{# Before #}\n{% component \"button\" %}{% endcomponent %}\n{# After #}\n{% component \"button\" / %}\n</code></pre> - All tags now support the \"dictionary key\" or \"aggregate\" syntax (<code>kwarg:key=val</code>):     <pre><code>{% component \"button\" attrs:class=\"hidden\" %}\n</code></pre> - You can change how the components are written in the template with TagFormatter.</p> <pre><code>The default is `django_components.component_formatter`:\n```django\n{% component \"button\" href=\"...\" disabled %}\n    Click me!\n{% endcomponent %}\n```\n\nWhile `django_components.shorthand_component_formatter` allows you to write components like so:\n\n```django\n{% button href=\"...\" disabled %}\n    Click me!\n{% endbutton %}\n</code></pre> <p>\ud83d\udea8\ud83d\udce2 Version 0.85 Autodiscovery module resolution changed. Following undocumented behavior was removed:</p> <ul> <li>Previously, autodiscovery also imported any <code>[app]/components.py</code> files, and used <code>SETTINGS_MODULE</code> to search for component dirs.</li> <li>To migrate from:<ul> <li><code>[app]/components.py</code> - Define each module in <code>COMPONENTS.libraries</code> setting,   or import each module inside the <code>AppConfig.ready()</code> hook in respective <code>apps.py</code> files.</li> <li><code>SETTINGS_MODULE</code> - Define component dirs using <code>STATICFILES_DIRS</code></li> </ul> </li> <li>Previously, autodiscovery handled relative files in <code>STATICFILES_DIRS</code>. To align with Django, <code>STATICFILES_DIRS</code> now must be full paths (Django docs).</li> </ul> <p>\ud83d\udea8\ud83d\udce2 Version 0.81 Aligned the <code>render_to_response</code> method with the (now public) <code>render</code> method of <code>Component</code> class. Moreover, slots passed to these can now be rendered also as functions.</p> <ul> <li>BREAKING CHANGE: The order of arguments to <code>render_to_response</code> has changed.</li> </ul> <p>Version 0.80 introduces dependency injection with the <code>{% provide %}</code> tag and <code>inject()</code> method.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.79</p> <ul> <li>BREAKING CHANGE: Default value for the <code>COMPONENTS.context_behavior</code> setting was changes from <code>\"isolated\"</code> to <code>\"django\"</code>. If you did not set this value explicitly before, this may be a breaking change. See the rationale for change here.</li> </ul> <p>\ud83d\udea8\ud83d\udce2 Version 0.77 CHANGED the syntax for accessing default slot content.</p> <ul> <li>Previously, the syntax was   <code>{% fill \"my_slot\" as \"alias\" %}</code> and <code>{{ alias.default }}</code>.</li> <li>Now, the syntax is   <code>{% fill \"my_slot\" default=\"alias\" %}</code> and <code>{{ alias }}</code>.</li> </ul> <p>Version 0.74 introduces <code>html_attrs</code> tag and <code>prefix:key=val</code> construct for passing dicts to components.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.70</p> <ul> <li><code>{% if_filled \"my_slot\" %}</code> tags were replaced with <code>{{ component_vars.is_filled.my_slot }}</code> variables.</li> <li>Simplified settings - <code>slot_context_behavior</code> and <code>context_behavior</code> were merged. See the documentation for more details.</li> </ul> <p>Version 0.67 CHANGED the default way how context variables are resolved in slots. See the documentation for more details.</p> <p>\ud83d\udea8\ud83d\udce2 Version 0.5 CHANGES THE SYNTAX for components. <code>component_block</code> is now <code>component</code>, and <code>component</code> blocks need an ending <code>endcomponent</code> tag. The new <code>python manage.py upgradecomponent</code> command can be used to upgrade a directory (use --path argument to point to each dir) of templates that use components to the new syntax automatically.</p> <p>This change is done to simplify the API in anticipation of a 1.0 release of django_components. After 1.0 we intend to be stricter with big changes like this in point releases.</p> <p>Version 0.34 adds components as views, which allows you to handle requests and render responses from within a component. See the documentation for more details.</p> <p>Version 0.28 introduces 'implicit' slot filling and the <code>default</code> option for <code>slot</code> tags.</p> <p>Version 0.27 adds a second installable app: django_components.safer_staticfiles. It provides the same behavior as django.contrib.staticfiles but with extra security guarantees (more info below in Security Notes).</p> <p>Version 0.26 changes the syntax for <code>{% slot %}</code> tags. From now on, we separate defining a slot (<code>{% slot %}</code>) from filling a slot with content (<code>{% fill %}</code>). This means you will likely need to change a lot of slot tags to fill. We understand this is annoying, but it's the only way we can get support for nested slots that fill in other slots, which is a very nice featuPpre to have access to. Hoping that this will feel worth it!</p> <p>Version 0.22 starts autoimporting all files inside components subdirectores, to simplify setup. An existing project might start to get AlreadyRegistered-errors because of this. To solve this, either remove your custom loading of components, or set \"autodiscover\": False in settings.COMPONENTS.</p> <p>Version 0.17 renames <code>Component.context</code> and <code>Component.template</code> to <code>get_context_data</code> and <code>get_template_name</code>. The old methods still work, but emit a deprecation warning. This change was done to sync naming with Django's class based views, and make using django-components more familiar to Django users. <code>Component.context</code> and <code>Component.template</code> will be removed when version 1.0 is released.</p> <p>Static files</p> <p>Components can be organized however you prefer. That said, our prefered way is to keep the files of a component close together by bundling them in the same directory. This means that files containing backend logic, such as Python modules and HTML templates, live in the same directory as static files, e.g. JS and CSS.</p> <p>If your are using django.contrib.staticfiles to collect static files, no distinction is made between the different kinds of files. As a result, your Python code and templates may inadvertently become available on your static file server. You probably don't want this, as parts of your backend logic will be exposed, posing a potential security vulnerability.</p> <p>As of v0.27, django-components ships with an additional installable app django_components.safer_staticfiles. It is a drop-in replacement for django.contrib.staticfiles. Its behavior is 100% identical except it ignores .py and .html files, meaning these will not end up on your static files server. To use it, add it to INSTALLED_APPS and remove django.contrib.staticfiles.</p> <pre><code>INSTALLED_APPS = [\n    # 'django.contrib.staticfiles',   # &lt;-- REMOVE\n    'django_components',\n    'django_components.safer_staticfiles'  # &lt;-- ADD\n]\n</code></pre> <p>If you are on an older version of django-components, your alternatives are a) passing <code>--ignore &lt;pattern&gt;</code> options to the collecstatic CLI command, or b) defining a subclass of StaticFilesConfig. Both routes are described in the official docs of the staticfiles app.</p> <p>Note that <code>safer_staticfiles</code> excludes the <code>.py</code> and <code>.html</code> files for collectstatic command:</p> <pre><code>python manage.py collectstatic\n</code></pre> <p>but it is ignored on the development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>For a step-by-step guide on deploying production server with static files, see the demo project.</p> <p>Optional</p> <p>To avoid loading the app in each template using <code>{% load component_tags %}</code>, you can add the tag as a 'builtin' in settings.py</p> <pre><code>TEMPLATES = [\n    {\n        ...,\n        'OPTIONS': {\n            'context_processors': [\n                ...\n            ],\n            'builtins': [\n                'django_components.templatetags.component_tags',\n            ]\n        },\n    },\n]\n</code></pre> <p>Read on to find out how to build your first component!</p> <p>Create your first component</p> <p>A component in django-components is the combination of four things: CSS, Javascript, a Django template, and some Python code to put them all together.</p> <pre><code>    sampleproject/\n    \u251c\u2500\u2500 calendarapp/\n    \u251c\u2500\u2500 components/             \ud83c\udd95\n    \u2502   \u2514\u2500\u2500 calendar/           \ud83c\udd95\n    \u2502       \u251c\u2500\u2500 calendar.py     \ud83c\udd95\n    \u2502       \u251c\u2500\u2500 script.js       \ud83c\udd95\n    \u2502       \u251c\u2500\u2500 style.css       \ud83c\udd95\n    \u2502       \u2514\u2500\u2500 template.html   \ud83c\udd95\n    \u251c\u2500\u2500 sampleproject/\n    \u251c\u2500\u2500 manage.py\n    \u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Start by creating empty files in the structure above.</p> <p>First, you need a CSS file. Be sure to prefix all rules with a unique class so they don't clash with other rules.</p> [project root]/components/calendar/style.css<pre><code>/* In a file called [project root]/components/calendar/style.css */\n.calendar-component {\n  width: 200px;\n  background: pink;\n}\n.calendar-component span {\n  font-weight: bold;\n}\n</code></pre> <p>Then you need a javascript file that specifies how you interact with this component. You are free to use any javascript framework you want. A good way to make sure this component doesn't clash with other components is to define all code inside an anonymous function that calls itself. This makes all variables defined only be defined inside this component and not affect other components.</p> [project root]/components/calendar/script.js<pre><code>/* In a file called [project root]/components/calendar/script.js */\n(function () {\n  if (document.querySelector(\".calendar-component\")) {\n    document.querySelector(\".calendar-component\").onclick = function () {\n      alert(\"Clicked calendar!\");\n    };\n  }\n})();\n</code></pre> <p>Now you need a Django template for your component. Feel free to define more variables like <code>date</code> in this example. When creating an instance of this component we will send in the values for these variables. The template will be rendered with whatever template backend you've specified in your Django settings file.</p> [project root]/components/calendar/calendar.html<pre><code>{# In a file called [project root]/components/calendar/template.html #}\n&lt;div class=\"calendar-component\"&gt;Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;&lt;/div&gt;\n</code></pre> <p>Finally, we use django-components to tie this together. Start by creating a file called <code>calendar.py</code> in your component calendar directory. It will be auto-detected and loaded by the app.</p> <p>Inside this file we create a Component by inheriting from the Component class and specifying the context method. We also register the global component registry so that we easily can render it anywhere in our templates.</p> [project root]/components/calendar/calendar.py<pre><code>## In a file called [project root]/components/calendar/calendar.py\nfrom django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    # Templates inside `[your apps]/components` dir and `[project root]/components` dir\n    # will be automatically found. To customize which template to use based on context\n    # you can override method `get_template_name` instead of specifying `template_name`.\n    #\n    # `template_name` can be relative to dir where `calendar.py` is, or relative to STATICFILES_DIRS\n    template_name = \"template.html\"\n\n    # This component takes one parameter, a date string to show in the template\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    # Both `css` and `js` can be relative to dir where `calendar.py` is, or relative to STATICFILES_DIRS\n    class Media:\n        css = \"style.css\"\n        js = \"script.js\"\n</code></pre> <p>And voil\u00e1!! We've created our first component.</p> <p>Syntax highlight and code assistance</p>"},{"location":"CHANGELOG/#pycharm-or-other-jetbrains-ides","title":"Pycharm (or other Jetbrains IDEs)","text":"<p>If you're a Pycharm user (or any other editor from Jetbrains), you can have coding assistance as well:</p> <pre><code>from django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    # language=HTML\n    template= \"\"\"\n        &lt;div class=\"calendar-component\"&gt;Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;&lt;/div&gt;\n    \"\"\"\n\n    # language=CSS\n    css = \"\"\"\n        .calendar-component { width: 200px; background: pink; }\n        .calendar-component span { font-weight: bold; }\n    \"\"\"\n\n    # language=JS\n    js = \"\"\"\n        (function(){\n            if (document.querySelector(\".calendar-component\")) {\n                document.querySelector(\".calendar-component\").onclick = function(){ alert(\"Clicked calendar!\"); };\n            }\n        })()\n    \"\"\"\n</code></pre> <p>You don't need to use <code>types.django_html</code>, <code>types.css</code>, <code>types.js</code> since Pycharm uses language injections. You only need to write the comments <code># language=&lt;lang&gt;</code> above the variables.</p> <p>Use components outside of templates</p> <p>New in version 0.81</p> <p>Components can be rendered outside of Django templates, calling them as regular functions (\"React-style\").</p> <p>The component class defines <code>render</code> and <code>render_to_response</code> class methods. These methods accept positional args, kwargs, and slots, offering the same flexibility as the <code>{% component %}</code> tag:</p> <pre><code>class SimpleComponent(Component):\n    template = \"\"\"\n        {% load component_tags %}\n        hello: {{ hello }}\n        foo: {{ foo }}\n        kwargs: {{ kwargs|safe }}\n        slot_first: {% slot \"first\" required / %}\n    \"\"\"\n\n    def get_context_data(self, arg1, arg2, **kwargs):\n        return {\n            \"hello\": arg1,\n            \"foo\": arg2,\n            \"kwargs\": kwargs,\n        }\n\nrendered = SimpleComponent.render(\n    args=[\"world\", \"bar\"],\n    kwargs={\"kw1\": \"test\", \"kw2\": \"ooo\"},\n    slots={\"first\": \"FIRST_SLOT\"},\n    context={\"from_context\": 98},\n)\n</code></pre> <p>Renders:</p> <pre><code>hello: world\nfoo: bar\nkwargs: {'kw1': 'test', 'kw2': 'ooo'}\nslot_first: FIRST_SLOT\n</code></pre>"},{"location":"CHANGELOG/#slotfunc","title":"<code>SlotFunc</code>","text":"<p>When rendering components with slots in <code>render</code> or <code>render_to_response</code>, you can pass either a string or a function.</p> <p>The function has following signature:</p> <pre><code>def render_func(\n   context: Context,\n   data: Dict[str, Any],\n   slot_ref: SlotRef,\n) -&gt; str | SafeString:\n    return nodelist.render(ctx)\n</code></pre> <ul> <li><code>context</code> - Django's Context available to the Slot Node.</li> <li><code>data</code> - Data passed to the <code>{% slot %}</code> tag. See Scoped Slots.</li> <li><code>slot_ref</code> - The default slot content. See Accessing original content of slots.</li> <li>NOTE: The slot is lazily evaluated. To render the slot, convert it to string with <code>str(slot_ref)</code>.</li> </ul> <p>Example:</p> <pre><code>def footer_slot(ctx, data, slot_ref):\n   return f\"\"\"\n      SLOT_DATA: {data['abc']}\n      ORIGINAL: {slot_ref}\n   \"\"\"\n\nMyComponent.render_to_response(\n    slots={\n        \"footer\": footer_slot,\n   },\n)\n</code></pre>"},{"location":"CHANGELOG/#use-components-as-views","title":"Use components as views","text":"<p>New in version 0.34</p> <p>Note: Since 0.92, Component no longer subclasses View. To configure the View class, set the nested <code>Component.View</code> class</p> <p>Components can now be used as views: - Components define the <code>Component.as_view()</code> class method that can be used the same as <code>View.as_view()</code>.</p> <ul> <li> <p>By default, you can define GET, POST or other HTTP handlers directly on the Component, same as you do with View. For example, you can override <code>get</code> and <code>post</code> to handle GET and POST requests, respectively.</p> </li> <li> <p>In addition, <code>Component</code> now has a <code>render_to_response</code> method that renders the component template based on the provided context and slots' data and returns an <code>HttpResponse</code> object.</p> </li> </ul>"},{"location":"CHANGELOG/#modifying-the-view-class","title":"Modifying the View class","text":"<p>The View class that handles the requests is defined on <code>Component.View</code>.</p> <p>When you define a GET or POST handlers on the <code>Component</code> class, like so:</p> <pre><code>class MyComponent(Component):\n    def get(self, request, *args, **kwargs):\n        return self.render_to_response(\n            context={\n                \"date\": request.GET.get(\"date\", \"2020-06-06\"),\n            },\n        )\n\n    def post(self, request, *args, **kwargs) -&gt; HttpResponse:\n        variable = request.POST.get(\"variable\")\n        return self.render_to_response(\n            kwargs={\"variable\": variable}\n        )\n</code></pre> <p>Then the request is still handled by <code>Component.View.get()</code> or <code>Component.View.post()</code> methods. However, by default, <code>Component.View.get()</code> points to <code>Component.get()</code>, and so on.</p> <pre><code>class ComponentView(View):\n    component: Component = None\n    ...\n\n    def get(self, request, *args, **kwargs):\n        return self.component.get(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.component.post(request, *args, **kwargs)\n\n    ...\n</code></pre> <p>If you want to define your own <code>View</code> class, you need to: 1. Set the class as <code>Component.View</code> 2. Subclass from <code>ComponentView</code>, so the View instance has access to the component instance.</p> <p>In the example below, we added extra logic into <code>View.setup()</code>.</p> <p>Note that the POST handler is still defined at the top. This is because <code>View</code> subclasses <code>ComponentView</code>, which defines the <code>post()</code> method that calls <code>Component.post()</code>.</p> <p>If you were to overwrite the <code>View.post()</code> method, then <code>Component.post()</code> would be ignored.</p> <pre><code>from django_components import Component, ComponentView\n\nclass MyComponent(Component):\n\n    def post(self, request, *args, **kwargs) -&gt; HttpResponse:\n        variable = request.POST.get(\"variable\")\n        return self.component.render_to_response(\n            kwargs={\"variable\": variable}\n        )\n\n    class View(ComponentView):\n        def setup(self, request, *args, **kwargs):\n            super(request, *args, **kwargs)\n\n            do_something_extra(request, *args, **kwargs)\n</code></pre> <p>Adding type hints with Generics</p> <p>New in version 0.92</p> <p>The <code>Component</code> class optionally accepts type parameters that allow you to specify the types of args, kwargs, slots, and data:</p> <pre><code>class Button(Component[Args, Kwargs, Data, Slots]):\n    ...\n</code></pre> <ul> <li><code>Args</code> - Must be a <code>Tuple</code> or <code>Any</code></li> <li><code>Kwargs</code> - Must be a <code>TypedDict</code> or <code>Any</code></li> <li><code>Data</code> - Must be a <code>TypedDict</code> or <code>Any</code></li> <li><code>Slots</code> - Must be a <code>TypedDict</code> or <code>Any</code></li> </ul> <p>Here's a full example:</p> <pre><code>from typing import NotRequired, Tuple, TypedDict, SlotContent, SlotFunc\n\n## Positional inputs\nArgs = Tuple[int, str]\n\n## Kwargs inputs\nclass Kwargs(TypedDict):\n    variable: str\n    another: int\n    maybe_var: NotRequired[int] # May be ommited\n\n## Data returned from `get_context_data`\nclass Data(TypedDict):\n    variable: str\n\n## The data available to the `my_slot` scoped slot\nclass MySlotData(TypedDict):\n    value: int\n\n## Slots\nclass Slots(TypedDict):\n    # Use SlotFunc for slot functions.\n    # The generic specifies the `data` dictionary\n    my_slot: NotRequired[SlotFunc[MySlotData]]\n    # SlotContent == Union[str, SafeString]\n    another_slot: SlotContent\n\nclass Button(Component[Args, Kwargs, Data, Slots]):\n    def get_context_data(self, variable, another):\n        return {\n            \"variable\": variable,\n        }\n</code></pre> <p>When you then call <code>Component.render</code> or <code>Component.render_to_response</code>, you will get type hints:</p> <pre><code>Button.render(\n    # Error: First arg must be `int`, got `float`\n    args=(1.25, \"abc\"),\n    # Error: Key \"another\" is missing\n    kwargs={\n        \"variable\": \"text\",\n    },\n)\n</code></pre>"},{"location":"CHANGELOG/#passing-additional-args-or-kwargs","title":"Passing additional args or kwargs","text":"<p>You may have a function that supports any number of args or kwargs:</p> <pre><code>def get_context_data(self, *args, **kwargs):\n    ...\n</code></pre> <p>This is not supported with the typed components.</p> <p>As a workaround: - For <code>*args</code>, set a positional argument that accepts a list of values:</p> <pre><code>```py\n# Tuple of one member of list of strings\nArgs = Tuple[List[str]]\n```\n</code></pre> <ul> <li> <p>For <code>*kwargs</code>, set a keyword argument that accepts a dictionary of values:</p> <pre><code>class Kwargs(TypedDict):\n    variable: str\n    another: int\n    # Pass any extra keys under `extra`\n    extra: Dict[str, any]\n</code></pre> </li> </ul>"},{"location":"CHANGELOG/#runtime-input-validation-with-types","title":"Runtime input validation with types","text":"<p>New in version 0.96</p> <p>NOTE: Kwargs, slots, and data validation is supported only for Python &gt;=3.11</p> <p>In Python 3.11 and later, when you specify the component types, you will get also runtime validation of the inputs you pass to <code>Component.render</code> or <code>Component.render_to_response</code>.</p> <p>So, using the example from before, if you ignored the type errors and still ran the following code:</p> <pre><code>Button.render(\n    # Error: First arg must be `int`, got `float`\n    args=(1.25, \"abc\"),\n    # Error: Key \"another\" is missing\n    kwargs={\n        \"variable\": \"text\",\n    },\n)\n</code></pre> <p>This would raise a <code>TypeError</code>:</p> <pre><code>Component 'Button' expected positional argument at index 0 to be &lt;class 'int'&gt;, got 1.25 of type &lt;class 'float'&gt;\n</code></pre> <p>In case you need to skip these errors, you can either set the faulty member to <code>Any</code>, e.g.:</p> <pre><code>## Changed `int` to `Any`\nArgs = Tuple[Any, str]\n</code></pre> <p>Or you can replace <code>Args</code> with <code>Any</code> altogether, to skip the validation of args:</p> <pre><code>## Replaced `Args` with `Any`\nclass Button(Component[Any, Kwargs, Data, Slots]):\n    ...\n</code></pre> <p>Same applies to kwargs, data, and slots.</p> <p>Dynamic components</p> <p>If you are writing something like a form component, you may design it such that users give you the component names, and your component renders it.</p> <p>While you can handle this with a series of if / else statements, this is not an extensible solution.</p> <p>Instead, you can use dynamic components. Dynamic components are used in place of normal components.</p> <pre><code>{% load component_tags %}\n{% component \"dynamic\" is=component_name title=\"Cat Museum\" %}\n    {% fill \"content\" %}\n        HELLO_FROM_SLOT_1\n    {% endfill %}\n    {% fill \"sidebar\" %}\n        HELLO_FROM_SLOT_2\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>These behave same way as regular components. You pass it the same args, kwargs, and slots as you would to the component that you want to render.</p> <p>The only exception is that also you supply 1-2 additional inputs: - <code>is</code> - Required - The component name or a component class to render - <code>registry</code> - Optional - The <code>ComponentRegistry</code> that will be searched if <code>is</code> is a component name. If omitted, ALL registries are searched.</p> <p>By default, the dynamic component is registered under the name <code>\"dynamic\"</code>. In case of a conflict, you can change the name used for the dynamic components by defining the <code>COMPONENTS.dynamic_component_name</code> setting.</p> <p>If you need to use the dynamic components in Python, you can also import it from <code>django_components</code>: <pre><code>from django_components import DynamicComponent\n\ncomp = SimpleTableComp if is_readonly else TableComp\n\noutput = DynamicComponent.render(\n    kwargs={\n        \"is\": comp,\n        # Other kwargs...\n    },\n    # args: [...],\n    # slots: {...},\n)\n</code></pre></p> <p>What is ComponentRegistry</p> <p>The <code>@register</code> decorator is a shortcut for working with the <code>ComponentRegistry</code>.</p> <p><code>ComponentRegistry</code> manages which components can be used in the template tags.</p> <p>Each <code>ComponentRegistry</code> instance is associated with an instance of Django's <code>Library</code>. And Libraries are inserted into Django template using the <code>{% load %}</code> tags.</p> <p>The <code>@register</code> decorator accepts an optional kwarg <code>registry</code>, which specifies, the <code>ComponentRegistry</code> to register components into. If omitted, the default <code>ComponentRegistry</code> instance defined in django_components is used.</p> <pre><code>my_registry = ComponentRegistry()\n\n@register(registry=my_registry)\nclass MyComponent(Component):\n    ...\n</code></pre> <p>The default <code>ComponentRegistry</code> is associated with the <code>Library</code> that you load when you call <code>{% load component_tags %}</code> inside your template, or when you add <code>django_components.templatetags.component_tags</code> to the template builtins.</p> <p>So when you register or unregister a component to/from a component registry, then behind the scenes the registry automatically adds/removes the component's template tags to/from the Library, so you can call the component from within the templates such as <code>{% component \"my_comp\" %}</code>.</p>"},{"location":"CHANGELOG/#registering-components-to-custom-componentregistry","title":"Registering components to custom ComponentRegistry","text":"<p>If you are writing a component library to be shared with others, you may want to manage your own instance of <code>ComponentRegistry</code> and register components onto a different <code>Library</code> instance than the default one.</p> <p>The <code>Library</code> instance can be set at instantiation of <code>ComponentRegistry</code>. If omitted, then the default Library instance from django_components is used.</p> <pre><code>from django.template import Library\nfrom django_components import ComponentRegistry\n\nmy_library = Library(...)\nmy_registry = ComponentRegistry(library=my_library)\n</code></pre> <p>When you have defined your own <code>ComponentRegistry</code>, you can either register the components with <code>my_registry.register()</code>, or pass the registry to the <code>@component.register()</code> decorator via the <code>registry</code> kwarg:</p> <pre><code>from path.to.my.registry import my_registry\n\n@register(\"my_component\", registry=my_registry)\nclass MyComponent(Component):\n    ...\n</code></pre> <p>NOTE: The Library instance can be accessed under <code>library</code> attribute of <code>ComponentRegistry</code>.</p>"},{"location":"CHANGELOG/#autodiscovery","title":"Autodiscovery","text":"<p>Every component that you want to use in the template with the <code>{% component %}</code> tag needs to be registered with the ComponentRegistry. Normally, we use the <code>@register</code> decorator for that:</p> <pre><code>from django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    ...\n</code></pre> <p>But for the component to be registered, the code needs to be executed - the file needs to be imported as a module.</p> <p>One way to do that is by importing all your components in <code>apps.py</code>:</p> <pre><code>from django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    name = \"my_app\"\n\n    def ready(self) -&gt; None:\n        from components.card.card import Card\n        from components.list.list import List\n        from components.menu.menu import Menu\n        from components.button.button import Button\n        ...\n</code></pre> <p>However, there's a simpler way!</p> <p>By default, the Python files in the <code>STATICFILES_DIRS</code> directories are auto-imported in order to auto-register the components.</p> <p>Autodiscovery occurs when Django is loaded, during the <code>ready</code> hook of the <code>apps.py</code> file.</p> <p>If you are using autodiscovery, keep a few points in mind:</p> <ul> <li>Avoid defining any logic on the module-level inside the <code>components</code> dir, that you would not want to run anyway.</li> <li>Components inside the auto-imported files still need to be registered with <code>@register()</code></li> <li>Auto-imported component files must be valid Python modules, they must use suffix <code>.py</code>, and module name should follow PEP-8.</li> </ul> <p>Autodiscovery can be disabled in the settings.</p>"},{"location":"CHANGELOG/#using-slots-in-templates","title":"Using slots in templates","text":"<p>New in version 0.26:</p> <ul> <li>The <code>slot</code> tag now serves only to declare new slots inside the component template.</li> <li>To override the content of a declared slot, use the newly introduced <code>fill</code> tag instead.</li> <li>Whereas unfilled slots used to raise a warning, filling a slot is now optional by default.</li> <li>To indicate that a slot must be filled, the new <code>required</code> option should be added at the end of the <code>slot</code> tag.</li> </ul> <p>Components support something called 'slots'. When a component is used inside another template, slots allow the parent template to override specific parts of the child component by passing in different content. This mechanism makes components more reusable and composable. This behavior is similar to slots in Vue.</p> <p>In the example below we introduce two block tags that work hand in hand to make this work. These are...</p> <ul> <li><code>{% slot &lt;name&gt; %}</code>/<code>{% endslot %}</code>: Declares a new slot in the component template.</li> <li><code>{% fill &lt;name&gt; %}</code>/<code>{% endfill %}</code>: (Used inside a <code>component</code> tag pair.) Fills a declared slot with the specified content.</li> </ul> <p>Let's update our calendar component to support more customization. We'll add <code>slot</code> tag pairs to its template, template.html.</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        {% slot \"header\" %}Calendar header{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        {% slot \"body\" %}Today's date is &lt;span&gt;{{ date }}&lt;/span&gt;{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>When using the component, you specify which slots you want to fill and where you want to use the defaults from the template. It looks like this:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"body\" %}Can you believe it's already &lt;span&gt;{{ date }}&lt;/span&gt;??{% endfill %}\n{% endcomponent %}\n</code></pre> <p>Since the 'header' fill is unspecified, it's taken from the base template. If you put this in a template, and pass in <code>date=2020-06-06</code>, this is what gets rendered:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        Calendar header\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        Can you believe it's already &lt;span&gt;2020-06-06&lt;/span&gt;??\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"CHANGELOG/#render-fill-in-multiple-places","title":"Render fill in multiple places","text":"<p>Added in version 0.70</p> <p>You can render the same content in multiple places by defining multiple slots with identical names:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        {% slot \"image\" %}Image here{% endslot %}\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        {% slot \"image\" %}Image here{% endslot %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>So if used like:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"image\" %}\n        &lt;img src=\"...\" /&gt;\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>This renders:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        &lt;img src=\"...\" /&gt;\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        &lt;img src=\"...\" /&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"CHANGELOG/#accessing-original-content-of-slots","title":"Accessing original content of slots","text":"<p>Added in version 0.26</p> <p>NOTE: In version 0.77, the syntax was changed from</p> <pre><code>{% fill \"my_slot\" as \"alias\" %} {{ alias.default }}\n</code></pre> <p>to</p> <pre><code>{% fill \"my_slot\" default=\"slot_default\" %} {{ slot_default }}\n</code></pre> <p>Sometimes you may want to keep the original slot, but only wrap or prepend/append content to it. To do so, you can access the default slot via the <code>default</code> kwarg.</p> <p>Similarly to the <code>data</code> attribute, you specify the variable name through which the default slot will be made available.</p> <p>For instance, let's say you're filling a slot called 'body'. To render the original slot, assign it to a variable using the <code>'default'</code> keyword. You then render this variable to insert the default content:</p> <pre><code>{% component \"calendar\" date=\"2020-06-06\" %}\n    {% fill \"body\" default=\"body_default\" %}\n        {{ body_default }}. Have a great day!\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>This produces:</p> <pre><code>&lt;div class=\"calendar-component\"&gt;\n    &lt;div class=\"header\"&gt;\n        Calendar header\n    &lt;/div&gt;\n    &lt;div class=\"body\"&gt;\n        Today's date is &lt;span&gt;2020-06-06&lt;/span&gt;. Have a great day!\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"CHANGELOG/#accessing-is_filled-of-slot-names-with-special-characters","title":"Accessing <code>is_filled</code> of slot names with special characters","text":"<p>To be able to access a slot name via <code>component_vars.is_filled</code>, the slot name needs to be composed of only alphanumeric characters and underscores (e.g. <code>this__isvalid_123</code>).</p> <p>However, you can still define slots with other special characters. In such case, the slot name in <code>component_vars.is_filled</code> is modified to replace all invalid characters into <code>_</code>.</p> <p>So a slot named <code>\"my super-slot :)\"</code> will be available as <code>component_vars.is_filled.my_super_slot___</code>.</p>"},{"location":"CHANGELOG/#passing-data-to-slots","title":"Passing data to slots","text":"<p>To pass the data to the <code>slot</code> tag, simply pass them as keyword attributes (<code>key=value</code>):</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        &lt;div&gt;\n            {% slot \"content\" default input=input %}\n                input: {{ input }}\n            {% endslot %}\n        &lt;/div&gt;\n    \"\"\"\n\n    def get_context_data(self, input):\n        processed_input = do_something(input)\n        return {\n            \"input\": processed_input,\n        }\n</code></pre>"},{"location":"CHANGELOG/#dynamic-slots-and-fills","title":"Dynamic slots and fills","text":"<p>Until now, we were declaring slot and fill names statically, as a string literal, e.g.</p> <pre><code>{% slot \"content\" / %}\n</code></pre> <p>However, sometimes you may want to generate slots based on the given input. One example of this is a table component like that of Vuetify, which creates a header and an item slots for each user-defined column.</p> <p>In django_components you can achieve the same, simply by using a variable (or a template expression) instead of a string literal:</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    {% for header in headers %}\n      &lt;th&gt;\n        {% slot \"header-{{ header.key }}\" value=header.title %}\n          {{ header.title }}\n        {% endslot %}\n      &lt;/th&gt;\n    {% endfor %}\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>When using the component, you can either set the fill explicitly:</p> <pre><code>{% component \"table\" headers=headers items=items %}\n  {% fill \"header-name\" data=\"data\" %}\n    &lt;b&gt;{{ data.value }}&lt;/b&gt;\n  {% endfill %}\n{% endcomponent %}\n</code></pre> <p>Or also use a variable:</p> <pre><code>{% component \"table\" headers=headers items=items %}\n  {# Make only the active column bold #}\n  {% fill \"header-{{ active_header_name }}\" data=\"data\" %}\n    &lt;b&gt;{{ data.value }}&lt;/b&gt;\n  {% endfill %}\n{% endcomponent %}\n</code></pre> <p>NOTE: It's better to use static slot names whenever possible for clarity. The dynamic slot names should be reserved for advanced use only.</p> <p>Lastly, in rare cases, you can also pass the slot name via the spread operator. This is possible, because the slot name argument is actually a shortcut for a <code>name</code> keyword argument.</p> <p>So this:</p> <pre><code>{% slot \"content\" / %}\n</code></pre> <p>is the same as:</p> <pre><code>{% slot name=\"content\" / %}\n</code></pre> <p>So it's possible to define a <code>name</code> key on a dictionary, and then spread that onto the slot tag:</p> <pre><code>{# slot_props = {\"name\": \"content\"} #}\n{% slot ...slot_props / %}\n</code></pre> <p>Rendering HTML attributes</p> <p>New in version 0.74:</p> <p>You can use the <code>html_attrs</code> tag to render HTML attributes, given a dictionary of values.</p> <p>So if you have a template:</p> <pre><code>&lt;div class=\"{{ classes }}\" data-id=\"{{ my_id }}\"&gt;\n&lt;/div&gt;\n</code></pre> <p>You can simplify it with <code>html_attrs</code> tag:</p> <pre><code>&lt;div {% html_attrs attrs %}&gt;\n&lt;/div&gt;\n</code></pre> <p>where <code>attrs</code> is:</p> <pre><code>attrs = {\n    \"class\": classes,\n    \"data-id\": my_id,\n}\n</code></pre> <p>This feature is inspired by <code>merge_attrs</code> tag of django-web-components and \"fallthrough attributes\" feature of Vue.</p>"},{"location":"CHANGELOG/#boolean-attributes","title":"Boolean attributes","text":"<p>In HTML, boolean attributes are usually rendered with no value. Consider the example below where the first button is disabled and the second is not:</p> <pre><code>&lt;button disabled&gt;Click me!&lt;/button&gt; &lt;button&gt;Click me!&lt;/button&gt;\n</code></pre> <p>HTML rendering with <code>html_attrs</code> tag or <code>attributes_to_string</code> works the same way, where <code>key=True</code> is rendered simply as <code>key</code>, and <code>key=False</code> is not render at all.</p> <p>So given this input:</p> <pre><code>attrs = {\n    \"disabled\": True,\n    \"autofocus\": False,\n}\n</code></pre> <p>And template:</p> <pre><code>&lt;div {% html_attrs attrs %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Then this renders:</p> <pre><code>&lt;div disabled&gt;&lt;/div&gt;\n</code></pre>"},{"location":"CHANGELOG/#appending-attributes","title":"Appending attributes","text":"<p>For the <code>class</code> HTML attribute, it's common that we want to join multiple values, instead of overriding them. For example, if you're authoring a component, you may want to ensure that the component will ALWAYS have a specific class. Yet, you may want to allow users of your component to supply their own classes.</p> <p>We can achieve this by adding extra kwargs. These values will be appended, instead of overwriting the previous value.</p> <p>So if we have a variable <code>attrs</code>:</p> <pre><code>attrs = {\n    \"class\": \"my-class pa-4\",\n}\n</code></pre> <p>And on <code>html_attrs</code> tag, we set the key <code>class</code>:</p> <pre><code>&lt;div {% html_attrs attrs class=\"some-class\" %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Then these will be merged and rendered as:</p> <pre><code>&lt;div data-value=\"my-class pa-4 some-class\"&gt;&lt;/div&gt;\n</code></pre> <p>To simplify merging of variables, you can supply the same key multiple times, and these will be all joined together:</p> <pre><code>{# my_var = \"class-from-var text-red\" #}\n&lt;div {% html_attrs attrs class=\"some-class another-class\" class=my_var %}&gt;\n&lt;/div&gt;\n</code></pre> <p>Renders:</p> <pre><code>&lt;div\n  data-value=\"my-class pa-4 some-class another-class class-from-var text-red\"\n&gt;&lt;/div&gt;\n</code></pre>"},{"location":"CHANGELOG/#examples-for-html_attrs","title":"Examples for <code>html_attrs</code>","text":"<p>Assuming that:</p> <pre><code>class_from_var = \"from-var\"\n\nattrs = {\n    \"class\": \"from-attrs\",\n    \"type\": \"submit\",\n}\n\ndefaults = {\n    \"class\": \"from-defaults\",\n    \"role\": \"button\",\n}\n</code></pre> <p>Then:</p> <ul> <li>Empty tag  <code>{% html_attr %}</code></li> </ul> <p>renders (empty string):  <code></code></p> <ul> <li>Only kwargs  <code>{% html_attr class=\"some-class\" class=class_from_var data-id=\"123\" %}</code></li> </ul> <p>renders:  <code>class=\"some-class from-var\" data-id=\"123\"</code></p> <ul> <li>Only attrs  <code>{% html_attr attrs %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs\" type=\"submit\"</code></p> <ul> <li>Attrs as kwarg  <code>{% html_attr attrs=attrs %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs\" type=\"submit\"</code></p> <ul> <li>Only defaults (as kwarg)  <code>{% html_attr defaults=defaults %}</code></li> </ul> <p>renders:  <code>class=\"from-defaults\" role=\"button\"</code></p> <ul> <li>Attrs using the <code>prefix:key=value</code> construct  <code>{% html_attr attrs:class=\"from-attrs\" attrs:type=\"submit\" %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs\" type=\"submit\"</code></p> <ul> <li>Defaults using the <code>prefix:key=value</code> construct  <code>{% html_attr defaults:class=\"from-defaults\" %}</code></li> </ul> <p>renders:  <code>class=\"from-defaults\" role=\"button\"</code></p> <ul> <li>All together (1) - attrs and defaults as positional args:  <code>{% html_attrs attrs defaults class=\"added_class\" class=class_from_var data-id=123 %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs added_class from-var\" type=\"submit\" role=\"button\" data-id=123</code></p> <ul> <li>All together (2) - attrs and defaults as kwargs args:  <code>{% html_attrs class=\"added_class\" class=class_from_var data-id=123 attrs=attrs defaults=defaults %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs added_class from-var\" type=\"submit\" role=\"button\" data-id=123</code></p> <ul> <li>All together (3) - mixed:  <code>{% html_attrs attrs defaults:class=\"default-class\" class=\"added_class\" class=class_from_var data-id=123 %}</code></li> </ul> <p>renders:  <code>class=\"from-attrs added_class from-var\" type=\"submit\" data-id=123</code></p>"},{"location":"CHANGELOG/#rendering-html-attributes-outside-of-templates","title":"Rendering HTML attributes outside of templates","text":"<p>If you need to use serialize HTML attributes outside of Django template and the <code>html_attrs</code> tag, you can use <code>attributes_to_string</code>:</p> <pre><code>from django_components.attributes import attributes_to_string\n\nattrs = {\n    \"class\": \"my-class text-red pa-4\",\n    \"data-id\": 123,\n    \"required\": True,\n    \"disabled\": False,\n    \"ignored-attr\": None,\n}\n\nattributes_to_string(attrs)\n## 'class=\"my-class text-red pa-4\" data-id=\"123\" required'\n</code></pre> <p>Self-closing tags</p> <p>When you have a tag like <code>{% component %}</code> or <code>{% slot %}</code>, but it has no content, you can simply append a forward slash <code>/</code> at the end, instead of writing out the closing tags like <code>{% endcomponent %}</code> or <code>{% endslot %}</code>:</p> <p>So this:</p> <pre><code>{% component \"button\" %}{% endcomponent %}\n</code></pre> <p>becomes</p> <pre><code>{% component \"button\" / %}\n</code></pre>"},{"location":"CHANGELOG/#spread-operator","title":"Spread operator","text":"<p>New in version 0.93:</p> <p>Instead of passing keyword arguments one-by-one:</p> <pre><code>{% component \"calendar\" title=\"How to abc\" date=\"2015-06-19\" author=\"John Wick\" / %}\n</code></pre> <p>You can use a spread operator <code>...dict</code> to apply key-value pairs from a dictionary:</p> <pre><code>post_data = {\n    \"title\": \"How to...\",\n    \"date\": \"2015-06-19\",\n    \"author\": \"John Wick\",\n}\n</code></pre> <pre><code>{% component \"calendar\" ...post_data / %}\n</code></pre> <p>This behaves similar to JSX's spread operator or Vue's <code>v-bind</code>.</p> <p>Spread operators are treated as keyword arguments, which means that: 1. Spread operators must come after positional arguments. 2. You cannot use spread operators for positional-only arguments.</p> <p>Other than that, you can use spread operators multiple times, and even put keyword arguments in-between or after them:</p> <pre><code>{% component \"calendar\" ...post_data id=post.id ...extra / %}\n</code></pre> <p>In a case of conflicts, the values added later (right-most) overwrite previous values.</p>"},{"location":"CHANGELOG/#passing-data-as-string-vs-original-values","title":"Passing data as string vs original values","text":"<p>Sometimes you may want to use the template tags to transform or generate the data that is then passed to the component.</p> <p>The data doesn't necessarily have to be strings. In the example above, the kwarg <code>id</code> was passed as an integer, NOT a string.</p> <p>Although the string literals for components inputs are treated as regular Django templates, there is one special case:</p> <p>When the string literal contains only a single template tag, with no extra text, then the value is passed as the original type instead of a string.</p> <p>Here, <code>page</code> is an integer:</p> <pre><code>{% component 'blog_post' page=\"{% random_int 10 20 %}\" / %}\n</code></pre> <p>Here, <code>page</code> is a string:</p> <pre><code>{% component 'blog_post' page=\" {% random_int 10 20 %} \" / %}\n</code></pre> <p>And same applies to the <code>{{ }}</code> variable tags:</p> <p>Here, <code>items</code> is a list:</p> <pre><code>{% component 'cat_list' items=\"{{ cats|slice:':2' }}\" / %}\n</code></pre> <p>Here, <code>items</code> is a string:</p> <pre><code>{% component 'cat_list' items=\"{{ cats|slice:':2' }} See more\" / %}\n</code></pre>"},{"location":"CHANGELOG/#pass-dictonary-by-its-key-value-pairs","title":"Pass dictonary by its key-value pairs","text":"<p>New in version 0.74:</p> <p>Sometimes, a component may expect a dictionary as one of its inputs.</p> <p>Most commonly, this happens when a component accepts a dictionary of HTML attributes (usually called <code>attrs</code>) to pass to the underlying template.</p> <p>In such cases, we may want to define some HTML attributes statically, and other dynamically. But for that, we need to define this dictionary on Python side:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        {% component \"other\" attrs=attrs / %}\n    \"\"\"\n\n    def get_context_data(self, some_id: str):\n        attrs = {\n            \"class\": \"pa-4 flex\",\n            \"data-some-id\": some_id,\n            \"@click.stop\": \"onClickHandler\",\n        }\n        return {\"attrs\": attrs}\n</code></pre> <p>But as you can see in the case above, the event handler <code>@click.stop</code> and styling <code>pa-4 flex</code> are disconnected from the template. If the component grew in size and we moved the HTML to a separate file, we would have hard time reasoning about the component's template.</p> <p>Luckily, there's a better way.</p> <p>When we want to pass a dictionary to a component, we can define individual key-value pairs as component kwargs, so we can keep all the relevant information in the template. For that, we prefix the key with the name of the dict and <code>:</code>. So key <code>class</code> of input <code>attrs</code> becomes <code>attrs:class</code>. And our example becomes:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"\"\"\n        {% component \"other\"\n            attrs:class=\"pa-4 flex\"\n            attrs:data-some-id=some_id\n            attrs:@click.stop=\"onClickHandler\"\n        / %}\n    \"\"\"\n\n    def get_context_data(self, some_id: str):\n        return {\"some_id\": some_id}\n</code></pre> <p>Sweet! Now all the relevant HTML is inside the template, and we can move it to a separate file with confidence:</p> <pre><code>{% component \"other\"\n    attrs:class=\"pa-4 flex\"\n    attrs:data-some-id=some_id\n    attrs:@click.stop=\"onClickHandler\"\n/ %}\n</code></pre> <p>Note: It is NOT possible to define nested dictionaries, so <code>attrs:my_key:two=2</code> would be interpreted as:</p> <pre><code>{\"attrs\": {\"my_key:two\": 2}}\n</code></pre>"},{"location":"CHANGELOG/#prop-drilling-and-dependency-injection-provide-inject","title":"Prop drilling and dependency injection (provide / inject)","text":"<p>New in version 0.80:</p> <p>Django components supports dependency injection with the combination of:</p> <ol> <li><code>{% provide %}</code> tag</li> <li><code>inject()</code> method of the <code>Component</code> class</li> </ol>"},{"location":"CHANGELOG/#how-to-use-provide-inject","title":"How to use provide / inject","text":"<p>As the name suggest, using provide / inject consists of 2 steps</p> <ol> <li>Providing data</li> <li>Injecting provided data</li> </ol> <p>For examples of advanced uses of provide / inject, see this discussion.</p>"},{"location":"CHANGELOG/#using-inject-method","title":"Using <code>inject()</code> method","text":"<p>To \"inject\" (access) the data defined on the <code>provide</code> tag, you can use the <code>inject()</code> method inside of <code>get_context_data()</code>.</p> <p>For a component to be able to \"inject\" some data, the component (<code>{% component %}</code> tag) must be nested inside the <code>{% provide %}</code> tag.</p> <p>In the example from previous section, we've defined two kwargs: <code>key=\"hi\" another=123</code>. That means that if we now inject <code>\"my_data\"</code>, we get an object with 2 attributes - <code>key</code> and <code>another</code>.</p> <pre><code>class ChildComponent(Component):\n    def get_context_data(self):\n        my_data = self.inject(\"my_data\")\n        print(my_data.key)     # hi\n        print(my_data.another) # 123\n        return {}\n</code></pre> <p>First argument to <code>inject</code> is the key (or name) of the provided data. This must match the string that you used in the <code>provide</code> tag. If no provider with given key is found, <code>inject</code> raises a <code>KeyError</code>.</p> <p>To avoid the error, you can pass a second argument to <code>inject</code> to which will act as a default value, similar to <code>dict.get(key, default)</code>:</p> <pre><code>class ChildComponent(Component):\n    def get_context_data(self):\n        my_data = self.inject(\"invalid_key\", DEFAULT_DATA)\n        assert my_data == DEFAUKT_DATA\n        return {}\n</code></pre> <p>The instance returned from <code>inject()</code> is a subclass of <code>NamedTuple</code>, so the instance is immutable. This ensures that the data returned from <code>inject</code> will always have all the keys that were passed to the <code>provide</code> tag.</p> <p>NOTE: <code>inject()</code> works strictly only in <code>get_context_data</code>. If you try to call it from elsewhere, it will raise an error.</p>"},{"location":"CHANGELOG/#component-hooks","title":"Component hooks","text":"<p>New in version 0.96</p> <p>Component hooks are functions that allow you to intercept the rendering process at specific positions.</p>"},{"location":"CHANGELOG/#component-hooks-example","title":"Component hooks example","text":"<p>You can use hooks together with provide / inject to create components that accept a list of items via a slot.</p> <p>In the example below, each <code>tab_item</code> component will be rendered on a separate tab page, but they are all defined in the default slot of the <code>tabs</code> component.</p> <p>See here for how it was done</p> <pre><code>{% component \"tabs\" %}\n  {% component \"tab_item\" header=\"Tab 1\" %}\n    &lt;p&gt;\n      hello from tab 1\n    &lt;/p&gt;\n    {% component \"button\" %}\n      Click me!\n    {% endcomponent %}\n  {% endcomponent %}\n\n  {% component \"tab_item\" header=\"Tab 2\" %}\n    Hello this is tab 2\n  {% endcomponent %}\n{% endcomponent %}\n</code></pre> <p>Customizing component tags with TagFormatter</p> <p>New in version 0.89</p> <p>By default, components are rendered using the pair of <code>{% component %}</code> / <code>{% endcomponent %}</code> template tags:</p> <pre><code>{% component \"button\" href=\"...\" disabled %}\nClick me!\n{% endcomponent %}\n\n{# or #}\n\n{% component \"button\" href=\"...\" disabled / %}\n</code></pre> <p>You can change this behaviour in the settings under the <code>COMPONENTS.tag_formatter</code>.</p> <p>For example, if you set the tag formatter to <code>django_components.shorthand_component_formatter</code>, the components will use their name as the template tags:</p> <pre><code>{% button href=\"...\" disabled %}\n  Click me!\n{% endbutton %}\n\n{# or #}\n\n{% button href=\"...\" disabled / %}\n</code></pre>"},{"location":"CHANGELOG/#writing-your-own-tagformatter","title":"Writing your own TagFormatter","text":""},{"location":"CHANGELOG/#tagformatter","title":"TagFormatter","text":"<p><code>TagFormatter</code> handles following parts of the process above: - Generates start/end tags, given a component. This is what you then call from within your template as <code>{% component %}</code>.</p> <ul> <li>When you <code>{% component %}</code>, tag formatter pre-processes the tag contents, so it can link back the custom template tag to the right component.</li> </ul> <p>To do so, subclass from <code>TagFormatterABC</code> and implement following method: - <code>start_tag</code> - <code>end_tag</code> - <code>parse</code></p> <p>For example, this is the implementation of <code>ShorthandComponentFormatter</code></p> <pre><code>class ShorthandComponentFormatter(TagFormatterABC):\n    # Given a component name, generate the start template tag\n    def start_tag(self, name: str) -&gt; str:\n        return name  # e.g. 'button'\n\n    # Given a component name, generate the start template tag\n    def end_tag(self, name: str) -&gt; str:\n        return f\"end{name}\"  # e.g. 'endbutton'\n\n    # Given a tag, e.g.\n    # `{% button href=\"...\" disabled %}`\n    #\n    # The parser receives:\n    # `['button', 'href=\"...\"', 'disabled']`\n    def parse(self, tokens: List[str]) -&gt; TagResult:\n        tokens = [*tokens]\n        name = tokens.pop(0)\n        return TagResult(\n            name,  # e.g. 'button'\n            tokens  # e.g. ['href=\"...\"', 'disabled']\n        )\n</code></pre> <p>That's it! And once your <code>TagFormatter</code> is ready, don't forget to update the settings!</p> <p>Defining file paths relative to component or static dirs</p> <p>As seen in the getting started example, to associate HTML/JS/CSS files with a component, you set them as <code>template_name</code>, <code>Media.js</code> and <code>Media.css</code> respectively:</p> <pre><code>## In a file [project root]/components/calendar/calendar.py\nfrom django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"template.html\"\n\n    class Media:\n        css = \"style.css\"\n        js = \"script.js\"\n</code></pre> <p>In the example above, the files are defined relative to the directory where <code>component.py</code> is.</p> <p>Alternatively, you can specify the file paths relative to the directories set in <code>STATICFILES_DIRS</code>.</p> <p>Assuming that <code>STATICFILES_DIRS</code> contains path <code>[project root]/components</code>, we can rewrite the example as:</p> <pre><code>## In a file [project root]/components/calendar/calendar.py\nfrom django_components import Component, register\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"calendar/template.html\"\n\n    class Media:\n        css = \"calendar/style.css\"\n        js = \"calendar/script.js\"\n</code></pre> <p>NOTE: In case of conflict, the preference goes to resolving the files relative to the component's directory.</p>"},{"location":"CHANGELOG/#configuring-css-media-types","title":"Configuring CSS Media Types","text":"<p>You can define which stylesheets will be associated with which CSS Media types. You do so by defining CSS files as a dictionary.</p> <p>See the corresponding Django Documentation.</p> <p>Again, you can set either a single file or a list of files per media type:</p> <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": \"path/to/style1.css\",\n            \"print\": \"path/to/style2.css\",\n        }\n</code></pre> <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": [\"path/to/style1.css\", \"path/to/style2.css\"],\n            \"print\": [\"path/to/style3.css\", \"path/to/style4.css\"],\n        }\n</code></pre> <p>NOTE: When you define CSS as a string or a list, the <code>all</code> media type is implied.</p>"},{"location":"CHANGELOG/#path-as-objects","title":"Path as objects","text":"<p>In the example above, you could see that when we used <code>mark_safe</code> to mark a string as a <code>SafeString</code>, we had to define the full <code>&lt;script&gt;</code>/<code>&lt;link&gt;</code> tag.</p> <p>This is an extension of Django's Paths as objects feature, where \"safe\" strings are taken as is, and accessed only at render time.</p> <p>Because of that, the paths defined as \"safe\" strings are NEVER resolved, neither relative to component's directory, nor relative to <code>STATICFILES_DIRS</code>.</p> <p>\"Safe\" strings can be used to lazily resolve a path, or to customize the <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tag for individual paths:</p> <pre><code>class LazyJsPath:\n    def __init__(self, static_path: str) -&gt; None:\n        self.static_path = static_path\n\n    def __html__(self):\n        full_path = static(self.static_path)\n        return format_html(\n            f'&lt;script type=\"module\" src=\"{full_path}\"&gt;&lt;/script&gt;'\n        )\n\n@register(\"calendar\")\nclass Calendar(Component):\n    template_name = \"calendar/template.html\"\n\n    def get_context_data(self, date):\n        return {\n            \"date\": date,\n        }\n\n    class Media:\n        css = \"calendar/style.css\"\n        js = [\n            # &lt;script&gt; tag constructed by Media class\n            \"calendar/script1.js\",\n            # Custom &lt;script&gt; tag\n            LazyJsPath(\"calendar/script2.js\"),\n        ]\n</code></pre>"},{"location":"CHANGELOG/#rendering-jscss-dependencies","title":"Rendering JS/CSS dependencies","text":"<p>The JS and CSS files included in components are not automatically rendered. Instead, use the following tags to specify where to render the dependencies:</p> <ul> <li><code>component_dependencies</code> - Renders both JS and CSS</li> <li><code>component_js_dependencies</code> - Renders only JS</li> <li><code>component_css_dependencies</code> - Reneders only CSS</li> </ul> <p>JS files are rendered as <code>&lt;script&gt;</code> tags. CSS files are rendered as <code>&lt;style&gt;</code> tags.</p>"},{"location":"CHANGELOG/#available-settings","title":"Available settings","text":"<p>All library settings are handled from a global <code>COMPONENTS</code> variable that is read from <code>settings.py</code>. By default you don't need it set, there are resonable defaults.</p> <p>Here's overview of all available settings and their defaults:</p> <pre><code>COMPONENTS = {\n    \"autodiscover\": True,\n    \"context_behavior\": \"django\",  # \"django\" | \"isolated\"\n    \"dynamic_component_name\": \"dynamic\",\n    \"libraries\": [],  # [\"mysite.components.forms\", ...]\n    \"multiline_tags\": True,\n    \"reload_on_template_change\": False,\n    \"tag_formatter\": \"django_components.component_formatter\",\n    \"template_cache_size\": 128,\n}\n</code></pre>"},{"location":"CHANGELOG/#autodiscover-toggle-autodiscovery","title":"<code>autodiscover</code> - Toggle autodiscovery","text":"<p>If you specify all the component locations with the setting above and have a lot of apps, you can (very) slightly speed things up by disabling autodiscovery.</p> <pre><code>COMPONENTS = {\n    \"autodiscover\": False,\n}\n</code></pre>"},{"location":"CHANGELOG/#multiline_tags-enabledisable-multiline-support","title":"<code>multiline_tags</code> - Enable/Disable multiline support","text":"<p>If <code>True</code>, template tags can span multiple lines. Default: <code>True</code></p> <pre><code>COMPONENTS = {\n    \"multiline_tags\": True,\n}\n</code></pre>"},{"location":"CHANGELOG/#context_behavior-make-components-isolated-or-not","title":"<code>context_behavior</code> - Make components isolated (or not)","text":"<p>NOTE: <code>context_behavior</code> and <code>slot_context_behavior</code> options were merged in v0.70.</p> <p>If you are migrating from BEFORE v0.67, set <code>context_behavior</code> to <code>\"django\"</code>. From v0.67 to v0.78 (incl) the default value was <code>\"isolated\"</code>.</p> <p>For v0.79 and later, the default is again <code>\"django\"</code>. See the rationale for change here.</p> <p>You can configure what variables are available inside the <code>{% fill %}</code> tags. See Component context and scope.</p> <p>This has two modes:</p> <ul> <li><code>\"django\"</code> - Default - The default Django template behavior.</li> </ul> <p>Inside the <code>{% fill %}</code> tag, the context variables you can access are a union of:</p> <ul> <li>All the variables that were OUTSIDE the fill tag, including any loops or with tag</li> <li> <p>Data returned from <code>get_context_data()</code> of the component that wraps the fill tag.</p> </li> <li> <p><code>\"isolated\"</code> - Similar behavior to Vue or React, this is useful if you want to make sure that components don't accidentally access variables defined outside of the component.</p> </li> </ul> <p>Inside the <code>{% fill %}</code> tag, you can ONLY access variables from 2 places:</p> <ul> <li><code>get_context_data()</code> of the component which defined the template (AKA the \"root\" component)</li> <li>Any loops (<code>{% for ... %}</code>) that the <code>{% fill %}</code> tag is part of.</li> </ul> <pre><code>COMPONENTS = {\n    \"context_behavior\": \"isolated\",\n}\n</code></pre>"},{"location":"CHANGELOG/#example-isolated","title":"Example \"isolated\"","text":"<p>Given this template:</p> <pre><code>class RootComp(Component):\n    template = \"\"\"\n        {% with cheese=\"feta\" %}\n            {% component 'my_comp' %}\n                {{ my_var }}  # my_var\n                {{ cheese }}  # cheese\n            {% endcomponent %}\n        {% endwith %}\n    \"\"\"\n    def get_context_data(self):\n        return { \"my_var\": 123 }\n</code></pre> <p>Then if <code>get_context_data()</code> of the component <code>\"my_comp\"</code> returns following data:</p> <pre><code>{ \"my_var\": 456 }\n</code></pre> <p>Then the template will be rendered as:</p> <pre><code>123   # my_var\n      # cheese\n</code></pre> <p>Because variables <code>\"my_var\"</code> and <code>\"cheese\"</code> are searched only inside <code>RootComponent.get_context_data()</code>. But since <code>\"cheese\"</code> is not defined there, it's empty.</p> <p>Notice that the variables defined with the <code>{% with %}</code> tag are ignored inside the <code>{% fill %}</code> tag with the <code>\"isolated\"</code> mode.</p>"},{"location":"CHANGELOG/#tag_formatter-change-how-components-are-used-in-templates","title":"<code>tag_formatter</code> - Change how components are used in templates","text":"<p>Sets the <code>TagFormatter</code> instance. See the section Customizing component tags with TagFormatter.</p> <p>Can be set either as direct reference, or as an import string;</p> <pre><code>COMPONENTS = {\n    \"tag_formatter\": \"django_components.component_formatter\"\n}\n</code></pre> <p>Or</p> <pre><code>from django_components import component_formatter\n\nCOMPONENTS = {\n    \"tag_formatter\": component_formatter\n}\n</code></pre> <p>Reload dev server on component file changes</p> <p>This is relevant if you are using the project structure as shown in our examples, where HTML, JS, CSS and Python are separate and nested in a directory.</p> <p>In this case you may notice that when you are running a development server, the server sometimes does not reload when you change comoponent files.</p> <p>From relevant StackOverflow thread:</p> <p>TL;DR is that the server won't reload if it thinks the changed file is in a templates directory, or in a nested sub directory of a templates directory. This is by design.</p> <p>To make the dev server reload on all component files, set <code>reload_on_template_change</code> to <code>True</code>. This configures Django to watch for component files too.</p> <p>NOTE: This setting should be enabled only for the dev environment!</p> <p>Management Command</p> <p>You can use the built-in management command <code>startcomponent</code> to create a django component. The command accepts the following arguments and options:</p> <ul> <li> <p><code>name</code>: The name of the component to create. This is a required argument.</p> </li> <li> <p><code>--path</code>: The path to the components directory. This is an optional argument. If not provided, the command will use the <code>BASE_DIR</code> setting from your Django settings.</p> </li> <li> <p><code>--js</code>: The name of the JavaScript file. This is an optional argument. The default value is <code>script.js</code>.</p> </li> <li> <p><code>--css</code>: The name of the CSS file. This is an optional argument. The default value is <code>style.css</code>.</p> </li> <li> <p><code>--template</code>: The name of the template file. This is an optional argument. The default value is <code>template.html</code>.</p> </li> <li> <p><code>--force</code>: This option allows you to overwrite existing files if they exist. This is an optional argument.</p> </li> <li> <p><code>--verbose</code>: This option allows the command to print additional information during component creation. This is an optional argument.</p> </li> <li> <p><code>--dry-run</code>: This option allows you to simulate component creation without actually creating any files. This is an optional argument. The default value is <code>False</code>.</p> </li> </ul>"},{"location":"CHANGELOG/#management-command-examples","title":"Management Command Examples","text":"<p>Here are some examples of how you can use the command:</p>"},{"location":"CHANGELOG/#creating-a-component-with-custom-settings","title":"Creating a Component with Custom Settings","text":"<p>You can also create a component with custom settings by providing additional arguments:</p> <pre><code>python manage.py startcomponent new_component --path my_components --js my_script.js --css my_style.css --template my_template.html\n</code></pre> <p>This will create a new component named <code>new_component</code> in the <code>my_components</code> directory. The JavaScript, CSS, and template files will be named <code>my_script.js</code>, <code>my_style.css</code>, and <code>my_template.html</code>, respectively.</p>"},{"location":"CHANGELOG/#simulating-component-creation","title":"Simulating Component Creation","text":"<p>If you want to simulate the creation of a component without actually creating any files, you can use the <code>--dry-run</code> option:</p> <pre><code>python manage.py startcomponent my_component --dry-run\n</code></pre> <p>This will simulate the creation of <code>my_component</code> without creating any files.</p> <p>Writing component libraries</p> <ol> <li> <p>Create a Django project with the following structure:</p> <pre><code>project/\n  |--  myapp/\n    |--  __init__.py\n    |--  apps.py\n    |--  templates/\n      |--  table/\n        |--  table.py\n        |--  table.js\n        |--  table.css\n        |--  table.html\n    |--  menu.py   &lt;--- single-file component\n  |--  templatetags/\n    |--  __init__.py\n    |--  mytags.py\n</code></pre> </li> <li> <p>Create custom <code>Library</code> and <code>ComponentRegistry</code> instances in <code>mytags.py</code></p> <p>This will be the entrypoint for using the components inside Django templates.</p> <p>Remember that Django requires the <code>Library</code> instance to be accessible under the <code>register</code> variable (See Django docs):</p> <pre><code>from django.template import Library\nfrom django_components import ComponentRegistry, RegistrySettings\n\nregister = library = django.template.Library()\ncomp_registry = ComponentRegistry(\n    library=library,\n    settings=RegistrySettings(\n        CONTEXT_BEHAVIOR=\"isolated\",\n        TAG_FORMATTER=\"django_components.component_formatter\",\n    ),\n)\n</code></pre> <p>As you can see above, this is also the place where we configure how our components should behave, using the <code>settings</code> argument. If omitted, default settings are used.</p> <p>For library authors, we recommend setting <code>CONTEXT_BEHAVIOR</code> to <code>\"isolated\"</code>, so that the state cannot leak into the components, and so the components' behavior is configured solely through the inputs. This means that the components will be more predictable and easier to debug.</p> <p>Next, you can decide how will others use your components by settingt the <code>TAG_FORMATTER</code> options.</p> <p>If omitted or set to <code>\"django_components.component_formatter\"</code>, your components will be used like this:</p> <pre><code>{% component \"table\" items=items headers=headers %}\n{% endcomponent %}\n</code></pre> <p>Or you can use <code>\"django_components.component_shorthand_formatter\"</code> to use components like so:</p> <pre><code>{% table items=items headers=headers %}\n{% endtable %}\n</code></pre> <p>Or you can define a custom TagFormatter.</p> <p>Either way, these settings will be scoped only to your components. So, in the user code, there may be components side-by-side that use different formatters:</p> <pre><code>{% load mytags %}\n\n{# Component from your library \"mytags\", using the \"shorthand\" formatter #}\n{% table items=items headers=header %}\n{% endtable %}\n\n{# User-created components using the default settings #}\n{% component \"my_comp\" title=\"Abc...\" %}\n{% endcomponent %}\n</code></pre> </li> <li> <p>Write your components and register them with your instance of <code>ComponentRegistry</code></p> <p>There's one difference when you are writing components that are to be shared, and that's that the components must be explicitly registered with your instance of <code>ComponentRegistry</code> from the previous step.</p> <p>For better user experience, you can also define the types for the args, kwargs, slots and data.</p> <p>It's also a good idea to have a common prefix for your components, so they can be easily distinguished from users' components. In the example below, we use the prefix <code>my_</code> / <code>My</code>.</p> <pre><code>from typing import Dict, NotRequired, Optional, Tuple, TypedDict\n\nfrom django_components import Component, SlotFunc, register, types\n\nfrom myapp.templatetags.mytags import comp_registry\n\n# Define the types\nclass EmptyDict(TypedDict):\n    pass\n\ntype MyMenuArgs = Tuple[int, str]\n\nclass MyMenuSlots(TypedDict):\n    default: NotRequired[Optional[SlotFunc[EmptyDict]]]\n\nclass MyMenuProps(TypedDict):\n    vertical: NotRequired[bool]\n    klass: NotRequired[str]\n    style: NotRequired[str]\n\n# Define the component\n# NOTE: Don't forget to set the `registry`!\n@register(\"my_menu\", registry=comp_registry)\nclass MyMenu(Component[MyMenuArgs, MyMenuProps, MyMenuSlots, Any]):\n    def get_context_data(\n        self,\n        *args,\n        attrs: Optional[Dict] = None,\n    ):\n        return {\n            \"attrs\": attrs,\n        }\n\n    template: types.django_html = \"\"\"\n        {# Load django_components template tags #}\n        {% load component_tags %}\n\n        &lt;div {% html_attrs attrs class=\"my-menu\" %}&gt;\n            &lt;div class=\"my-menu__content\"&gt;\n                {% slot \"default\" default / %}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    \"\"\"\n</code></pre> </li> <li> <p>Import the components in <code>apps.py</code></p> <p>Normally, users rely on autodiscovery and <code>STATICFILES_DIRS</code> to load the component files.</p> <p>Since you, as the library author, are not in control of the file system, it is recommended to load the components manually.</p> <p>We recommend doing this in the <code>AppConfig.ready()</code> hook of your <code>apps.py</code>:</p> <pre><code>from django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"myapp\"\n\n    # This is the code that gets run when user adds myapp\n    # to Django's INSTALLED_APPS\n    def ready(self) -&gt; None:\n        # Import the components that you want to make available\n        # inside the templates.\n        from myapp.templates import (\n            menu,\n            table,\n        )\n</code></pre> <p>Note that you can also include any other startup logic within <code>AppConfig.ready()</code>.</p> </li> </ol> <p>And that's it! The next step is to publish it.</p>"},{"location":"CHANGELOG/#installing-and-using-component-libraries","title":"Installing and using component libraries","text":"<p>After the package has been published, all that remains is to install it in other django projects:</p> <ol> <li> <p>Install the package:</p> <pre><code>pip install myapp\n</code></pre> </li> <li> <p>Add the package to <code>INSTALLED_APPS</code></p> <pre><code>INSTALLED_APPS = [\n    ...\n    \"myapp\",\n]\n</code></pre> </li> <li> <p>Optionally add the template tags to the <code>builtins</code>, so you don't have to call <code>{% load mytags %}</code> in every template:</p> <pre><code>TEMPLATES = [\n    {\n        ...,\n        'OPTIONS': {\n            'context_processors': [\n                ...\n            ],\n            'builtins': [\n                'myapp.templatetags.mytags',\n            ]\n        },\n    },\n]\n</code></pre> </li> <li> <p>And, at last, you can use the components in your own project!</p> <pre><code>{% my_menu title=\"Abc...\" %}\n    Hello World!\n{% endmy_menu %}\n</code></pre> </li> </ol> <p>Running django-components project locally</p>"},{"location":"CHANGELOG/#developing-against-live-django-app","title":"Developing against live Django app","text":"<p>How do you check that your changes to django-components project will work in an actual Django project?</p> <p>Use the sampleproject demo project to validate the changes:</p> <ol> <li>Navigate to sampleproject directory:</li> </ol> <pre><code>cd sampleproject\n</code></pre> <ol> <li>Install dependencies from the requirements.txt file:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Link to your local version of django-components:</li> </ol> <pre><code>pip install -e ..\n</code></pre> <p>NOTE: The path (in this case <code>..</code>) must point to the directory that has the <code>setup.py</code> file.</p> <ol> <li>Start Django server    <pre><code>python manage.py runserver\n</code></pre></li> </ol> <p>Once the server is up, it should be available at http://127.0.0.1:8000.</p> <p>To display individual components, add them to the <code>urls.py</code>, like in the case of http://127.0.0.1:8000/greeting</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at emil@emilstenstrom.se. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>README</li> <li>Changelog</li> <li>Code of Conduct</li> <li>License</li> <li>Reference</li> <li>API Reference</li> </ul>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2019 Emil Stenstr\u00f6m</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"slot_rendering/","title":"Slot rendering","text":"<p>This doc serves as a primer on how component slots and fills are resolved.</p>"},{"location":"slot_rendering/#flow","title":"Flow","text":"<ol> <li> <p>Imagine you have a template. Some kind of text, maybe HTML:    <pre><code>| ------\n| ---------\n| ----\n| -------\n</code></pre></p> </li> <li> <p>The template may contain some vars, tags, etc    <pre><code>| -- {{ my_var }} --\n| ---------\n| ----\n| -------\n</code></pre></p> </li> <li> <p>The template also contains some slots, etc    <pre><code>| -- {{ my_var }} --\n| ---------\n| -- {% slot \"myslot\" %} ---\n| -- {% endslot %} ---\n| ----\n| -- {% slot \"myslot2\" %} ---\n| -- {% endslot %} ---\n| -------\n</code></pre></p> </li> <li> <p>Slots may be nested    <pre><code>| -- {{ my_var }} --\n| -- ABC\n| -- {% slot \"myslot\" %} ---\n| ----- DEF {{ my_var }}\n| ----- {% slot \"myslot_inner\" %}\n| -------- GHI {{ my_var }}\n| ----- {% endslot %}\n| -- {% endslot %} ---\n| ----\n| -- {% slot \"myslot2\" %} ---\n| ---- JKL {{ my_var }}\n| -- {% endslot %} ---\n| -------\n</code></pre></p> </li> <li> <p>Some slots may be inside fills for other components    <pre><code>| -- {{ my_var }} --\n| -- ABC\n| -- {% slot \"myslot\" %}---\n| ----- DEF {{ my_var }}\n| ----- {% slot \"myslot_inner\" %}\n| -------- GHI {{ my_var }}\n| ----- {% endslot %}\n| -- {% endslot %} ---\n| ------\n| -- {% component \"mycomp\" %} ---\n| ---- {% slot \"myslot\" %} ---\n| ------- JKL {{ my_var }}\n| ------- {% slot \"myslot_inner\" %}\n| ---------- MNO {{ my_var }}\n| ------- {% endslot %}\n| ---- {% endslot %} ---\n| -- {% endcomponent %} ---\n| ----\n| -- {% slot \"myslot2\" %} ---\n| ---- PQR {{ my_var }}\n| -- {% endslot %} ---\n| -------\n</code></pre></p> </li> <li> <p>I want to render the slots with <code>{% fill %}</code> tag that were defined OUTSIDE of this template. How do I do that?</p> </li> <li> <p>Traverse the template to collect ALL slots</p> <ul> <li>NOTE: I will also look inside <code>{% slot %}</code> and <code>{% fill %}</code> tags, since they are all still   defined within the same TEMPLATE.</li> </ul> <p>I should end up with a list like this:   <pre><code>- Name: \"myslot\"\n   ID 0001\n   Content:\n   | ----- DEF {{ my_var }}\n   | ----- {% slot \"myslot_inner\" %}\n   | -------- GHI {{ my_var }}\n   | ----- {% endslot %}\n- Name: \"myslot_inner\"\n   ID 0002\n   Content:\n   | -------- GHI {{ my_var }}\n- Name: \"myslot\"\n   ID 0003\n   Content:\n   | ------- JKL {{ my_var }}\n   | ------- {% slot \"myslot_inner\" %}\n   | ---------- MNO {{ my_var }}\n   | ------- {% endslot %}\n- Name: \"myslot_inner\"\n   ID 0004\n   Content:\n   | ---------- MNO {{ my_var }}\n- Name: \"myslot2\"\n   ID 0005\n   Content:\n   | ---- PQR {{ my_var }}\n</code></pre></p> </li> <li> <p>Note the relationships - which slot is nested in which one</p> <p>I should end up with a graph-like data like:   <pre><code>- 0001: [0002]\n- 0002: []\n- 0003: [0004]\n- 0004: []\n- 0005: []\n</code></pre></p> <p>In other words, the data tells us that slot ID <code>0001</code> is PARENT of slot <code>0002</code>.</p> <p>This is important, because, IF parent template provides slot fill for slot 0001,   then we DON'T NEED TO render it's children, AKA slot 0002.</p> </li> <li> <p>Find roots of the slot relationships</p> <p>The data from previous step can be understood also as a collection of   directled acyclig graphs (DAG), e.g.:</p> <pre><code>0001 --&gt; 0002\n0003 --&gt; 0004\n0005\n</code></pre> <p>So we find the roots (<code>0001</code>, <code>0003</code>, <code>0005</code>), AKA slots that are NOT nested in other slots.   We do so by going over ALL entries from previous step. Those IDs which are NOT   mentioned in ANY of the lists are the roots.</p> <p>Because of the nature of nested structures, there cannot be any cycles.</p> </li> <li> <p>Recursively render slots, starting from roots.      </p> <ol> <li> <p>First we take each of the roots.</p> </li> <li> <p>Then we check if there is a slot fill for given slot name.</p> </li> <li> <p>If YES we replace the slot node with the fill node.</p> <ul> <li>Note: We assume slot fills are ALREADY RENDERED!  <pre><code>| ----- {% slot \"myslot_inner\" %}\n| -------- GHI {{ my_var }}\n| ----- {% endslot %}\n</code></pre>  becomes  <pre><code>| ----- Bla bla\n| -------- Some Other Content\n| ----- ...\n</code></pre>  We don't continue further, because inner slots have been overriden!</li> </ul> </li> <li> <p>If NO, then we will replace slot nodes with their children, e.g.:      <pre><code>| ---- {% slot \"myslot\" %} ---\n| ------- JKL {{ my_var }}\n| ------- {% slot \"myslot_inner\" %}\n| ---------- MNO {{ my_var }}\n| ------- {% endslot %}\n| ---- {% endslot %} ---\n</code></pre>      Becomes      <pre><code>| ------- JKL {{ my_var }}\n| ------- {% slot \"myslot_inner\" %}\n| ---------- MNO {{ my_var }}\n| ------- {% endslot %}\n</code></pre></p> </li> <li> <p>We check if the slot includes any children <code>{% slot %}</code> tags. If YES, then continue with step 4. for them, and wait until they finish.</p> </li> </ol> </li> <li> <p>At this point, ALL slots should be rendered and we should have something like this:       <pre><code>| -- {{ my_var }} --\n| -- ABC\n| ----- DEF {{ my_var }}\n| -------- GHI {{ my_var }}\n| ------\n| -- {% component \"mycomp\" %} ---\n| ------- JKL {{ my_var }}\n| ---- {% component \"mycomp\" %} ---\n| ---------- MNO {{ my_var }}\n| ---- {% endcomponent %} ---\n| -- {% endcomponent %} ---\n| ----\n| -- {% component \"mycomp2\" %} ---\n| ---- PQR {{ my_var }}\n| -- {% endcomponent %} ---\n| ----\n</code></pre></p> <ul> <li>NOTE: Inserting fills into {% slots %} should NOT introduce new {% slots %}, as the fills should be already rendered!</li> </ul> </li> </ol>"},{"location":"slot_rendering/#using-the-correct-context-in-slotfill-tags","title":"Using the correct context in {% slot/fill %} tags","text":"<p>In previous section, we said that the <code>{% fill %}</code> tags should be already rendered by the time they are inserted into the <code>{% slot %}</code> tags.</p> <p>This is not quite true. To help you understand, consider this complex case:</p> <pre><code>| -- {% for var in [1, 2, 3] %} ---\n| ---- {% component \"mycomp2\" %} ---\n| ------ {% fill \"first\" %}\n| ------- STU {{ my_var }}\n| -------     {{ var }}\n| ------ {% endfill %}\n| ------ {% fill \"second\" %}\n| -------- {% component var=var my_var=my_var %}\n| ---------- VWX {{ my_var }}\n| -------- {% endcomponent %}\n| ------ {% endfill %}\n| ---- {% endcomponent %} ---\n| -- {% endfor %} ---\n| -------\n</code></pre> <p>We want the forloop variables to be available inside the <code>{% fill %}</code> tags. Because of that, however, we CANNOT render the fills/slots in advance.</p> <p>Instead, our solution is closer to how Vue handles slots. In Vue, slots are effectively functions that accept a context variables and render some content.</p> <p>While we do not wrap the logic in a function, we do PREPARE IN ADVANCE: 1. The content that should be rendered for each slot 2. The context variables from <code>get_context_data()</code></p> <p>Thus, once we reach the <code>{% slot %}</code> node, in it's <code>render()</code> method, we access the data above, and, depending on the <code>context_behavior</code> setting, include the current context or not. For more info, see <code>SlotNode.render()</code>.</p>"},{"location":"slots_and_blocks/","title":"Using <code>slot</code> and <code>block</code> tags","text":"<ol> <li> <p>First let's clarify how <code>include</code> and <code>extends</code> tags work inside components.     So when component template includes <code>include</code> or <code>extends</code> tags, it's as if the \"included\"     template was inlined. So if the \"included\" template contains <code>slot</code> tags, then the component     uses those slots.</p> <pre><code>So if you have a template `abc.html`:\n```django\n&lt;div&gt;\n  hello\n  {% slot \"body\" %}{% endslot %}\n&lt;/div&gt;\n```\n\nAnd components that make use of `abc.html` via `include` or `extends`:\n```py\nfrom django_components import Component, register\n\n@register(\"my_comp_extends\")\nclass MyCompWithExtends(Component):\n    template = \"\"\"{% extends \"abc.html\" %}\"\"\"\n\n@register(\"my_comp_include\")\nclass MyCompWithInclude(Component):\n    template = \"\"\"{% include \"abc.html\" %}\"\"\"\n```\n\nThen you can set slot fill for the slot imported via `include/extends`:\n\n```django\n{% component \"my_comp_extends\" %}\n    {% fill \"body\" %}\n        123\n    {% endfill %}\n{% endcomponent %}\n```\n\nAnd it will render:\n```html\n&lt;div&gt;\n  hello\n  123\n&lt;/div&gt;\n```\n</code></pre> </li> <li> <p>Slot and block</p> <p>So if you have a template <code>abc.html</code> like so:</p> <pre><code>&lt;div&gt;\n  hello\n  {% block inner %}\n    1\n    {% slot \"body\" %}\n      2\n    {% endslot %}\n  {% endblock %}\n&lt;/div&gt;\n</code></pre> <p>and component <code>my_comp</code>:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template_name = \"abc.html\"\n</code></pre> <p>Then:</p> <ol> <li> <p>Since the <code>block</code> wasn't overriden, you can use the <code>body</code> slot:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"body\" %}\n        XYZ\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>And we get:</p> <pre><code>&lt;div&gt;hello 1 XYZ&lt;/div&gt;\n</code></pre> </li> <li> <p><code>blocks</code> CANNOT be overriden through the <code>component</code> tag, so something like this:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"body\" %}\n        XYZ\n    {% endfill %}\n{% endcomponent %}\n{% block \"inner\" %}\n    456\n{% endblock %}\n</code></pre> <p>Will still render the component content just the same:</p> <pre><code>&lt;div&gt;hello 1 XYZ&lt;/div&gt;\n</code></pre> </li> <li> <p>You CAN override the <code>block</code> tags of <code>abc.html</code> if my component template     uses <code>extends</code>. In that case, just as you would expect, the <code>block inner</code> inside     <code>abc.html</code> will render <code>OVERRIDEN</code>:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\ntemplate_name = \"\"\"\n{% extends \"abc.html\" %}\n\n            {% block inner %}\n                OVERRIDEN\n            {% endblock %}\n        \"\"\"\n    ```\n</code></pre> </li> <li> <p>This is where it gets interesting (but still intuitive). You can insert even     new <code>slots</code> inside these \"overriding\" blocks:</p> <pre><code>@register(\"my_comp\")\nclass MyComp(Component):\n    template_name = \"\"\"\n        {% extends \"abc.html\" %}\n\n        {% load component_tags %}\n        {% block \"inner\" %}\n            OVERRIDEN\n            {% slot \"new_slot\" %}\n                hello\n            {% endslot %}\n        {% endblock %}\n    \"\"\"\n</code></pre> <p>And you can then pass fill for this <code>new_slot</code> when rendering the component:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"new_slot\" %}\n        XYZ\n    {% endfill %}\n{% endcomponent %}\n</code></pre> <p>NOTE: Currently you can supply fills for both <code>new_slot</code> and <code>body</code> slots, and you will not get an error for an invalid/unknown slot name. But since <code>body</code> slot is not rendered, it just won't do anything. So this renders the same as above:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"new_slot\" %}\n        XYZ\n    {% endfill %}\n    {% fill \"body\" %}\n        www\n    {% endfill %}\n{% endcomponent %}\n</code></pre> </li> </ol> </li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> django_components</li> <li> app_settings</li> <li> apps</li> <li> attributes</li> <li> autodiscover</li> <li> component</li> <li> component_media</li> <li> component_registry</li> <li> components<ul> <li> dynamic</li> </ul> </li> <li> context</li> <li> expression</li> <li> library</li> <li> logger</li> <li> management<ul> <li> commands</li> <li> startcomponent</li> <li> upgradecomponent</li> </ul> </li> <li> middleware</li> <li> node</li> <li> provide</li> <li> safer_staticfiles<ul> <li> apps</li> </ul> </li> <li> slots</li> <li> tag_formatter</li> <li> template_loader</li> <li> template_parser</li> <li> templatetags<ul> <li> component_tags</li> </ul> </li> <li> types</li> <li> utils</li> </ul>"},{"location":"reference/django_components/","title":"Index","text":""},{"location":"reference/django_components/#django_components","title":"django_components","text":"<p>Main package for Django Components.</p>"},{"location":"reference/django_components/#django_components.app_settings","title":"app_settings","text":""},{"location":"reference/django_components/#django_components.app_settings.ContextBehavior","title":"ContextBehavior","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/django_components/#django_components.app_settings.ContextBehavior.DJANGO","title":"DJANGO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DJANGO = 'django'\n</code></pre> <p>With this setting, component fills behave as usual Django tags. That is, they enrich the context, and pass it along.</p> <ol> <li>Component fills use the context of the component they are within.</li> <li>Variables from <code>get_context_data</code> are available to the component fill.</li> </ol> <p>Example:</p> <p>Given this template <pre><code>{% with cheese=\"feta\" %}\n  {% component 'my_comp' %}\n    {{ my_var }}  # my_var\n    {{ cheese }}  # cheese\n  {% endcomponent %}\n{% endwith %}\n</code></pre></p> <p>and this context returned from the <code>get_context_data()</code> method <pre><code>{ \"my_var\": 123 }\n</code></pre></p> <p>Then if component \"my_comp\" defines context <pre><code>{ \"my_var\": 456 }\n</code></pre></p> <p>Then this will render: <pre><code>456   # my_var\nfeta  # cheese\n</code></pre></p> <p>Because \"my_comp\" overrides the variable \"my_var\", so <code>{{ my_var }}</code> equals <code>456</code>.</p> <p>And variable \"cheese\" will equal <code>feta</code>, because the fill CAN access the current context.</p>"},{"location":"reference/django_components/#django_components.app_settings.ContextBehavior.ISOLATED","title":"ISOLATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ISOLATED = 'isolated'\n</code></pre> <p>This setting makes the component fills behave similar to Vue or React, where the fills use EXCLUSIVELY the context variables defined in <code>get_context_data</code>.</p> <p>Example:</p> <p>Given this template <pre><code>{% with cheese=\"feta\" %}\n  {% component 'my_comp' %}\n    {{ my_var }}  # my_var\n    {{ cheese }}  # cheese\n  {% endcomponent %}\n{% endwith %}\n</code></pre></p> <p>and this context returned from the <code>get_context_data()</code> method <pre><code>{ \"my_var\": 123 }\n</code></pre></p> <p>Then if component \"my_comp\" defines context <pre><code>{ \"my_var\": 456 }\n</code></pre></p> <p>Then this will render: <pre><code>123   # my_var\n      # cheese\n</code></pre></p> <p>Because both variables \"my_var\" and \"cheese\" are taken from the root context. Since \"cheese\" is not defined in root context, it's empty.</p>"},{"location":"reference/django_components/#django_components.attributes","title":"attributes","text":""},{"location":"reference/django_components/#django_components.attributes.append_attributes","title":"append_attributes","text":"<pre><code>append_attributes(*args: Tuple[str, Any]) -&gt; Dict\n</code></pre> <p>Merges the key-value pairs and returns a new dictionary.</p> <p>If a key is present multiple times, its values are concatenated with a space character as separator in the final dictionary.</p> Source code in <code>src/django_components/attributes.py</code> <pre><code>def append_attributes(*args: Tuple[str, Any]) -&gt; Dict:\n    \"\"\"\n    Merges the key-value pairs and returns a new dictionary.\n\n    If a key is present multiple times, its values are concatenated with a space\n    character as separator in the final dictionary.\n    \"\"\"\n    result: Dict = {}\n\n    for key, value in args:\n        if key in result:\n            result[key] += \" \" + value\n        else:\n            result[key] = value\n\n    return result\n</code></pre>"},{"location":"reference/django_components/#django_components.attributes.attributes_to_string","title":"attributes_to_string","text":"<pre><code>attributes_to_string(attributes: Mapping[str, Any]) -&gt; str\n</code></pre> <p>Convert a dict of attributes to a string.</p> Source code in <code>src/django_components/attributes.py</code> <pre><code>def attributes_to_string(attributes: Mapping[str, Any]) -&gt; str:\n    \"\"\"Convert a dict of attributes to a string.\"\"\"\n    attr_list = []\n\n    for key, value in attributes.items():\n        if value is None or value is False:\n            continue\n        if value is True:\n            attr_list.append(conditional_escape(key))\n        else:\n            attr_list.append(format_html('{}=\"{}\"', key, value))\n\n    return mark_safe(SafeString(\" \").join(attr_list))\n</code></pre>"},{"location":"reference/django_components/#django_components.autodiscover","title":"autodiscover","text":""},{"location":"reference/django_components/#django_components.autodiscover.autodiscover","title":"autodiscover","text":"<pre><code>autodiscover(map_module: Optional[Callable[[str], str]] = None) -&gt; List[str]\n</code></pre> <p>Search for component files and import them. Returns a list of module paths of imported files.</p> <p>Autodiscover searches in the locations as defined by <code>Loader.get_dirs</code>.</p> <p>You can map the module paths with <code>map_module</code> function. This serves as an escape hatch for when you need to use this function in tests.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def autodiscover(\n    map_module: Optional[Callable[[str], str]] = None,\n) -&gt; List[str]:\n    \"\"\"\n    Search for component files and import them. Returns a list of module\n    paths of imported files.\n\n    Autodiscover searches in the locations as defined by `Loader.get_dirs`.\n\n    You can map the module paths with `map_module` function. This serves\n    as an escape hatch for when you need to use this function in tests.\n    \"\"\"\n    dirs = get_dirs()\n    component_filepaths = search_dirs(dirs, \"**/*.py\")\n    logger.debug(f\"Autodiscover found {len(component_filepaths)} files in component directories.\")\n\n    modules = [_filepath_to_python_module(filepath) for filepath in component_filepaths]\n    return _import_modules(modules, map_module)\n</code></pre>"},{"location":"reference/django_components/#django_components.autodiscover.get_dirs","title":"get_dirs","text":"<pre><code>get_dirs(engine: Optional[Engine] = None) -&gt; List[Path]\n</code></pre> <p>Helper for using django_component's FilesystemLoader class to obtain a list of directories where component python files may be defined.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def get_dirs(engine: Optional[Engine] = None) -&gt; List[Path]:\n    \"\"\"\n    Helper for using django_component's FilesystemLoader class to obtain a list\n    of directories where component python files may be defined.\n    \"\"\"\n    current_engine = engine\n    if current_engine is None:\n        current_engine = Engine.get_default()\n\n    loader = Loader(current_engine)\n    return loader.get_dirs()\n</code></pre>"},{"location":"reference/django_components/#django_components.autodiscover.import_libraries","title":"import_libraries","text":"<pre><code>import_libraries(map_module: Optional[Callable[[str], str]] = None) -&gt; List[str]\n</code></pre> <p>Import modules set in <code>COMPONENTS.libraries</code> setting.</p> <p>You can map the module paths with <code>map_module</code> function. This serves as an escape hatch for when you need to use this function in tests.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def import_libraries(\n    map_module: Optional[Callable[[str], str]] = None,\n) -&gt; List[str]:\n    \"\"\"\n    Import modules set in `COMPONENTS.libraries` setting.\n\n    You can map the module paths with `map_module` function. This serves\n    as an escape hatch for when you need to use this function in tests.\n    \"\"\"\n    from django_components.app_settings import app_settings\n\n    return _import_modules(app_settings.LIBRARIES, map_module)\n</code></pre>"},{"location":"reference/django_components/#django_components.autodiscover.search_dirs","title":"search_dirs","text":"<pre><code>search_dirs(dirs: List[Path], search_glob: str) -&gt; List[Path]\n</code></pre> <p>Search the directories for the given glob pattern. Glob search results are returned as a flattened list.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def search_dirs(dirs: List[Path], search_glob: str) -&gt; List[Path]:\n    \"\"\"\n    Search the directories for the given glob pattern. Glob search results are returned\n    as a flattened list.\n    \"\"\"\n    matched_files: List[Path] = []\n    for directory in dirs:\n        for path in glob.iglob(str(Path(directory) / search_glob), recursive=True):\n            matched_files.append(Path(path))\n\n    return matched_files\n</code></pre>"},{"location":"reference/django_components/#django_components.component","title":"component","text":""},{"location":"reference/django_components/#django_components.component.Component","title":"Component","text":"<pre><code>Component(\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,\n)\n</code></pre> <p>               Bases: <code>Generic[ArgsType, KwargsType, DataType, SlotsType]</code></p> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,  # noqa F811\n):\n    # When user first instantiates the component class before calling\n    # `render` or `render_to_response`, then we want to allow the render\n    # function to make use of the instantiated object.\n    #\n    # So while `MyComp.render()` creates a new instance of MyComp internally,\n    # if we do `MyComp(registered_name=\"abc\").render()`, then we use the\n    # already-instantiated object.\n    #\n    # To achieve that, we want to re-assign the class methods as instance methods.\n    # For that we have to \"unwrap\" the class methods via __func__.\n    # See https://stackoverflow.com/a/76706399/9788634\n    self.render_to_response = types.MethodType(self.__class__.render_to_response.__func__, self)  # type: ignore\n    self.render = types.MethodType(self.__class__.render.__func__, self)  # type: ignore\n\n    self.registered_name: Optional[str] = registered_name\n    self.outer_context: Context = outer_context or Context()\n    self.fill_content = fill_content or {}\n    self.component_id = component_id or gen_id()\n    self.registry = registry or registry_\n    self._render_stack: Deque[RenderInput[ArgsType, KwargsType, SlotsType]] = deque()\n    # None == uninitialized, False == No types, Tuple == types\n    self._types: Optional[Union[Tuple[Any, Any, Any, Any], Literal[False]]] = None\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.Media","title":"Media  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Media = ComponentMediaInput\n</code></pre> <p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/#django_components.component.Component.css","title":"css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>css: Optional[str] = None\n</code></pre> <p>Inlined CSS associated with this component.</p>"},{"location":"reference/django_components/#django_components.component.Component.input","title":"input  <code>property</code>","text":"<pre><code>input: RenderInput[ArgsType, KwargsType, SlotsType]\n</code></pre> <p>Input holds the data (like arg, kwargs, slots) that were passsed to the current execution of the <code>render</code> method.</p>"},{"location":"reference/django_components/#django_components.component.Component.js","title":"js  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>js: Optional[str] = None\n</code></pre> <p>Inlined JS associated with this component.</p>"},{"location":"reference/django_components/#django_components.component.Component.media","title":"media  <code>instance-attribute</code>","text":"<pre><code>media: Media\n</code></pre> <p>Normalized definition of JS and CSS media files associated with this component.</p> <p>NOTE: This field is generated from Component.Media class.</p>"},{"location":"reference/django_components/#django_components.component.Component.response_class","title":"response_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>response_class = HttpResponse\n</code></pre> <p>This allows to configure what class is used to generate response from <code>render_to_response</code></p>"},{"location":"reference/django_components/#django_components.component.Component.template","title":"template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template: Optional[str] = None\n</code></pre> <p>Inlined Django template associated with this component.</p>"},{"location":"reference/django_components/#django_components.component.Component.template_name","title":"template_name  <code>class-attribute</code>","text":"<pre><code>template_name: Optional[str] = None\n</code></pre> <p>Relative filepath to the Django template associated with this component.</p>"},{"location":"reference/django_components/#django_components.component.Component.as_view","title":"as_view  <code>classmethod</code>","text":"<pre><code>as_view(**initkwargs: Any) -&gt; ViewFn\n</code></pre> <p>Shortcut for calling <code>Component.View.as_view</code> and passing component instance to it.</p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef as_view(cls, **initkwargs: Any) -&gt; ViewFn:\n    \"\"\"\n    Shortcut for calling `Component.View.as_view` and passing component instance to it.\n    \"\"\"\n    # Allow the View class to access this component via `self.component`\n    component = cls()\n    return component.View.as_view(**initkwargs, component=component)\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.inject","title":"inject","text":"<pre><code>inject(key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Use this method to retrieve the data that was passed to a <code>{% provide %}</code> tag with the corresponding key.</p> <p>To retrieve the data, <code>inject()</code> must be called inside a component that's inside the <code>{% provide %}</code> tag.</p> <p>You may also pass a default that will be used if the <code>provide</code> tag with given key was NOT found.</p> <p>This method mut be used inside the <code>get_context_data()</code> method and raises an error if called elsewhere.</p> <p>Example:</p> <p>Given this template: <pre><code>{% provide \"provider\" hello=\"world\" %}\n    {% component \"my_comp\" %}\n    {% endcomponent %}\n{% endprovide %}\n</code></pre></p> <p>And given this definition of \"my_comp\" component: <pre><code>from django_components import Component, register\n\n@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"hi {{ data.hello }}!\"\n    def get_context_data(self):\n        data = self.inject(\"provider\")\n        return {\"data\": data}\n</code></pre></p> <p>This renders into: <pre><code>hi world!\n</code></pre></p> <p>As the <code>{{ data.hello }}</code> is taken from the \"provider\".</p> Source code in <code>src/django_components/component.py</code> <pre><code>def inject(self, key: str, default: Optional[Any] = None) -&gt; Any:\n    \"\"\"\n    Use this method to retrieve the data that was passed to a `{% provide %}` tag\n    with the corresponding key.\n\n    To retrieve the data, `inject()` must be called inside a component that's\n    inside the `{% provide %}` tag.\n\n    You may also pass a default that will be used if the `provide` tag with given\n    key was NOT found.\n\n    This method mut be used inside the `get_context_data()` method and raises\n    an error if called elsewhere.\n\n    Example:\n\n    Given this template:\n    ```django\n    {% provide \"provider\" hello=\"world\" %}\n        {% component \"my_comp\" %}\n        {% endcomponent %}\n    {% endprovide %}\n    ```\n\n    And given this definition of \"my_comp\" component:\n    ```py\n    from django_components import Component, register\n\n    @register(\"my_comp\")\n    class MyComp(Component):\n        template = \"hi {{ data.hello }}!\"\n        def get_context_data(self):\n            data = self.inject(\"provider\")\n            return {\"data\": data}\n    ```\n\n    This renders into:\n    ```\n    hi world!\n    ```\n\n    As the `{{ data.hello }}` is taken from the \"provider\".\n    \"\"\"\n    if self.input is None:\n        raise RuntimeError(\n            f\"Method 'inject()' of component '{self.name}' was called outside of 'get_context_data()'\"\n        )\n\n    return get_injected_context_var(self.name, self.input.context, key, default)\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.on_render_after","title":"on_render_after","text":"<pre><code>on_render_after(context: Context, template: Template, content: str) -&gt; Optional[SlotResult]\n</code></pre> <p>Hook that runs just after the component's template was rendered. It receives the rendered output as the last argument.</p> <p>You can use this hook to access the context or the template, but modifying them won't have any effect.</p> <p>To override the content that gets rendered, you can return a string or SafeString from this hook.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_after(self, context: Context, template: Template, content: str) -&gt; Optional[SlotResult]:\n    \"\"\"\n    Hook that runs just after the component's template was rendered.\n    It receives the rendered output as the last argument.\n\n    You can use this hook to access the context or the template, but modifying\n    them won't have any effect.\n\n    To override the content that gets rendered, you can return a string or SafeString\n    from this hook.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.on_render_before","title":"on_render_before","text":"<pre><code>on_render_before(context: Context, template: Template) -&gt; None\n</code></pre> <p>Hook that runs just before the component's template is rendered.</p> <p>You can use this hook to access or modify the context or the template.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_before(self, context: Context, template: Template) -&gt; None:\n    \"\"\"\n    Hook that runs just before the component's template is rendered.\n\n    You can use this hook to access or modify the context or the template.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.render","title":"render  <code>classmethod</code>","text":"<pre><code>render(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str\n</code></pre> <p>Render the component into a string.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Example: <pre><code>MyComponent.render(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str:\n    \"\"\"\n    Render the component into a string.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Example:\n    ```py\n    MyComponent.render(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n    )\n    ```\n    \"\"\"\n    # This method may be called as class method or as instance method.\n    # If called as class method, create a new instance.\n    if isinstance(cls, Component):\n        comp: Component = cls\n    else:\n        comp = cls()\n\n    return comp._render(context, args, kwargs, slots, escape_slots_content)\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.render_css_dependencies","title":"render_css_dependencies","text":"<pre><code>render_css_dependencies() -&gt; SafeString\n</code></pre> <p>Render only CSS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_css_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only CSS dependencies available in the media class or provided as a string.\"\"\"\n    if self.css is not None:\n        return mark_safe(f\"&lt;style&gt;{self.css}&lt;/style&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_css()))\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.render_dependencies","title":"render_dependencies","text":"<pre><code>render_dependencies() -&gt; SafeString\n</code></pre> <p>Helper function to render all dependencies for a component.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_dependencies(self) -&gt; SafeString:\n    \"\"\"Helper function to render all dependencies for a component.\"\"\"\n    dependencies = []\n\n    css_deps = self.render_css_dependencies()\n    if css_deps:\n        dependencies.append(css_deps)\n\n    js_deps = self.render_js_dependencies()\n    if js_deps:\n        dependencies.append(js_deps)\n\n    return mark_safe(\"\\n\".join(dependencies))\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.render_js_dependencies","title":"render_js_dependencies","text":"<pre><code>render_js_dependencies() -&gt; SafeString\n</code></pre> <p>Render only JS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_js_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only JS dependencies available in the media class or provided as a string.\"\"\"\n    if self.js is not None:\n        return mark_safe(f\"&lt;script&gt;{self.js}&lt;/script&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_js()))\n</code></pre>"},{"location":"reference/django_components/#django_components.component.Component.render_to_response","title":"render_to_response  <code>classmethod</code>","text":"<pre><code>render_to_response(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any\n) -&gt; HttpResponse\n</code></pre> <p>Render the component and wrap the content in the response class.</p> <p>The response class is taken from <code>Component.response_class</code>. Defaults to <code>django.http.HttpResponse</code>.</p> <p>This is the interface for the <code>django.views.View</code> class which allows us to use components as Django views with <code>component.as_view()</code>.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Any additional args and kwargs are passed to the <code>response_class</code>.</p> <p>Example: <pre><code>MyComponent.render_to_response(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n    # HttpResponse input\n    status=201,\n    headers={...},\n)\n# HttpResponse(content=..., status=201, headers=...)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render_to_response(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any,\n) -&gt; HttpResponse:\n    \"\"\"\n    Render the component and wrap the content in the response class.\n\n    The response class is taken from `Component.response_class`. Defaults to `django.http.HttpResponse`.\n\n    This is the interface for the `django.views.View` class which allows us to\n    use components as Django views with `component.as_view()`.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Any additional args and kwargs are passed to the `response_class`.\n\n    Example:\n    ```py\n    MyComponent.render_to_response(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n        # HttpResponse input\n        status=201,\n        headers={...},\n    )\n    # HttpResponse(content=..., status=201, headers=...)\n    ```\n    \"\"\"\n    content = cls.render(\n        args=args,\n        kwargs=kwargs,\n        context=context,\n        slots=slots,\n        escape_slots_content=escape_slots_content,\n    )\n    return cls.response_class(content, *response_args, **response_kwargs)\n</code></pre>"},{"location":"reference/django_components/#django_components.component.ComponentNode","title":"ComponentNode","text":"<pre><code>ComponentNode(\n    name: str,\n    args: List[Expression],\n    kwargs: RuntimeKwargs,\n    registry: ComponentRegistry,\n    isolated_context: bool = False,\n    fill_nodes: Optional[List[FillNode]] = None,\n    node_id: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> <p>Django.template.Node subclass that renders a django-components component</p> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    args: List[Expression],\n    kwargs: RuntimeKwargs,\n    registry: ComponentRegistry,  # noqa F811\n    isolated_context: bool = False,\n    fill_nodes: Optional[List[FillNode]] = None,\n    node_id: Optional[str] = None,\n) -&gt; None:\n    super().__init__(nodelist=NodeList(fill_nodes), args=args, kwargs=kwargs, node_id=node_id)\n\n    self.name = name\n    self.isolated_context = isolated_context\n    self.fill_nodes = fill_nodes or []\n    self.registry = registry\n</code></pre>"},{"location":"reference/django_components/#django_components.component.ComponentView","title":"ComponentView","text":"<pre><code>ComponentView(component: Component, **kwargs: Any)\n</code></pre> <p>               Bases: <code>View</code></p> <p>Subclass of <code>django.views.View</code> where the <code>Component</code> instance is available via <code>self.component</code>.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(self, component: \"Component\", **kwargs: Any) -&gt; None:\n    super().__init__(**kwargs)\n    self.component = component\n</code></pre>"},{"location":"reference/django_components/#django_components.component_media","title":"component_media","text":""},{"location":"reference/django_components/#django_components.component_media.ComponentMediaInput","title":"ComponentMediaInput","text":"<p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/#django_components.component_media.MediaMeta","title":"MediaMeta","text":"<p>               Bases: <code>MediaDefiningClass</code></p> <p>Metaclass for handling media files for components.</p> <p>Similar to <code>MediaDefiningClass</code>, this class supports the use of <code>Media</code> attribute to define associated JS/CSS files, which are then available under <code>media</code> attribute as a instance of <code>Media</code> class.</p> <p>This subclass has following changes:</p>"},{"location":"reference/django_components/#django_components.component_media.MediaMeta--1-support-for-multiple-interfaces-of-jscss","title":"1. Support for multiple interfaces of JS/CSS","text":"<ol> <li> <p>As plain strings     <pre><code>class MyComponent(Component):\n    class Media:\n        js = \"path/to/script.js\"\n        css = \"path/to/style.css\"\n</code></pre></p> </li> <li> <p>As lists     <pre><code>class MyComponent(Component):\n    class Media:\n        js = [\"path/to/script1.js\", \"path/to/script2.js\"]\n        css = [\"path/to/style1.css\", \"path/to/style2.css\"]\n</code></pre></p> </li> <li> <p>[CSS ONLY] Dicts of strings     <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": \"path/to/style1.css\",\n            \"print\": \"path/to/style2.css\",\n        }\n</code></pre></p> </li> <li> <p>[CSS ONLY] Dicts of lists     <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": [\"path/to/style1.css\"],\n            \"print\": [\"path/to/style2.css\"],\n        }\n</code></pre></p> </li> </ol>"},{"location":"reference/django_components/#django_components.component_media.MediaMeta--2-media-are-first-resolved-relative-to-class-definition-file","title":"2. Media are first resolved relative to class definition file","text":"<p>E.g. if in a directory <code>my_comp</code> you have <code>script.js</code> and <code>my_comp.py</code>, and <code>my_comp.py</code> looks like this:</p> <pre><code>class MyComponent(Component):\n    class Media:\n        js = \"script.js\"\n</code></pre> <p>Then <code>script.js</code> will be resolved as <code>my_comp/script.js</code>.</p>"},{"location":"reference/django_components/#django_components.component_media.MediaMeta--3-media-can-be-defined-as-str-bytes-pathlike-safestring-or-function-of-thereof","title":"3. Media can be defined as str, bytes, PathLike, SafeString, or function of thereof","text":"<p>E.g.:</p> <pre><code>def lazy_eval_css():\n    # do something\n    return path\n\nclass MyComponent(Component):\n    class Media:\n        js = b\"script.js\"\n        css = lazy_eval_css\n</code></pre>"},{"location":"reference/django_components/#django_components.component_media.MediaMeta--4-subclass-media-class-with-media_class","title":"4. Subclass <code>Media</code> class with <code>media_class</code>","text":"<p>Normal <code>MediaDefiningClass</code> creates an instance of <code>Media</code> class under the <code>media</code> attribute. This class allows to override which class will be instantiated with <code>media_class</code> attribute:</p> <pre><code>class MyMedia(Media):\n    def render_js(self):\n        ...\n\nclass MyComponent(Component):\n    media_class = MyMedia\n    def get_context_data(self):\n        assert isinstance(self.media, MyMedia)\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry","title":"component_registry","text":""},{"location":"reference/django_components/#django_components.component_registry.registry","title":"registry  <code>module-attribute</code>","text":"<pre><code>registry: ComponentRegistry = ComponentRegistry()\n</code></pre> <p>The default and global component registry. Use this instance to directly register or remove components:</p> <pre><code># Register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n# Get single\nregistry.get(\"button\")\n# Get all\nregistry.all()\n# Unregister single\nregistry.unregister(\"button\")\n# Unregister all\nregistry.clear()\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry","title":"ComponentRegistry","text":"<pre><code>ComponentRegistry(\n    library: Optional[Library] = None, settings: Optional[Union[RegistrySettings, Callable[[ComponentRegistry], RegistrySettings]]] = None\n)\n</code></pre> <p>Manages which components can be used in the template tags.</p> <p>Each ComponentRegistry instance is associated with an instance of Django's Library. So when you register or unregister a component to/from a component registry, behind the scenes the registry automatically adds/removes the component's template tag to/from the Library.</p> <p>The Library instance can be set at instantiation. If omitted, then the default Library instance from django_components is used. The Library instance can be accessed under <code>library</code> attribute.</p> <p>Example:</p> <pre><code># Use with default Library\nregistry = ComponentRegistry()\n\n# Or a custom one\nmy_lib = Library()\nregistry = ComponentRegistry(library=my_lib)\n\n# Usage\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\nregistry.all()\nregistry.clear()\nregistry.get()\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def __init__(\n    self,\n    library: Optional[Library] = None,\n    settings: Optional[Union[RegistrySettings, Callable[[\"ComponentRegistry\"], RegistrySettings]]] = None,\n) -&gt; None:\n    self._registry: Dict[str, ComponentRegistryEntry] = {}  # component name -&gt; component_entry mapping\n    self._tags: Dict[str, Set[str]] = {}  # tag -&gt; list[component names]\n    self._library = library\n    self._settings_input = settings\n    self._settings: Optional[Callable[[], InternalRegistrySettings]] = None\n\n    all_registries.append(self)\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry.library","title":"library  <code>property</code>","text":"<pre><code>library: Library\n</code></pre> <p>The template tag library with which the component registry is associated.</p>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry.all","title":"all","text":"<pre><code>all() -&gt; Dict[str, Type[Component]]\n</code></pre> <p>Retrieve all registered component classes.</p> <p>Example:</p> <pre><code># First register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n# Then get all\nregistry.all()\n# &gt; {\n# &gt;   \"button\": ButtonComponent,\n# &gt;   \"card\": CardComponent,\n# &gt; }\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def all(self) -&gt; Dict[str, Type[\"Component\"]]:\n    \"\"\"\n    Retrieve all registered component classes.\n\n    Example:\n\n    ```py\n    # First register components\n    registry.register(\"button\", ButtonComponent)\n    registry.register(\"card\", CardComponent)\n    # Then get all\n    registry.all()\n    # &gt; {\n    # &gt;   \"button\": ButtonComponent,\n    # &gt;   \"card\": CardComponent,\n    # &gt; }\n    ```\n    \"\"\"\n    comps = {key: entry.cls for key, entry in self._registry.items()}\n    return comps\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clears the registry, unregistering all components.</p> <p>Example:</p> <pre><code># First register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n# Then clear\nregistry.clear()\n# Then get all\nregistry.all()\n# &gt; {}\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    Clears the registry, unregistering all components.\n\n    Example:\n\n    ```py\n    # First register components\n    registry.register(\"button\", ButtonComponent)\n    registry.register(\"card\", CardComponent)\n    # Then clear\n    registry.clear()\n    # Then get all\n    registry.all()\n    # &gt; {}\n    ```\n    \"\"\"\n    all_comp_names = list(self._registry.keys())\n    for comp_name in all_comp_names:\n        self.unregister(comp_name)\n\n    self._registry = {}\n    self._tags = {}\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry.get","title":"get","text":"<pre><code>get(name: str) -&gt; Type[Component]\n</code></pre> <p>Retrieve a component class registered under the given name.</p> <p>Raises <code>NotRegistered</code> if the given name is not registered.</p> <p>Example:</p> <pre><code># First register component\nregistry.register(\"button\", ButtonComponent)\n# Then get\nregistry.get(\"button\")\n# &gt; ButtonComponent\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def get(self, name: str) -&gt; Type[\"Component\"]:\n    \"\"\"\n    Retrieve a component class registered under the given name.\n\n    Raises `NotRegistered` if the given name is not registered.\n\n    Example:\n\n    ```py\n    # First register component\n    registry.register(\"button\", ButtonComponent)\n    # Then get\n    registry.get(\"button\")\n    # &gt; ButtonComponent\n    ```\n    \"\"\"\n    if name not in self._registry:\n        raise NotRegistered('The component \"%s\" is not registered' % name)\n\n    return self._registry[name].cls\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry.register","title":"register","text":"<pre><code>register(name: str, component: Type[Component]) -&gt; None\n</code></pre> <p>Register a component with this registry under the given name.</p> <p>A component MUST be registered before it can be used in a template such as: <pre><code>{% component \"my_comp\" %}{% endcomponent %}\n</code></pre></p> <p>Raises <code>AlreadyRegistered</code> if a different component was already registered under the same name.</p> <p>Example:</p> <pre><code>registry.register(\"button\", ButtonComponent)\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def register(self, name: str, component: Type[\"Component\"]) -&gt; None:\n    \"\"\"\n    Register a component with this registry under the given name.\n\n    A component MUST be registered before it can be used in a template such as:\n    ```django\n    {% component \"my_comp\" %}{% endcomponent %}\n    ```\n\n    Raises `AlreadyRegistered` if a different component was already registered\n    under the same name.\n\n    Example:\n\n    ```py\n    registry.register(\"button\", ButtonComponent)\n    ```\n    \"\"\"\n    existing_component = self._registry.get(name)\n    if existing_component and existing_component.cls._class_hash != component._class_hash:\n        raise AlreadyRegistered('The component \"%s\" has already been registered' % name)\n\n    entry = self._register_to_library(name, component)\n\n    # Keep track of which components use which tags, because multiple components may\n    # use the same tag.\n    tag = entry.tag\n    if tag not in self._tags:\n        self._tags[tag] = set()\n    self._tags[tag].add(name)\n\n    self._registry[name] = entry\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.ComponentRegistry.unregister","title":"unregister","text":"<pre><code>unregister(name: str) -&gt; None\n</code></pre> <p>Unlinks a previously-registered component from the registry under the given name.</p> <p>Once a component is unregistered, it CANNOT be used in a template anymore. Following would raise an error: <pre><code>{% component \"my_comp\" %}{% endcomponent %}\n</code></pre></p> <p>Raises <code>NotRegistered</code> if the given name is not registered.</p> <p>Example:</p> <pre><code># First register component\nregistry.register(\"button\", ButtonComponent)\n# Then unregister\nregistry.unregister(\"button\")\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def unregister(self, name: str) -&gt; None:\n    \"\"\"\n    Unlinks a previously-registered component from the registry under the given name.\n\n    Once a component is unregistered, it CANNOT be used in a template anymore.\n    Following would raise an error:\n    ```django\n    {% component \"my_comp\" %}{% endcomponent %}\n    ```\n\n    Raises `NotRegistered` if the given name is not registered.\n\n    Example:\n\n    ```py\n    # First register component\n    registry.register(\"button\", ButtonComponent)\n    # Then unregister\n    registry.unregister(\"button\")\n    ```\n    \"\"\"\n    # Validate\n    self.get(name)\n\n    entry = self._registry[name]\n    tag = entry.tag\n\n    # Unregister the tag from library if this was the last component using this tag\n    # Unlink component from tag\n    self._tags[tag].remove(name)\n\n    # Cleanup\n    is_tag_empty = not len(self._tags[tag])\n    if is_tag_empty:\n        del self._tags[tag]\n\n    # Only unregister a tag if it's NOT protected\n    is_protected = is_tag_protected(self.library, tag)\n    if not is_protected:\n        # Unregister the tag from library if this was the last component using this tag\n        if is_tag_empty and tag in self.library.tags:\n            del self.library.tags[tag]\n\n    del self._registry[name]\n</code></pre>"},{"location":"reference/django_components/#django_components.component_registry.register","title":"register","text":"<pre><code>register(name: str, registry: Optional[ComponentRegistry] = None) -&gt; Callable[[_TComp], _TComp]\n</code></pre> <p>Class decorator to register a component.</p> <p>Usage:</p> <pre><code>@register(\"my_component\")\nclass MyComponent(Component):\n    ...\n</code></pre> <p>Optionally specify which <code>ComponentRegistry</code> the component should be registered to by setting the <code>registry</code> kwarg:</p> <pre><code>my_lib = django.template.Library()\nmy_reg = ComponentRegistry(library=my_lib)\n\n@register(\"my_component\", registry=my_reg)\nclass MyComponent(Component):\n    ...\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def register(name: str, registry: Optional[ComponentRegistry] = None) -&gt; Callable[[_TComp], _TComp]:\n    \"\"\"\n    Class decorator to register a component.\n\n    Usage:\n\n    ```py\n    @register(\"my_component\")\n    class MyComponent(Component):\n        ...\n    ```\n\n    Optionally specify which `ComponentRegistry` the component should be registered to by\n    setting the `registry` kwarg:\n\n    ```py\n    my_lib = django.template.Library()\n    my_reg = ComponentRegistry(library=my_lib)\n\n    @register(\"my_component\", registry=my_reg)\n    class MyComponent(Component):\n        ...\n    ```\n    \"\"\"\n    if registry is None:\n        registry = _the_registry\n\n    def decorator(component: _TComp) -&gt; _TComp:\n        registry.register(name=name, component=component)\n        return component\n\n    return decorator\n</code></pre>"},{"location":"reference/django_components/#django_components.components","title":"components","text":""},{"location":"reference/django_components/#django_components.components.dynamic","title":"dynamic","text":""},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent","title":"DynamicComponent","text":"<pre><code>DynamicComponent(\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,\n)\n</code></pre> <p>               Bases: <code>Component</code></p> <p>Dynamic component - This component takes inputs and renders the outputs depending on the <code>is</code> and <code>registry</code> arguments.</p> <ul> <li> <p><code>is</code> - required - The component class or registered name of the component that will be rendered in this place.</p> </li> <li> <p><code>registry</code> - optional - Specify the registry to search for the registered name. If omitted, all registries are searched.</p> </li> </ul> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,  # noqa F811\n):\n    # When user first instantiates the component class before calling\n    # `render` or `render_to_response`, then we want to allow the render\n    # function to make use of the instantiated object.\n    #\n    # So while `MyComp.render()` creates a new instance of MyComp internally,\n    # if we do `MyComp(registered_name=\"abc\").render()`, then we use the\n    # already-instantiated object.\n    #\n    # To achieve that, we want to re-assign the class methods as instance methods.\n    # For that we have to \"unwrap\" the class methods via __func__.\n    # See https://stackoverflow.com/a/76706399/9788634\n    self.render_to_response = types.MethodType(self.__class__.render_to_response.__func__, self)  # type: ignore\n    self.render = types.MethodType(self.__class__.render.__func__, self)  # type: ignore\n\n    self.registered_name: Optional[str] = registered_name\n    self.outer_context: Context = outer_context or Context()\n    self.fill_content = fill_content or {}\n    self.component_id = component_id or gen_id()\n    self.registry = registry or registry_\n    self._render_stack: Deque[RenderInput[ArgsType, KwargsType, SlotsType]] = deque()\n    # None == uninitialized, False == No types, Tuple == types\n    self._types: Optional[Union[Tuple[Any, Any, Any, Any], Literal[False]]] = None\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.Media","title":"Media  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Media = ComponentMediaInput\n</code></pre> <p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.css","title":"css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>css: Optional[str] = None\n</code></pre> <p>Inlined CSS associated with this component.</p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.input","title":"input  <code>property</code>","text":"<pre><code>input: RenderInput[ArgsType, KwargsType, SlotsType]\n</code></pre> <p>Input holds the data (like arg, kwargs, slots) that were passsed to the current execution of the <code>render</code> method.</p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.js","title":"js  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>js: Optional[str] = None\n</code></pre> <p>Inlined JS associated with this component.</p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.media","title":"media  <code>instance-attribute</code>","text":"<pre><code>media: Media\n</code></pre> <p>Normalized definition of JS and CSS media files associated with this component.</p> <p>NOTE: This field is generated from Component.Media class.</p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.response_class","title":"response_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>response_class = HttpResponse\n</code></pre> <p>This allows to configure what class is used to generate response from <code>render_to_response</code></p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.template_name","title":"template_name  <code>class-attribute</code>","text":"<pre><code>template_name: Optional[str] = None\n</code></pre> <p>Relative filepath to the Django template associated with this component.</p>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.as_view","title":"as_view  <code>classmethod</code>","text":"<pre><code>as_view(**initkwargs: Any) -&gt; ViewFn\n</code></pre> <p>Shortcut for calling <code>Component.View.as_view</code> and passing component instance to it.</p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef as_view(cls, **initkwargs: Any) -&gt; ViewFn:\n    \"\"\"\n    Shortcut for calling `Component.View.as_view` and passing component instance to it.\n    \"\"\"\n    # Allow the View class to access this component via `self.component`\n    component = cls()\n    return component.View.as_view(**initkwargs, component=component)\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.inject","title":"inject","text":"<pre><code>inject(key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Use this method to retrieve the data that was passed to a <code>{% provide %}</code> tag with the corresponding key.</p> <p>To retrieve the data, <code>inject()</code> must be called inside a component that's inside the <code>{% provide %}</code> tag.</p> <p>You may also pass a default that will be used if the <code>provide</code> tag with given key was NOT found.</p> <p>This method mut be used inside the <code>get_context_data()</code> method and raises an error if called elsewhere.</p> <p>Example:</p> <p>Given this template: <pre><code>{% provide \"provider\" hello=\"world\" %}\n    {% component \"my_comp\" %}\n    {% endcomponent %}\n{% endprovide %}\n</code></pre></p> <p>And given this definition of \"my_comp\" component: <pre><code>from django_components import Component, register\n\n@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"hi {{ data.hello }}!\"\n    def get_context_data(self):\n        data = self.inject(\"provider\")\n        return {\"data\": data}\n</code></pre></p> <p>This renders into: <pre><code>hi world!\n</code></pre></p> <p>As the <code>{{ data.hello }}</code> is taken from the \"provider\".</p> Source code in <code>src/django_components/component.py</code> <pre><code>def inject(self, key: str, default: Optional[Any] = None) -&gt; Any:\n    \"\"\"\n    Use this method to retrieve the data that was passed to a `{% provide %}` tag\n    with the corresponding key.\n\n    To retrieve the data, `inject()` must be called inside a component that's\n    inside the `{% provide %}` tag.\n\n    You may also pass a default that will be used if the `provide` tag with given\n    key was NOT found.\n\n    This method mut be used inside the `get_context_data()` method and raises\n    an error if called elsewhere.\n\n    Example:\n\n    Given this template:\n    ```django\n    {% provide \"provider\" hello=\"world\" %}\n        {% component \"my_comp\" %}\n        {% endcomponent %}\n    {% endprovide %}\n    ```\n\n    And given this definition of \"my_comp\" component:\n    ```py\n    from django_components import Component, register\n\n    @register(\"my_comp\")\n    class MyComp(Component):\n        template = \"hi {{ data.hello }}!\"\n        def get_context_data(self):\n            data = self.inject(\"provider\")\n            return {\"data\": data}\n    ```\n\n    This renders into:\n    ```\n    hi world!\n    ```\n\n    As the `{{ data.hello }}` is taken from the \"provider\".\n    \"\"\"\n    if self.input is None:\n        raise RuntimeError(\n            f\"Method 'inject()' of component '{self.name}' was called outside of 'get_context_data()'\"\n        )\n\n    return get_injected_context_var(self.name, self.input.context, key, default)\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.on_render_after","title":"on_render_after","text":"<pre><code>on_render_after(context: Context, template: Template, content: str) -&gt; Optional[SlotResult]\n</code></pre> <p>Hook that runs just after the component's template was rendered. It receives the rendered output as the last argument.</p> <p>You can use this hook to access the context or the template, but modifying them won't have any effect.</p> <p>To override the content that gets rendered, you can return a string or SafeString from this hook.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_after(self, context: Context, template: Template, content: str) -&gt; Optional[SlotResult]:\n    \"\"\"\n    Hook that runs just after the component's template was rendered.\n    It receives the rendered output as the last argument.\n\n    You can use this hook to access the context or the template, but modifying\n    them won't have any effect.\n\n    To override the content that gets rendered, you can return a string or SafeString\n    from this hook.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.on_render_before","title":"on_render_before","text":"<pre><code>on_render_before(context: Context, template: Template) -&gt; None\n</code></pre> <p>Hook that runs just before the component's template is rendered.</p> <p>You can use this hook to access or modify the context or the template.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_before(self, context: Context, template: Template) -&gt; None:\n    \"\"\"\n    Hook that runs just before the component's template is rendered.\n\n    You can use this hook to access or modify the context or the template.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.render","title":"render  <code>classmethod</code>","text":"<pre><code>render(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str\n</code></pre> <p>Render the component into a string.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Example: <pre><code>MyComponent.render(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str:\n    \"\"\"\n    Render the component into a string.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Example:\n    ```py\n    MyComponent.render(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n    )\n    ```\n    \"\"\"\n    # This method may be called as class method or as instance method.\n    # If called as class method, create a new instance.\n    if isinstance(cls, Component):\n        comp: Component = cls\n    else:\n        comp = cls()\n\n    return comp._render(context, args, kwargs, slots, escape_slots_content)\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.render_css_dependencies","title":"render_css_dependencies","text":"<pre><code>render_css_dependencies() -&gt; SafeString\n</code></pre> <p>Render only CSS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_css_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only CSS dependencies available in the media class or provided as a string.\"\"\"\n    if self.css is not None:\n        return mark_safe(f\"&lt;style&gt;{self.css}&lt;/style&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_css()))\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.render_dependencies","title":"render_dependencies","text":"<pre><code>render_dependencies() -&gt; SafeString\n</code></pre> <p>Helper function to render all dependencies for a component.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_dependencies(self) -&gt; SafeString:\n    \"\"\"Helper function to render all dependencies for a component.\"\"\"\n    dependencies = []\n\n    css_deps = self.render_css_dependencies()\n    if css_deps:\n        dependencies.append(css_deps)\n\n    js_deps = self.render_js_dependencies()\n    if js_deps:\n        dependencies.append(js_deps)\n\n    return mark_safe(\"\\n\".join(dependencies))\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.render_js_dependencies","title":"render_js_dependencies","text":"<pre><code>render_js_dependencies() -&gt; SafeString\n</code></pre> <p>Render only JS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_js_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only JS dependencies available in the media class or provided as a string.\"\"\"\n    if self.js is not None:\n        return mark_safe(f\"&lt;script&gt;{self.js}&lt;/script&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_js()))\n</code></pre>"},{"location":"reference/django_components/#django_components.components.dynamic.DynamicComponent.render_to_response","title":"render_to_response  <code>classmethod</code>","text":"<pre><code>render_to_response(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any\n) -&gt; HttpResponse\n</code></pre> <p>Render the component and wrap the content in the response class.</p> <p>The response class is taken from <code>Component.response_class</code>. Defaults to <code>django.http.HttpResponse</code>.</p> <p>This is the interface for the <code>django.views.View</code> class which allows us to use components as Django views with <code>component.as_view()</code>.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Any additional args and kwargs are passed to the <code>response_class</code>.</p> <p>Example: <pre><code>MyComponent.render_to_response(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n    # HttpResponse input\n    status=201,\n    headers={...},\n)\n# HttpResponse(content=..., status=201, headers=...)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render_to_response(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any,\n) -&gt; HttpResponse:\n    \"\"\"\n    Render the component and wrap the content in the response class.\n\n    The response class is taken from `Component.response_class`. Defaults to `django.http.HttpResponse`.\n\n    This is the interface for the `django.views.View` class which allows us to\n    use components as Django views with `component.as_view()`.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Any additional args and kwargs are passed to the `response_class`.\n\n    Example:\n    ```py\n    MyComponent.render_to_response(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n        # HttpResponse input\n        status=201,\n        headers={...},\n    )\n    # HttpResponse(content=..., status=201, headers=...)\n    ```\n    \"\"\"\n    content = cls.render(\n        args=args,\n        kwargs=kwargs,\n        context=context,\n        slots=slots,\n        escape_slots_content=escape_slots_content,\n    )\n    return cls.response_class(content, *response_args, **response_kwargs)\n</code></pre>"},{"location":"reference/django_components/#django_components.context","title":"context","text":"<p>This file centralizes various ways we use Django's Context class pass data across components, nodes, slots, and contexts.</p> <p>You can think of the Context as our storage system.</p>"},{"location":"reference/django_components/#django_components.context.copy_forloop_context","title":"copy_forloop_context","text":"<pre><code>copy_forloop_context(from_context: Context, to_context: Context) -&gt; None\n</code></pre> <p>Forward the info about the current loop</p> Source code in <code>src/django_components/context.py</code> <pre><code>def copy_forloop_context(from_context: Context, to_context: Context) -&gt; None:\n    \"\"\"Forward the info about the current loop\"\"\"\n    # Note that the ForNode (which implements for loop behavior) does not\n    # only add the `forloop` key, but also keys corresponding to the loop elements\n    # So if the loop syntax is `{% for my_val in my_lists %}`, then ForNode also\n    # sets a `my_val` key.\n    # For this reason, instead of copying individual keys, we copy the whole stack layer\n    # set by ForNode.\n    if \"forloop\" in from_context:\n        forloop_dict_index = find_last_index(from_context.dicts, lambda d: \"forloop\" in d)\n        to_context.update(from_context.dicts[forloop_dict_index])\n</code></pre>"},{"location":"reference/django_components/#django_components.context.get_injected_context_var","title":"get_injected_context_var","text":"<pre><code>get_injected_context_var(component_name: str, context: Context, key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Retrieve a 'provided' field. The field MUST have been previously 'provided' by the component's ancestors using the <code>{% provide %}</code> template tag.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def get_injected_context_var(\n    component_name: str,\n    context: Context,\n    key: str,\n    default: Optional[Any] = None,\n) -&gt; Any:\n    \"\"\"\n    Retrieve a 'provided' field. The field MUST have been previously 'provided'\n    by the component's ancestors using the `{% provide %}` template tag.\n    \"\"\"\n    # NOTE: For simplicity, we keep the provided values directly on the context.\n    # This plays nicely with Django's Context, which behaves like a stack, so \"newer\"\n    # values overshadow the \"older\" ones.\n    internal_key = _INJECT_CONTEXT_KEY_PREFIX + key\n\n    # Return provided value if found\n    if internal_key in context:\n        return context[internal_key]\n\n    # If a default was given, return that\n    if default is not None:\n        return default\n\n    # Otherwise raise error\n    raise KeyError(\n        f\"Component '{component_name}' tried to inject a variable '{key}' before it was provided.\"\n        f\" To fix this, make sure that at least one ancestor of component '{component_name}' has\"\n        f\" the variable '{key}' in their 'provide' attribute.\"\n    )\n</code></pre>"},{"location":"reference/django_components/#django_components.context.prepare_context","title":"prepare_context","text":"<pre><code>prepare_context(context: Context, component_id: str) -&gt; None\n</code></pre> <p>Initialize the internal context state.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def prepare_context(\n    context: Context,\n    component_id: str,\n) -&gt; None:\n    \"\"\"Initialize the internal context state.\"\"\"\n    # Initialize mapping dicts within this rendering run.\n    # This is shared across the whole render chain, thus we set it only once.\n    if _FILLED_SLOTS_CONTENT_CONTEXT_KEY not in context:\n        context[_FILLED_SLOTS_CONTENT_CONTEXT_KEY] = {}\n\n    set_component_id(context, component_id)\n</code></pre>"},{"location":"reference/django_components/#django_components.context.set_component_id","title":"set_component_id","text":"<pre><code>set_component_id(context: Context, component_id: str) -&gt; None\n</code></pre> <p>We use the Context object to pass down info on inside of which component we are currently rendering.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def set_component_id(context: Context, component_id: str) -&gt; None:\n    \"\"\"\n    We use the Context object to pass down info on inside of which component\n    we are currently rendering.\n    \"\"\"\n    # Store the previous component so we can detect if the current component\n    # is the top-most or not. If it is, then \"_parent_component_id\" is None\n    context[_PARENT_COMP_CONTEXT_KEY] = context.get(_CURRENT_COMP_CONTEXT_KEY, None)\n    context[_CURRENT_COMP_CONTEXT_KEY] = component_id\n</code></pre>"},{"location":"reference/django_components/#django_components.context.set_provided_context_var","title":"set_provided_context_var","text":"<pre><code>set_provided_context_var(context: Context, key: str, provided_kwargs: Dict[str, Any]) -&gt; None\n</code></pre> <p>'Provide' given data under given key. In other words, this data can be retrieved using <code>self.inject(key)</code> inside of <code>get_context_data()</code> method of components that are nested inside the <code>{% provide %}</code> tag.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def set_provided_context_var(\n    context: Context,\n    key: str,\n    provided_kwargs: Dict[str, Any],\n) -&gt; None:\n    \"\"\"\n    'Provide' given data under given key. In other words, this data can be retrieved\n    using `self.inject(key)` inside of `get_context_data()` method of components that\n    are nested inside the `{% provide %}` tag.\n    \"\"\"\n    # NOTE: We raise TemplateSyntaxError since this func should be called only from\n    # within template.\n    if not key:\n        raise TemplateSyntaxError(\n            \"Provide tag received an empty string. Key must be non-empty and a valid identifier.\"\n        )\n    if not key.isidentifier():\n        raise TemplateSyntaxError(\n            \"Provide tag received a non-identifier string. Key must be non-empty and a valid identifier.\"\n        )\n\n    # We turn the kwargs into a NamedTuple so that the object that's \"provided\"\n    # is immutable. This ensures that the data returned from `inject` will always\n    # have all the keys that were passed to the `provide` tag.\n    tpl_cls = namedtuple(\"DepInject\", provided_kwargs.keys())  # type: ignore[misc]\n    payload = tpl_cls(**provided_kwargs)\n\n    internal_key = _INJECT_CONTEXT_KEY_PREFIX + key\n    context[internal_key] = payload\n</code></pre>"},{"location":"reference/django_components/#django_components.expression","title":"expression","text":""},{"location":"reference/django_components/#django_components.expression.Operator","title":"Operator","text":"<p>               Bases: <code>ABC</code></p> <p>Operator describes something that somehow changes the inputs to template tags (the <code>{% %}</code>).</p> <p>For example, a SpreadOperator inserts one or more kwargs at the specified location.</p>"},{"location":"reference/django_components/#django_components.expression.SpreadOperator","title":"SpreadOperator","text":"<pre><code>SpreadOperator(expr: Expression)\n</code></pre> <p>               Bases: <code>Operator</code></p> <p>Operator that inserts one or more kwargs at the specified location.</p> Source code in <code>src/django_components/expression.py</code> <pre><code>def __init__(self, expr: Expression) -&gt; None:\n    self.expr = expr\n</code></pre>"},{"location":"reference/django_components/#django_components.expression.process_aggregate_kwargs","title":"process_aggregate_kwargs","text":"<pre><code>process_aggregate_kwargs(kwargs: Mapping[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>This function aggregates \"prefixed\" kwargs into dicts. \"Prefixed\" kwargs start with some prefix delimited with <code>:</code> (e.g. <code>attrs:</code>).</p> <p>Example: <pre><code>process_component_kwargs({\"abc:one\": 1, \"abc:two\": 2, \"def:three\": 3, \"four\": 4})\n# {\"abc\": {\"one\": 1, \"two\": 2}, \"def\": {\"three\": 3}, \"four\": 4}\n</code></pre></p> <p>We want to support a use case similar to Vue's fallthrough attributes. In other words, where a component author can designate a prop (input) which is a dict and which will be rendered as HTML attributes.</p> <p>This is useful for allowing component users to tweak styling or add event handling to the underlying HTML. E.g.:</p> <p><code>class=\"pa-4 d-flex text-black\"</code> or <code>@click.stop=\"alert('clicked!')\"</code></p> <p>So if the prop is <code>attrs</code>, and the component is called like so: <pre><code>{% component \"my_comp\" attrs=attrs %}\n</code></pre></p> <p>then, if <code>attrs</code> is: <pre><code>{\"class\": \"text-red pa-4\", \"@click\": \"dispatch('my_event', 123)\"}\n</code></pre></p> <p>and the component template is: <pre><code>&lt;div {% html_attrs attrs add:class=\"extra-class\" %}&gt;&lt;/div&gt;\n</code></pre></p> <p>Then this renders: <pre><code>&lt;div class=\"text-red pa-4 extra-class\" @click=\"dispatch('my_event', 123)\" &gt;&lt;/div&gt;\n</code></pre></p> <p>However, this way it is difficult for the component user to define the <code>attrs</code> variable, especially if they want to combine static and dynamic values. Because they will need to pre-process the <code>attrs</code> dict.</p> <p>So, instead, we allow to \"aggregate\" props into a dict. So all props that start with <code>attrs:</code>, like <code>attrs:class=\"text-red\"</code>, will be collected into a dict at key <code>attrs</code>.</p> <p>This provides sufficient flexiblity to make it easy for component users to provide \"fallthrough attributes\", and sufficiently easy for component authors to process that input while still being able to provide their own keys.</p> Source code in <code>src/django_components/expression.py</code> <pre><code>def process_aggregate_kwargs(kwargs: Mapping[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    This function aggregates \"prefixed\" kwargs into dicts. \"Prefixed\" kwargs\n    start with some prefix delimited with `:` (e.g. `attrs:`).\n\n    Example:\n    ```py\n    process_component_kwargs({\"abc:one\": 1, \"abc:two\": 2, \"def:three\": 3, \"four\": 4})\n    # {\"abc\": {\"one\": 1, \"two\": 2}, \"def\": {\"three\": 3}, \"four\": 4}\n    ```\n\n    ---\n\n    We want to support a use case similar to Vue's fallthrough attributes.\n    In other words, where a component author can designate a prop (input)\n    which is a dict and which will be rendered as HTML attributes.\n\n    This is useful for allowing component users to tweak styling or add\n    event handling to the underlying HTML. E.g.:\n\n    `class=\"pa-4 d-flex text-black\"` or `@click.stop=\"alert('clicked!')\"`\n\n    So if the prop is `attrs`, and the component is called like so:\n    ```django\n    {% component \"my_comp\" attrs=attrs %}\n    ```\n\n    then, if `attrs` is:\n    ```py\n    {\"class\": \"text-red pa-4\", \"@click\": \"dispatch('my_event', 123)\"}\n    ```\n\n    and the component template is:\n    ```django\n    &lt;div {% html_attrs attrs add:class=\"extra-class\" %}&gt;&lt;/div&gt;\n    ```\n\n    Then this renders:\n    ```html\n    &lt;div class=\"text-red pa-4 extra-class\" @click=\"dispatch('my_event', 123)\" &gt;&lt;/div&gt;\n    ```\n\n    However, this way it is difficult for the component user to define the `attrs`\n    variable, especially if they want to combine static and dynamic values. Because\n    they will need to pre-process the `attrs` dict.\n\n    So, instead, we allow to \"aggregate\" props into a dict. So all props that start\n    with `attrs:`, like `attrs:class=\"text-red\"`, will be collected into a dict\n    at key `attrs`.\n\n    This provides sufficient flexiblity to make it easy for component users to provide\n    \"fallthrough attributes\", and sufficiently easy for component authors to process\n    that input while still being able to provide their own keys.\n    \"\"\"\n    processed_kwargs = {}\n    nested_kwargs: Dict[str, Dict[str, Any]] = {}\n    for key, val in kwargs.items():\n        if not is_aggregate_key(key):\n            processed_kwargs[key] = val\n            continue\n\n        # NOTE: Trim off the prefix from keys\n        prefix, sub_key = key.split(\":\", 1)\n        if prefix not in nested_kwargs:\n            nested_kwargs[prefix] = {}\n        nested_kwargs[prefix][sub_key] = val\n\n    # Assign aggregated values into normal input\n    for key, val in nested_kwargs.items():\n        if key in processed_kwargs:\n            raise TemplateSyntaxError(\n                f\"Received argument '{key}' both as a regular input ({key}=...)\"\n                f\" and as an aggregate dict ('{key}:key=...'). Must be only one of the two\"\n            )\n        processed_kwargs[key] = val\n\n    return processed_kwargs\n</code></pre>"},{"location":"reference/django_components/#django_components.library","title":"library","text":"<p>Module for interfacing with Django's Library (<code>django.template.library</code>)</p>"},{"location":"reference/django_components/#django_components.library.PROTECTED_TAGS","title":"PROTECTED_TAGS  <code>module-attribute</code>","text":"<pre><code>PROTECTED_TAGS = [\n    \"component_dependencies\",\n    \"component_css_dependencies\",\n    \"component_js_dependencies\",\n    \"fill\",\n    \"html_attrs\",\n    \"provide\",\n    \"slot\",\n]\n</code></pre> <p>These are the names that users cannot choose for their components, as they would conflict with other tags in the Library.</p>"},{"location":"reference/django_components/#django_components.logger","title":"logger","text":""},{"location":"reference/django_components/#django_components.logger.trace","title":"trace","text":"<pre><code>trace(logger: Logger, message: str, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>TRACE level logger.</p> <p>To display TRACE logs, set the logging level to 5.</p> <p>Example: <pre><code>LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"stream\": sys.stdout,\n        },\n    },\n    \"loggers\": {\n        \"django_components\": {\n            \"level\": 5,\n            \"handlers\": [\"console\"],\n        },\n    },\n}\n</code></pre></p> Source code in <code>src/django_components/logger.py</code> <pre><code>def trace(logger: logging.Logger, message: str, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"\n    TRACE level logger.\n\n    To display TRACE logs, set the logging level to 5.\n\n    Example:\n    ```py\n    LOGGING = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"handlers\": {\n            \"console\": {\n                \"class\": \"logging.StreamHandler\",\n                \"stream\": sys.stdout,\n            },\n        },\n        \"loggers\": {\n            \"django_components\": {\n                \"level\": 5,\n                \"handlers\": [\"console\"],\n            },\n        },\n    }\n    ```\n    \"\"\"\n    if actual_trace_level_num == -1:\n        setup_logging()\n    if logger.isEnabledFor(actual_trace_level_num):\n        logger.log(actual_trace_level_num, message, *args, **kwargs)\n</code></pre>"},{"location":"reference/django_components/#django_components.logger.trace_msg","title":"trace_msg","text":"<pre><code>trace_msg(\n    action: Literal[\"PARSE\", \"ASSOC\", \"RENDR\", \"GET\", \"SET\"],\n    node_type: Literal[\"COMP\", \"FILL\", \"SLOT\", \"PROVIDE\", \"N/A\"],\n    node_name: str,\n    node_id: str,\n    msg: str = \"\",\n    component_id: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>TRACE level logger with opinionated format for tracing interaction of components, nodes, and slots. Formats messages like so:</p> <p><code>\"ASSOC SLOT test_slot ID 0088 TO COMP 0087\"</code></p> Source code in <code>src/django_components/logger.py</code> <pre><code>def trace_msg(\n    action: Literal[\"PARSE\", \"ASSOC\", \"RENDR\", \"GET\", \"SET\"],\n    node_type: Literal[\"COMP\", \"FILL\", \"SLOT\", \"PROVIDE\", \"N/A\"],\n    node_name: str,\n    node_id: str,\n    msg: str = \"\",\n    component_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    TRACE level logger with opinionated format for tracing interaction of components,\n    nodes, and slots. Formats messages like so:\n\n    `\"ASSOC SLOT test_slot ID 0088 TO COMP 0087\"`\n    \"\"\"\n    msg_prefix = \"\"\n    if action == \"ASSOC\":\n        if not component_id:\n            raise ValueError(\"component_id must be set for the ASSOC action\")\n        msg_prefix = f\"TO COMP {component_id}\"\n    elif action == \"RENDR\" and node_type == \"FILL\":\n        if not component_id:\n            raise ValueError(\"component_id must be set for the RENDER action\")\n        msg_prefix = f\"FOR COMP {component_id}\"\n\n    msg_parts = [f\"{action} {node_type} {node_name} ID {node_id}\", *([msg_prefix] if msg_prefix else []), msg]\n    full_msg = \" \".join(msg_parts)\n\n    # NOTE: When debugging tests during development, it may be easier to change\n    # this to `print()`\n    trace(logger, full_msg)\n</code></pre>"},{"location":"reference/django_components/#django_components.middleware","title":"middleware","text":""},{"location":"reference/django_components/#django_components.middleware.ComponentDependencyMiddleware","title":"ComponentDependencyMiddleware","text":"<pre><code>ComponentDependencyMiddleware(get_response: Callable[[HttpRequest], HttpResponse])\n</code></pre> <p>Middleware that inserts CSS/JS dependencies for all rendered components at points marked with template tags.</p> Source code in <code>src/django_components/middleware.py</code> <pre><code>def __init__(self, get_response: \"Callable[[HttpRequest], HttpResponse]\") -&gt; None:\n    self.get_response = get_response\n\n    if iscoroutinefunction(self.get_response):\n        markcoroutinefunction(self)\n</code></pre>"},{"location":"reference/django_components/#django_components.middleware.DependencyReplacer","title":"DependencyReplacer","text":"<pre><code>DependencyReplacer(css_string: bytes, js_string: bytes)\n</code></pre> <p>Replacer for use in re.sub that replaces the first placeholder CSS and JS tags it encounters and removes any subsequent ones.</p> Source code in <code>src/django_components/middleware.py</code> <pre><code>def __init__(self, css_string: bytes, js_string: bytes) -&gt; None:\n    self.js_string = js_string\n    self.css_string = css_string\n</code></pre>"},{"location":"reference/django_components/#django_components.middleware.join_media","title":"join_media","text":"<pre><code>join_media(components: Iterable[Component]) -&gt; Media\n</code></pre> <p>Return combined media object for iterable of components.</p> Source code in <code>src/django_components/middleware.py</code> <pre><code>def join_media(components: Iterable[\"Component\"]) -&gt; Media:\n    \"\"\"Return combined media object for iterable of components.\"\"\"\n\n    return sum([component.media for component in components], Media())\n</code></pre>"},{"location":"reference/django_components/#django_components.node","title":"node","text":""},{"location":"reference/django_components/#django_components.node.BaseNode","title":"BaseNode","text":"<pre><code>BaseNode(\n    nodelist: Optional[NodeList] = None,\n    node_id: Optional[str] = None,\n    args: Optional[List[Expression]] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n)\n</code></pre> <p>               Bases: <code>Node</code></p> <p>Shared behavior for our subclasses of Django's <code>Node</code></p> Source code in <code>src/django_components/node.py</code> <pre><code>def __init__(\n    self,\n    nodelist: Optional[NodeList] = None,\n    node_id: Optional[str] = None,\n    args: Optional[List[Expression]] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n):\n    self.nodelist = nodelist or NodeList()\n    self.node_id = node_id or gen_id()\n    self.args = args or []\n    self.kwargs = kwargs or RuntimeKwargs({})\n</code></pre>"},{"location":"reference/django_components/#django_components.node.get_node_children","title":"get_node_children","text":"<pre><code>get_node_children(node: Node, context: Optional[Context] = None) -&gt; NodeList\n</code></pre> <p>Get child Nodes from Node's nodelist atribute.</p> <p>This function is taken from <code>get_nodes_by_type</code> method of <code>django.template.base.Node</code>.</p> Source code in <code>src/django_components/node.py</code> <pre><code>def get_node_children(node: Node, context: Optional[Context] = None) -&gt; NodeList:\n    \"\"\"\n    Get child Nodes from Node's nodelist atribute.\n\n    This function is taken from `get_nodes_by_type` method of `django.template.base.Node`.\n    \"\"\"\n    # Special case - {% extends %} tag - Load the template and go deeper\n    if isinstance(node, ExtendsNode):\n        # NOTE: When {% extends %} node is being parsed, it collects all remaining template\n        # under node.nodelist.\n        # Hence, when we come across ExtendsNode in the template, we:\n        # 1. Go over all nodes in the template using `node.nodelist`\n        # 2. Go over all nodes in the \"parent\" template, via `node.get_parent`\n        nodes = NodeList()\n        nodes.extend(node.nodelist)\n        template = node.get_parent(context)\n        nodes.extend(template.nodelist)\n        return nodes\n\n    # Special case - {% include %} tag - Load the template and go deeper\n    elif isinstance(node, IncludeNode):\n        template = get_template_for_include_node(node, context)\n        return template.nodelist\n\n    nodes = NodeList()\n    for attr in node.child_nodelists:\n        nodelist = getattr(node, attr, [])\n        if nodelist:\n            nodes.extend(nodelist)\n    return nodes\n</code></pre>"},{"location":"reference/django_components/#django_components.node.get_template_for_include_node","title":"get_template_for_include_node","text":"<pre><code>get_template_for_include_node(include_node: IncludeNode, context: Context) -&gt; Template\n</code></pre> <p>This snippet is taken directly from <code>IncludeNode.render()</code>. Unfortunately the render logic doesn't separate out template loading logic from rendering, so we have to copy the method.</p> Source code in <code>src/django_components/node.py</code> <pre><code>def get_template_for_include_node(include_node: IncludeNode, context: Context) -&gt; Template:\n    \"\"\"\n    This snippet is taken directly from `IncludeNode.render()`. Unfortunately the\n    render logic doesn't separate out template loading logic from rendering, so we\n    have to copy the method.\n    \"\"\"\n    template = include_node.template.resolve(context)\n    # Does this quack like a Template?\n    if not callable(getattr(template, \"render\", None)):\n        # If not, try the cache and select_template().\n        template_name = template or ()\n        if isinstance(template_name, str):\n            template_name = (\n                construct_relative_path(\n                    include_node.origin.template_name,\n                    template_name,\n                ),\n            )\n        else:\n            template_name = tuple(template_name)\n        cache = context.render_context.dicts[0].setdefault(include_node, {})\n        template = cache.get(template_name)\n        if template is None:\n            template = context.template.engine.select_template(template_name)\n            cache[template_name] = template\n    # Use the base.Template of a backends.django.Template.\n    elif hasattr(template, \"template\"):\n        template = template.template\n    return template\n</code></pre>"},{"location":"reference/django_components/#django_components.node.walk_nodelist","title":"walk_nodelist","text":"<pre><code>walk_nodelist(nodes: NodeList, callback: Callable[[Node], Optional[str]], context: Optional[Context] = None) -&gt; None\n</code></pre> <p>Recursively walk a NodeList, calling <code>callback</code> for each Node.</p> Source code in <code>src/django_components/node.py</code> <pre><code>def walk_nodelist(\n    nodes: NodeList,\n    callback: Callable[[Node], Optional[str]],\n    context: Optional[Context] = None,\n) -&gt; None:\n    \"\"\"Recursively walk a NodeList, calling `callback` for each Node.\"\"\"\n    node_queue: List[NodeTraverse] = [NodeTraverse(node=node, parent=None) for node in nodes]\n    while len(node_queue):\n        traverse = node_queue.pop()\n        callback(traverse)\n        child_nodes = get_node_children(traverse.node, context)\n        child_traverses = [NodeTraverse(node=child_node, parent=traverse) for child_node in child_nodes]\n        node_queue.extend(child_traverses)\n</code></pre>"},{"location":"reference/django_components/#django_components.provide","title":"provide","text":""},{"location":"reference/django_components/#django_components.provide.ProvideNode","title":"ProvideNode","text":"<pre><code>ProvideNode(nodelist: NodeList, trace_id: str, node_id: Optional[str] = None, kwargs: Optional[RuntimeKwargs] = None)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> <p>Implementation of the <code>{% provide %}</code> tag. For more info see <code>Component.inject</code>.</p> Source code in <code>src/django_components/provide.py</code> <pre><code>def __init__(\n    self,\n    nodelist: NodeList,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n):\n    super().__init__(nodelist=nodelist, args=None, kwargs=kwargs, node_id=node_id)\n\n    self.nodelist = nodelist\n    self.node_id = node_id or gen_id()\n    self.trace_id = trace_id\n    self.kwargs = kwargs or RuntimeKwargs({})\n</code></pre>"},{"location":"reference/django_components/#django_components.safer_staticfiles","title":"safer_staticfiles","text":""},{"location":"reference/django_components/#django_components.safer_staticfiles.apps","title":"apps","text":""},{"location":"reference/django_components/#django_components.safer_staticfiles.apps.SaferStaticFilesConfig","title":"SaferStaticFilesConfig","text":"<p>               Bases: <code>StaticFilesConfig</code></p> <p>Extend the <code>ignore_patterns</code> class attr of StaticFilesConfig to include Python modules and HTML files.</p> <p>When this class is registered as an installed app, <code>$ ./manage.py collectstatic</code> will ignore .py and .html files, preventing potentially sensitive backend logic from being leaked by the static file server.</p> <p>See https://docs.djangoproject.com/en/5.0/ref/contrib/staticfiles/#customizing-the-ignored-pattern-list</p>"},{"location":"reference/django_components/#django_components.slots","title":"slots","text":""},{"location":"reference/django_components/#django_components.slots.FillContent","title":"FillContent  <code>dataclass</code>","text":"<pre><code>FillContent(content_func: SlotFunc[TSlotData], slot_default_var: Optional[SlotDefaultName], slot_data_var: Optional[SlotDataName])\n</code></pre> <p>               Bases: <code>Generic[TSlotData]</code></p> <p>This represents content set with the <code>{% fill %}</code> tag, e.g.:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"first_slot\" %} &lt;--- This\n        hi\n        {{ my_var }}\n        hello\n    {% endfill %}\n{% endcomponent %}\n</code></pre>"},{"location":"reference/django_components/#django_components.slots.FillNode","title":"FillNode","text":"<pre><code>FillNode(nodelist: NodeList, kwargs: RuntimeKwargs, trace_id: str, node_id: Optional[str] = None, is_implicit: bool = False)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> <p>Set when a <code>component</code> tag pair is passed template content that excludes <code>fill</code> tags. Nodes of this type contribute their nodelists to slots marked as 'default'.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def __init__(\n    self,\n    nodelist: NodeList,\n    kwargs: RuntimeKwargs,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    is_implicit: bool = False,\n):\n    super().__init__(nodelist=nodelist, args=None, kwargs=kwargs, node_id=node_id)\n\n    self.is_implicit = is_implicit\n    self.trace_id = trace_id\n    self.component_id: Optional[str] = None\n</code></pre>"},{"location":"reference/django_components/#django_components.slots.Slot","title":"Slot","text":"<p>               Bases: <code>NamedTuple</code></p> <p>This represents content set with the <code>{% slot %}</code> tag, e.g.:</p> <pre><code>{% slot \"my_comp\" default %} &lt;--- This\n    hi\n    {{ my_var }}\n    hello\n{% endslot %}\n</code></pre>"},{"location":"reference/django_components/#django_components.slots.SlotFill","title":"SlotFill  <code>dataclass</code>","text":"<pre><code>SlotFill(\n    name: str,\n    escaped_name: str,\n    is_filled: bool,\n    content_func: SlotFunc[TSlotData],\n    context_data: Mapping,\n    slot_default_var: Optional[SlotDefaultName],\n    slot_data_var: Optional[SlotDataName],\n)\n</code></pre> <p>               Bases: <code>Generic[TSlotData]</code></p> <p>SlotFill describes what WILL be rendered.</p> <p>It is a Slot that has been resolved against FillContents passed to a Component.</p>"},{"location":"reference/django_components/#django_components.slots.SlotNode","title":"SlotNode","text":"<pre><code>SlotNode(\n    nodelist: NodeList,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n    is_required: bool = False,\n    is_default: bool = False,\n)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> Source code in <code>src/django_components/slots.py</code> <pre><code>def __init__(\n    self,\n    nodelist: NodeList,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n    is_required: bool = False,\n    is_default: bool = False,\n):\n    super().__init__(nodelist=nodelist, args=None, kwargs=kwargs, node_id=node_id)\n\n    self.is_required = is_required\n    self.is_default = is_default\n    self.trace_id = trace_id\n</code></pre>"},{"location":"reference/django_components/#django_components.slots.SlotRef","title":"SlotRef","text":"<pre><code>SlotRef(slot: SlotNode, context: Context)\n</code></pre> <p>SlotRef allows to treat a slot as a variable. The slot is rendered only once the instance is coerced to string.</p> <p>This is used to access slots as variables inside the templates. When a SlotRef is rendered in the template with <code>{{ my_lazy_slot }}</code>, it will output the contents of the slot.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def __init__(self, slot: \"SlotNode\", context: Context):\n    self._slot = slot\n    self._context = context\n</code></pre>"},{"location":"reference/django_components/#django_components.slots.parse_slot_fill_nodes_from_component_nodelist","title":"parse_slot_fill_nodes_from_component_nodelist","text":"<pre><code>parse_slot_fill_nodes_from_component_nodelist(component_nodelist: NodeList, ComponentNodeCls: Type[Node]) -&gt; List[FillNode]\n</code></pre> <p>Given a component body (<code>django.template.NodeList</code>), find all slot fills, whether defined explicitly with <code>{% fill %}</code> or implicitly.</p> <p>So if we have a component body: <pre><code>{% component \"mycomponent\" %}\n    {% fill \"first_fill\" %}\n        Hello!\n    {% endfill %}\n    {% fill \"second_fill\" %}\n        Hello too!\n    {% endfill %}\n{% endcomponent %}\n</code></pre> Then this function returns the nodes (<code>django.template.Node</code>) for <code>fill \"first_fill\"</code> and <code>fill \"second_fill\"</code>.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def parse_slot_fill_nodes_from_component_nodelist(\n    component_nodelist: NodeList,\n    ComponentNodeCls: Type[Node],\n) -&gt; List[FillNode]:\n    \"\"\"\n    Given a component body (`django.template.NodeList`), find all slot fills,\n    whether defined explicitly with `{% fill %}` or implicitly.\n\n    So if we have a component body:\n    ```django\n    {% component \"mycomponent\" %}\n        {% fill \"first_fill\" %}\n            Hello!\n        {% endfill %}\n        {% fill \"second_fill\" %}\n            Hello too!\n        {% endfill %}\n    {% endcomponent %}\n    ```\n    Then this function returns the nodes (`django.template.Node`) for `fill \"first_fill\"`\n    and `fill \"second_fill\"`.\n    \"\"\"\n    fill_nodes: List[FillNode] = []\n    if nodelist_has_content(component_nodelist):\n        for parse_fn in (\n            _try_parse_as_default_fill,\n            _try_parse_as_named_fill_tag_set,\n        ):\n            curr_fill_nodes = parse_fn(component_nodelist, ComponentNodeCls)\n            if curr_fill_nodes:\n                fill_nodes = curr_fill_nodes\n                break\n        else:\n            raise TemplateSyntaxError(\n                \"Illegal content passed to 'component' tag pair. \"\n                \"Possible causes: 1) Explicit 'fill' tags cannot occur alongside other \"\n                \"tags except comment tags; 2) Default (default slot-targeting) content \"\n                \"is mixed with explict 'fill' tags.\"\n            )\n    return fill_nodes\n</code></pre>"},{"location":"reference/django_components/#django_components.slots.resolve_slots","title":"resolve_slots","text":"<pre><code>resolve_slots(\n    context: Context,\n    template: Template,\n    component_name: Optional[str],\n    context_data: Mapping[str, Any],\n    fill_content: Dict[SlotName, FillContent],\n    is_dynamic_component: bool = False,\n) -&gt; Tuple[Dict[SlotId, Slot], Dict[SlotId, SlotFill]]\n</code></pre> <p>Search the template for all SlotNodes, and associate the slots with the given fills.</p> <p>Returns tuple of: - Slots defined in the component's Template with <code>{% slot %}</code> tag - SlotFills (AKA slots matched with fills) describing what will be rendered for each slot.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def resolve_slots(\n    context: Context,\n    template: Template,\n    component_name: Optional[str],\n    context_data: Mapping[str, Any],\n    fill_content: Dict[SlotName, FillContent],\n    is_dynamic_component: bool = False,\n) -&gt; Tuple[Dict[SlotId, Slot], Dict[SlotId, SlotFill]]:\n    \"\"\"\n    Search the template for all SlotNodes, and associate the slots\n    with the given fills.\n\n    Returns tuple of:\n    - Slots defined in the component's Template with `{% slot %}` tag\n    - SlotFills (AKA slots matched with fills) describing what will be rendered for each slot.\n    \"\"\"\n    slot_fills = {\n        name: SlotFill(\n            name=name,\n            escaped_name=_escape_slot_name(name),\n            is_filled=True,\n            content_func=fill.content_func,\n            context_data=context_data,\n            slot_default_var=fill.slot_default_var,\n            slot_data_var=fill.slot_data_var,\n        )\n        for name, fill in fill_content.items()\n    }\n\n    slots: Dict[SlotId, Slot] = {}\n    # This holds info on which slot (key) has which slots nested in it (value list)\n    slot_children: Dict[SlotId, List[SlotId]] = {}\n\n    def on_node(entry: NodeTraverse) -&gt; None:\n        node = entry.node\n        if not isinstance(node, SlotNode):\n            return\n\n        slot_name, _ = node.resolve_kwargs(context, component_name)\n\n        # 1. Collect slots\n        # Basically we take all the important info form the SlotNode, so the logic is\n        # less coupled to Django's Template/Node. Plain tuples should also help with\n        # troubleshooting.\n        slot = Slot(\n            id=node.node_id,\n            name=slot_name,\n            nodelist=node.nodelist,\n            is_default=node.is_default,\n            is_required=node.is_required,\n        )\n        slots[node.node_id] = slot\n\n        # 2. Figure out which Slots are nested in other Slots, so we can render\n        # them from outside-inwards, so we can skip inner Slots if fills are provided.\n        # We should end up with a graph-like data like:\n        # - 0001: [0002]\n        # - 0002: []\n        # - 0003: [0004]\n        # In other words, the data tells us that slot ID 0001 is PARENT of slot 0002.\n        curr_entry = entry.parent\n        while curr_entry and curr_entry.parent is not None:\n            if not isinstance(curr_entry.node, SlotNode):\n                curr_entry = curr_entry.parent\n                continue\n\n            parent_slot_id = curr_entry.node.node_id\n            if parent_slot_id not in slot_children:\n                slot_children[parent_slot_id] = []\n            slot_children[parent_slot_id].append(node.node_id)\n            break\n\n    walk_nodelist(template.nodelist, on_node, context)\n\n    # 3. Figure out which slot the default/implicit fill belongs to\n    slot_fills = _resolve_default_slot(\n        template_name=template.name,\n        component_name=component_name,\n        slots=slots,\n        slot_fills=slot_fills,\n        is_dynamic_component=is_dynamic_component,\n    )\n\n    # 4. Detect any errors with slots/fills\n    # NOTE: We ignore errors for the dynamic component, as the underlying component\n    # will deal with it\n    if not is_dynamic_component:\n        _report_slot_errors(slots, slot_fills, component_name)\n\n    # 5. Find roots of the slot relationships\n    top_level_slot_ids: List[SlotId] = []\n    for node_id, slot in slots.items():\n        if node_id not in slot_children or not slot_children[node_id]:\n            top_level_slot_ids.append(node_id)\n\n    # 6. Walk from out-most slots inwards, and decide whether and how\n    # we will render each slot.\n    resolved_slots: Dict[SlotId, SlotFill] = {}\n    slot_ids_queue = deque([*top_level_slot_ids])\n    while len(slot_ids_queue):\n        slot_id = slot_ids_queue.pop()\n        slot = slots[slot_id]\n\n        # Check if there is a slot fill for given slot name\n        if slot.name in slot_fills:\n            # If yes, we remember which slot we want to replace with already-rendered fills\n            resolved_slots[slot_id] = slot_fills[slot.name]\n            # Since the fill cannot include other slots, we can leave this path\n            continue\n        else:\n            # If no, then the slot is NOT filled, and we will render the slot's default (what's\n            # between the slot tags)\n            resolved_slots[slot_id] = SlotFill(\n                name=slot.name,\n                escaped_name=_escape_slot_name(slot.name),\n                is_filled=False,\n                content_func=_nodelist_to_slot_render_func(slot.nodelist),\n                context_data=context_data,\n                slot_default_var=None,\n                slot_data_var=None,\n            )\n            # Since the slot's default CAN include other slots (because it's defined in\n            # the same template), we need to enqueue the slot's children\n            if slot_id in slot_children and slot_children[slot_id]:\n                slot_ids_queue.extend(slot_children[slot_id])\n\n    # By the time we get here, we should know, for each slot, how it will be rendered\n    # -&gt; Whether it will be replaced with a fill, or whether we render slot's defaults.\n    return slots, resolved_slots\n</code></pre>"},{"location":"reference/django_components/#django_components.tag_formatter","title":"tag_formatter","text":""},{"location":"reference/django_components/#django_components.tag_formatter.ComponentFormatter","title":"ComponentFormatter","text":"<pre><code>ComponentFormatter(tag: str)\n</code></pre> <p>               Bases: <code>TagFormatterABC</code></p> <p>The original django_component's component tag formatter, it uses the <code>component</code> and <code>endcomponent</code> tags, and the component name is gives as the first positional arg.</p> <p>Example as block: <pre><code>{% component \"mycomp\" abc=123 %}\n    {% fill \"myfill\" %}\n        ...\n    {% endfill %}\n{% endcomponent %}\n</code></pre></p> <p>Example as inlined tag: <pre><code>{% component \"mycomp\" abc=123 / %}\n</code></pre></p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>def __init__(self, tag: str):\n    self.tag = tag\n</code></pre>"},{"location":"reference/django_components/#django_components.tag_formatter.InternalTagFormatter","title":"InternalTagFormatter","text":"<pre><code>InternalTagFormatter(tag_formatter: TagFormatterABC)\n</code></pre> <p>Internal wrapper around user-provided TagFormatters, so that we validate the outputs.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>def __init__(self, tag_formatter: TagFormatterABC):\n    self.tag_formatter = tag_formatter\n</code></pre>"},{"location":"reference/django_components/#django_components.tag_formatter.ShorthandComponentFormatter","title":"ShorthandComponentFormatter","text":"<p>               Bases: <code>TagFormatterABC</code></p> <p>The component tag formatter that uses <code>&lt;name&gt;</code> / <code>end&lt;name&gt;</code> tags.</p> <p>This is similar to django-web-components and django-slippers syntax.</p> <p>Example as block: <pre><code>{% mycomp abc=123 %}\n    {% fill \"myfill\" %}\n        ...\n    {% endfill %}\n{% endmycomp %}\n</code></pre></p> <p>Example as inlined tag: <pre><code>{% mycomp abc=123 / %}\n</code></pre></p>"},{"location":"reference/django_components/#django_components.tag_formatter.TagFormatterABC","title":"TagFormatterABC","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/django_components/#django_components.tag_formatter.TagFormatterABC.end_tag","title":"end_tag  <code>abstractmethod</code>","text":"<pre><code>end_tag(name: str) -&gt; str\n</code></pre> <p>Formats the end tag of a block component.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>@abc.abstractmethod\ndef end_tag(self, name: str) -&gt; str:\n    \"\"\"Formats the end tag of a block component.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/django_components/#django_components.tag_formatter.TagFormatterABC.parse","title":"parse  <code>abstractmethod</code>","text":"<pre><code>parse(tokens: List[str]) -&gt; TagResult\n</code></pre> <p>Given the tokens (words) of a component start tag, this function extracts the component name from the tokens list, and returns <code>TagResult</code>, which is a tuple of <code>(component_name, remaining_tokens)</code>.</p> <p>Example:</p> <p>Given a component declarations:</p> <p><code>{% component \"my_comp\" key=val key2=val2 %}</code></p> <p>This function receives a list of tokens</p> <p><code>['component', '\"my_comp\"', 'key=val', 'key2=val2']</code></p> <p><code>component</code> is the tag name, which we drop. <code>\"my_comp\"</code> is the component name, but we must remove the extra quotes. And we pass remaining tokens unmodified, as that's the input to the component.</p> <p>So in the end, we return a tuple:</p> <p><code>('my_comp', ['key=val', 'key2=val2'])</code></p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>@abc.abstractmethod\ndef parse(self, tokens: List[str]) -&gt; TagResult:\n    \"\"\"\n    Given the tokens (words) of a component start tag, this function extracts\n    the component name from the tokens list, and returns `TagResult`, which\n    is a tuple of `(component_name, remaining_tokens)`.\n\n    Example:\n\n    Given a component declarations:\n\n    `{% component \"my_comp\" key=val key2=val2 %}`\n\n    This function receives a list of tokens\n\n    `['component', '\"my_comp\"', 'key=val', 'key2=val2']`\n\n    `component` is the tag name, which we drop. `\"my_comp\"` is the component name,\n    but we must remove the extra quotes. And we pass remaining tokens unmodified,\n    as that's the input to the component.\n\n    So in the end, we return a tuple:\n\n    `('my_comp', ['key=val', 'key2=val2'])`\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/django_components/#django_components.tag_formatter.TagFormatterABC.start_tag","title":"start_tag  <code>abstractmethod</code>","text":"<pre><code>start_tag(name: str) -&gt; str\n</code></pre> <p>Formats the start tag of a component.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>@abc.abstractmethod\ndef start_tag(self, name: str) -&gt; str:\n    \"\"\"Formats the start tag of a component.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/django_components/#django_components.tag_formatter.TagResult","title":"TagResult","text":"<p>               Bases: <code>NamedTuple</code></p> <p>The return value from <code>TagFormatter.parse()</code></p>"},{"location":"reference/django_components/#django_components.tag_formatter.TagResult.component_name","title":"component_name  <code>instance-attribute</code>","text":"<pre><code>component_name: str\n</code></pre> <p>Component name extracted from the template tag</p>"},{"location":"reference/django_components/#django_components.tag_formatter.TagResult.tokens","title":"tokens  <code>instance-attribute</code>","text":"<pre><code>tokens: List[str]\n</code></pre> <p>Remaining tokens (words) that were passed to the tag, with component name removed</p>"},{"location":"reference/django_components/#django_components.tag_formatter.get_tag_formatter","title":"get_tag_formatter","text":"<pre><code>get_tag_formatter(registry: ComponentRegistry) -&gt; InternalTagFormatter\n</code></pre> <p>Returns an instance of the currently configured component tag formatter.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>def get_tag_formatter(registry: \"ComponentRegistry\") -&gt; InternalTagFormatter:\n    \"\"\"Returns an instance of the currently configured component tag formatter.\"\"\"\n    # Allow users to configure the component TagFormatter\n    formatter_cls_or_str = registry.settings.TAG_FORMATTER\n\n    if isinstance(formatter_cls_or_str, str):\n        tag_formatter: TagFormatterABC = import_string(formatter_cls_or_str)\n    else:\n        tag_formatter = formatter_cls_or_str\n\n    return InternalTagFormatter(tag_formatter)\n</code></pre>"},{"location":"reference/django_components/#django_components.template_loader","title":"template_loader","text":"<p>Template loader that loads templates from each Django app's \"components\" directory.</p>"},{"location":"reference/django_components/#django_components.template_loader.Loader","title":"Loader","text":"<p>               Bases: <code>Loader</code></p>"},{"location":"reference/django_components/#django_components.template_loader.Loader.get_dirs","title":"get_dirs","text":"<pre><code>get_dirs() -&gt; List[Path]\n</code></pre> <p>Prepare directories that may contain component files:</p> <p>Searches for dirs set in <code>STATICFILES_DIRS</code> settings. If none set, defaults to searching for a \"components\" app. The dirs in <code>STATICFILES_DIRS</code> must be absolute paths.</p> <p>Paths are accepted only if they resolve to a directory. E.g. <code>/path/to/django_project/my_app/components/</code>.</p> <p>If <code>STATICFILES_DIRS</code> is not set or empty, then <code>BASE_DIR</code> is required.</p> Source code in <code>src/django_components/template_loader.py</code> <pre><code>def get_dirs(self) -&gt; List[Path]:\n    \"\"\"\n    Prepare directories that may contain component files:\n\n    Searches for dirs set in `STATICFILES_DIRS` settings. If none set, defaults to searching\n    for a \"components\" app. The dirs in `STATICFILES_DIRS` must be absolute paths.\n\n    Paths are accepted only if they resolve to a directory.\n    E.g. `/path/to/django_project/my_app/components/`.\n\n    If `STATICFILES_DIRS` is not set or empty, then `BASE_DIR` is required.\n    \"\"\"\n    # Allow to configure from settings which dirs should be checked for components\n    if hasattr(settings, \"STATICFILES_DIRS\") and settings.STATICFILES_DIRS:\n        component_dirs = settings.STATICFILES_DIRS\n    else:\n        component_dirs = [settings.BASE_DIR / \"components\"]\n\n    logger.debug(\n        \"Template loader will search for valid template dirs from following options:\\n\"\n        + \"\\n\".join([f\" - {str(d)}\" for d in component_dirs])\n    )\n\n    directories: Set[Path] = set()\n    for component_dir in component_dirs:\n        # Consider tuples for STATICFILES_DIRS (See #489)\n        # See https://docs.djangoproject.com/en/5.0/ref/settings/#prefixes-optional\n        if isinstance(component_dir, (tuple, list)) and len(component_dir) == 2:\n            component_dir = component_dir[1]\n        try:\n            Path(component_dir)\n        except TypeError:\n            logger.warning(\n                f\"STATICFILES_DIRS expected str, bytes or os.PathLike object, or tuple/list of length 2. \"\n                f\"See Django documentation. Got {type(component_dir)} : {component_dir}\"\n            )\n            continue\n\n        if not Path(component_dir).is_absolute():\n            raise ValueError(f\"STATICFILES_DIRS must contain absolute paths, got '{component_dir}'\")\n        else:\n            directories.add(Path(component_dir).resolve())\n\n    logger.debug(\n        \"Template loader matched following template dirs:\\n\" + \"\\n\".join([f\" - {str(d)}\" for d in directories])\n    )\n    return list(directories)\n</code></pre>"},{"location":"reference/django_components/#django_components.template_parser","title":"template_parser","text":"<p>Overrides for the Django Template system to allow finer control over template parsing.</p> <p>Based on Django Slippers v0.6.2 - https://github.com/mixxorz/slippers/blob/main/slippers/template.py</p>"},{"location":"reference/django_components/#django_components.template_parser.parse_bits","title":"parse_bits","text":"<pre><code>parse_bits(\n    parser: Parser, bits: List[str], params: List[str], name: str\n) -&gt; Tuple[List[FilterExpression], List[Tuple[str, FilterExpression]]]\n</code></pre> <p>Parse bits for template tag helpers simple_tag and inclusion_tag, in particular by detecting syntax errors and by extracting positional and keyword arguments.</p> <p>This is a simplified version of <code>django.template.library.parse_bits</code> where we use custom regex to handle special characters in keyword names.</p> <p>Furthermore, our version allows duplicate keys, and instead of return kwargs as a dict, we return it as a list of key-value pairs. So it is up to the user of this function to decide whether they support duplicate keys or not.</p> Source code in <code>src/django_components/template_parser.py</code> <pre><code>def parse_bits(\n    parser: Parser,\n    bits: List[str],\n    params: List[str],\n    name: str,\n) -&gt; Tuple[List[FilterExpression], List[Tuple[str, FilterExpression]]]:\n    \"\"\"\n    Parse bits for template tag helpers simple_tag and inclusion_tag, in\n    particular by detecting syntax errors and by extracting positional and\n    keyword arguments.\n\n    This is a simplified version of `django.template.library.parse_bits`\n    where we use custom regex to handle special characters in keyword names.\n\n    Furthermore, our version allows duplicate keys, and instead of return kwargs\n    as a dict, we return it as a list of key-value pairs. So it is up to the\n    user of this function to decide whether they support duplicate keys or not.\n    \"\"\"\n    args: List[FilterExpression] = []\n    kwargs: List[Tuple[str, FilterExpression]] = []\n    unhandled_params = list(params)\n    for bit in bits:\n        # First we try to extract a potential kwarg from the bit\n        kwarg = token_kwargs([bit], parser)\n        if kwarg:\n            # The kwarg was successfully extracted\n            param, value = kwarg.popitem()\n            # All good, record the keyword argument\n            kwargs.append((str(param), value))\n            if param in unhandled_params:\n                # If using the keyword syntax for a positional arg, then\n                # consume it.\n                unhandled_params.remove(param)\n        else:\n            if kwargs:\n                raise TemplateSyntaxError(\n                    \"'%s' received some positional argument(s) after some \" \"keyword argument(s)\" % name\n                )\n            else:\n                # Record the positional argument\n                args.append(parser.compile_filter(bit))\n                try:\n                    # Consume from the list of expected positional arguments\n                    unhandled_params.pop(0)\n                except IndexError:\n                    pass\n    if unhandled_params:\n        # Some positional arguments were not supplied\n        raise TemplateSyntaxError(\n            \"'%s' did not receive value(s) for the argument(s): %s\"\n            % (name, \", \".join(\"'%s'\" % p for p in unhandled_params))\n        )\n    return args, kwargs\n</code></pre>"},{"location":"reference/django_components/#django_components.template_parser.token_kwargs","title":"token_kwargs","text":"<pre><code>token_kwargs(bits: List[str], parser: Parser) -&gt; Dict[str, FilterExpression]\n</code></pre> <p>Parse token keyword arguments and return a dictionary of the arguments retrieved from the <code>bits</code> token list.</p> <p><code>bits</code> is a list containing the remainder of the token (split by spaces) that is to be checked for arguments. Valid arguments are removed from this list.</p> <p>There is no requirement for all remaining token <code>bits</code> to be keyword arguments, so return the dictionary as soon as an invalid argument format is reached.</p> Source code in <code>src/django_components/template_parser.py</code> <pre><code>def token_kwargs(bits: List[str], parser: Parser) -&gt; Dict[str, FilterExpression]:\n    \"\"\"\n    Parse token keyword arguments and return a dictionary of the arguments\n    retrieved from the ``bits`` token list.\n\n    `bits` is a list containing the remainder of the token (split by spaces)\n    that is to be checked for arguments. Valid arguments are removed from this\n    list.\n\n    There is no requirement for all remaining token ``bits`` to be keyword\n    arguments, so return the dictionary as soon as an invalid argument format\n    is reached.\n    \"\"\"\n    if not bits:\n        return {}\n    match = kwarg_re.match(bits[0])\n    kwarg_format = match and match[1]\n    if not kwarg_format:\n        return {}\n\n    kwargs: Dict[str, FilterExpression] = {}\n    while bits:\n        if kwarg_format:\n            match = kwarg_re.match(bits[0])\n            if not match or not match[1]:\n                return kwargs\n            key, value = match.groups()\n            del bits[:1]\n        else:\n            if len(bits) &lt; 3 or bits[1] != \"as\":\n                return kwargs\n            key, value = bits[2], bits[0]\n            del bits[:3]\n\n        # This is the only difference from the original token_kwargs. We use\n        # the ComponentsFilterExpression instead of the original FilterExpression.\n        kwargs[key] = ComponentsFilterExpression(value, parser)\n        if bits and not kwarg_format:\n            if bits[0] != \"and\":\n                return kwargs\n            del bits[:1]\n    return kwargs\n</code></pre>"},{"location":"reference/django_components/#django_components.templatetags","title":"templatetags","text":""},{"location":"reference/django_components/#django_components.templatetags.component_tags","title":"component_tags","text":""},{"location":"reference/django_components/#django_components.templatetags.component_tags.component","title":"component","text":"<pre><code>component(parser: Parser, token: Token, registry: ComponentRegistry, tag_name: str) -&gt; ComponentNode\n</code></pre> To give the component access to the template context <p><code>{% component \"name\" positional_arg keyword_arg=value ... %}</code></p> To render the component in an isolated context <p><code>{% component \"name\" positional_arg keyword_arg=value ... only %}</code></p> <p>Positional and keyword arguments can be literals or template variables. The component name must be a single- or double-quotes string and must be either the first positional argument or, if there are no positional arguments, passed as 'name'.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>def component(parser: Parser, token: Token, registry: ComponentRegistry, tag_name: str) -&gt; ComponentNode:\n    \"\"\"\n    To give the component access to the template context:\n        ```#!htmldjango {% component \"name\" positional_arg keyword_arg=value ... %}```\n\n    To render the component in an isolated context:\n        ```#!htmldjango {% component \"name\" positional_arg keyword_arg=value ... only %}```\n\n    Positional and keyword arguments can be literals or template variables.\n    The component name must be a single- or double-quotes string and must\n    be either the first positional argument or, if there are no positional\n    arguments, passed as 'name'.\n    \"\"\"\n    _fix_nested_tags(parser, token)\n    bits = token.split_contents()\n\n    # Let the TagFormatter pre-process the tokens\n    formatter = get_tag_formatter(registry)\n    result = formatter.parse([*bits])\n    end_tag = formatter.end_tag(result.component_name)\n\n    # NOTE: The tokens returned from TagFormatter.parse do NOT include the tag itself\n    bits = [bits[0], *result.tokens]\n    token.contents = \" \".join(bits)\n\n    tag = _parse_tag(\n        tag_name,\n        parser,\n        token,\n        params=[],\n        extra_params=True,  # Allow many args\n        flags=[COMP_ONLY_FLAG],\n        keywordonly_kwargs=True,\n        repeatable_kwargs=False,\n        end_tag=end_tag,\n    )\n\n    # Check for isolated context keyword\n    isolated_context = tag.flags[COMP_ONLY_FLAG]\n\n    trace_msg(\"PARSE\", \"COMP\", result.component_name, tag.id)\n\n    body = tag.parse_body()\n    fill_nodes = parse_slot_fill_nodes_from_component_nodelist(body, ComponentNode)\n\n    # Tag all fill nodes as children of this particular component instance\n    for node in fill_nodes:\n        trace_msg(\"ASSOC\", \"FILL\", node.trace_id, node.node_id, component_id=tag.id)\n        node.component_id = tag.id\n\n    component_node = ComponentNode(\n        name=result.component_name,\n        args=tag.args,\n        kwargs=tag.kwargs,\n        isolated_context=isolated_context,\n        fill_nodes=fill_nodes,\n        node_id=tag.id,\n        registry=registry,\n    )\n\n    trace_msg(\"PARSE\", \"COMP\", result.component_name, tag.id, \"...Done!\")\n    return component_node\n</code></pre>"},{"location":"reference/django_components/#django_components.templatetags.component_tags.component_css_dependencies","title":"component_css_dependencies","text":"<pre><code>component_css_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where CSS link tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_css_dependencies\")\ndef component_css_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where CSS link tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + CSS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_css_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/#django_components.templatetags.component_tags.component_dependencies","title":"component_dependencies","text":"<pre><code>component_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where CSS link and JS script tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_dependencies\")\ndef component_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where CSS link and JS script tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + CSS_DEPENDENCY_PLACEHOLDER + JS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/#django_components.templatetags.component_tags.component_js_dependencies","title":"component_js_dependencies","text":"<pre><code>component_js_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where JS script tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_js_dependencies\")\ndef component_js_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where JS script tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + JS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_js_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/#django_components.templatetags.component_tags.fill","title":"fill","text":"<pre><code>fill(parser: Parser, token: Token) -&gt; FillNode\n</code></pre> <p>Block tag whose contents 'fill' (are inserted into) an identically named 'slot'-block in the component template referred to by a parent component. It exists to make component nesting easier.</p> <p>This tag is available only within a {% component %}..{% endcomponent %} block. Runtime checks should prohibit other usages.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.tag(\"fill\")\ndef fill(parser: Parser, token: Token) -&gt; FillNode:\n    \"\"\"\n    Block tag whose contents 'fill' (are inserted into) an identically named\n    'slot'-block in the component template referred to by a parent component.\n    It exists to make component nesting easier.\n\n    This tag is available only within a {% component %}..{% endcomponent %} block.\n    Runtime checks should prohibit other usages.\n    \"\"\"\n    tag = _parse_tag(\n        \"fill\",\n        parser,\n        token,\n        params=[SLOT_NAME_KWARG],\n        optional_params=[SLOT_NAME_KWARG],\n        keywordonly_kwargs=[SLOT_DATA_KWARG, SLOT_DEFAULT_KWARG],\n        repeatable_kwargs=False,\n        end_tag=\"endfill\",\n    )\n\n    fill_name_kwarg = tag.kwargs.kwargs.get(SLOT_NAME_KWARG, None)\n    trace_id = f\"fill-id-{tag.id} ({fill_name_kwarg})\" if fill_name_kwarg else f\"fill-id-{tag.id}\"\n\n    trace_msg(\"PARSE\", \"FILL\", trace_id, tag.id)\n\n    body = tag.parse_body()\n    fill_node = FillNode(\n        nodelist=body,\n        node_id=tag.id,\n        kwargs=tag.kwargs,\n        trace_id=trace_id,\n    )\n\n    trace_msg(\"PARSE\", \"FILL\", trace_id, tag.id, \"...Done!\")\n    return fill_node\n</code></pre>"},{"location":"reference/django_components/#django_components.templatetags.component_tags.html_attrs","title":"html_attrs","text":"<pre><code>html_attrs(parser: Parser, token: Token) -&gt; HtmlAttrsNode\n</code></pre> <p>This tag takes: - Optional dictionary of attributes (<code>attrs</code>) - Optional dictionary of defaults (<code>defaults</code>) - Additional kwargs that are appended to the former two</p> <p>The inputs are merged and resulting dict is rendered as HTML attributes (<code>key=\"value\"</code>).</p> <p>Rules: 1. Both <code>attrs</code> and <code>defaults</code> can be passed as positional args or as kwargs 2. Both <code>attrs</code> and <code>defaults</code> are optional (can be omitted) 3. Both <code>attrs</code> and <code>defaults</code> are dictionaries, and we can define them the same way    we define dictionaries for the <code>component</code> tag. So either as <code>attrs=attrs</code> or    <code>attrs:key=value</code>. 4. All other kwargs (<code>key=value</code>) are appended and can be repeated.</p> <p>Normal kwargs (<code>key=value</code>) are concatenated to existing keys. So if e.g. key \"class\" is supplied with value \"my-class\", then adding <code>class=\"extra-class\"</code> will result in `class=\"my-class extra-class\".</p> <p>Example: <pre><code>{% html_attrs attrs defaults:class=\"default-class\" class=\"extra-class\" data-id=\"123\" %}\n</code></pre></p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.tag(\"html_attrs\")\ndef html_attrs(parser: Parser, token: Token) -&gt; HtmlAttrsNode:\n    \"\"\"\n    This tag takes:\n    - Optional dictionary of attributes (`attrs`)\n    - Optional dictionary of defaults (`defaults`)\n    - Additional kwargs that are appended to the former two\n\n    The inputs are merged and resulting dict is rendered as HTML attributes\n    (`key=\"value\"`).\n\n    Rules:\n    1. Both `attrs` and `defaults` can be passed as positional args or as kwargs\n    2. Both `attrs` and `defaults` are optional (can be omitted)\n    3. Both `attrs` and `defaults` are dictionaries, and we can define them the same way\n       we define dictionaries for the `component` tag. So either as `attrs=attrs` or\n       `attrs:key=value`.\n    4. All other kwargs (`key=value`) are appended and can be repeated.\n\n    Normal kwargs (`key=value`) are concatenated to existing keys. So if e.g. key\n    \"class\" is supplied with value \"my-class\", then adding `class=\"extra-class\"`\n    will result in `class=\"my-class extra-class\".\n\n    Example:\n    ```htmldjango\n    {% html_attrs attrs defaults:class=\"default-class\" class=\"extra-class\" data-id=\"123\" %}\n    ```\n    \"\"\"\n    tag = _parse_tag(\n        \"html_attrs\",\n        parser,\n        token,\n        params=[HTML_ATTRS_ATTRS_KEY, HTML_ATTRS_DEFAULTS_KEY],\n        optional_params=[HTML_ATTRS_ATTRS_KEY, HTML_ATTRS_DEFAULTS_KEY],\n        flags=[],\n        keywordonly_kwargs=True,\n        repeatable_kwargs=True,\n    )\n\n    return HtmlAttrsNode(\n        kwargs=tag.kwargs,\n        kwarg_pairs=tag.kwarg_pairs,\n    )\n</code></pre>"},{"location":"reference/django_components/#django_components.types","title":"types","text":"<p>Helper types for IDEs.</p>"},{"location":"reference/django_components/#django_components.utils","title":"utils","text":""},{"location":"reference/django_components/#django_components.utils.gen_id","title":"gen_id","text":"<pre><code>gen_id(length: int = 5) -&gt; str\n</code></pre> <p>Generate a unique ID that can be associated with a Node</p> Source code in <code>src/django_components/utils.py</code> <pre><code>def gen_id(length: int = 5) -&gt; str:\n    \"\"\"Generate a unique ID that can be associated with a Node\"\"\"\n    # Global counter to avoid conflicts\n    global _id\n    _id += 1\n\n    # Pad the ID with `0`s up to 4 digits, e.g. `0007`\n    return f\"{_id:04}\"\n</code></pre>"},{"location":"reference/django_components/app_settings/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> app_settings","text":""},{"location":"reference/django_components/app_settings/#django_components.app_settings","title":"app_settings","text":""},{"location":"reference/django_components/app_settings/#django_components.app_settings.ContextBehavior","title":"ContextBehavior","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/django_components/app_settings/#django_components.app_settings.ContextBehavior.DJANGO","title":"DJANGO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DJANGO = 'django'\n</code></pre> <p>With this setting, component fills behave as usual Django tags. That is, they enrich the context, and pass it along.</p> <ol> <li>Component fills use the context of the component they are within.</li> <li>Variables from <code>get_context_data</code> are available to the component fill.</li> </ol> <p>Example:</p> <p>Given this template <pre><code>{% with cheese=\"feta\" %}\n  {% component 'my_comp' %}\n    {{ my_var }}  # my_var\n    {{ cheese }}  # cheese\n  {% endcomponent %}\n{% endwith %}\n</code></pre></p> <p>and this context returned from the <code>get_context_data()</code> method <pre><code>{ \"my_var\": 123 }\n</code></pre></p> <p>Then if component \"my_comp\" defines context <pre><code>{ \"my_var\": 456 }\n</code></pre></p> <p>Then this will render: <pre><code>456   # my_var\nfeta  # cheese\n</code></pre></p> <p>Because \"my_comp\" overrides the variable \"my_var\", so <code>{{ my_var }}</code> equals <code>456</code>.</p> <p>And variable \"cheese\" will equal <code>feta</code>, because the fill CAN access the current context.</p>"},{"location":"reference/django_components/app_settings/#django_components.app_settings.ContextBehavior.ISOLATED","title":"ISOLATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ISOLATED = 'isolated'\n</code></pre> <p>This setting makes the component fills behave similar to Vue or React, where the fills use EXCLUSIVELY the context variables defined in <code>get_context_data</code>.</p> <p>Example:</p> <p>Given this template <pre><code>{% with cheese=\"feta\" %}\n  {% component 'my_comp' %}\n    {{ my_var }}  # my_var\n    {{ cheese }}  # cheese\n  {% endcomponent %}\n{% endwith %}\n</code></pre></p> <p>and this context returned from the <code>get_context_data()</code> method <pre><code>{ \"my_var\": 123 }\n</code></pre></p> <p>Then if component \"my_comp\" defines context <pre><code>{ \"my_var\": 456 }\n</code></pre></p> <p>Then this will render: <pre><code>123   # my_var\n      # cheese\n</code></pre></p> <p>Because both variables \"my_var\" and \"cheese\" are taken from the root context. Since \"cheese\" is not defined in root context, it's empty.</p>"},{"location":"reference/django_components/apps/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> apps","text":""},{"location":"reference/django_components/apps/#django_components.apps","title":"apps","text":""},{"location":"reference/django_components/attributes/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> attributes","text":""},{"location":"reference/django_components/attributes/#django_components.attributes","title":"attributes","text":""},{"location":"reference/django_components/attributes/#django_components.attributes.append_attributes","title":"append_attributes","text":"<pre><code>append_attributes(*args: Tuple[str, Any]) -&gt; Dict\n</code></pre> <p>Merges the key-value pairs and returns a new dictionary.</p> <p>If a key is present multiple times, its values are concatenated with a space character as separator in the final dictionary.</p> Source code in <code>src/django_components/attributes.py</code> <pre><code>def append_attributes(*args: Tuple[str, Any]) -&gt; Dict:\n    \"\"\"\n    Merges the key-value pairs and returns a new dictionary.\n\n    If a key is present multiple times, its values are concatenated with a space\n    character as separator in the final dictionary.\n    \"\"\"\n    result: Dict = {}\n\n    for key, value in args:\n        if key in result:\n            result[key] += \" \" + value\n        else:\n            result[key] = value\n\n    return result\n</code></pre>"},{"location":"reference/django_components/attributes/#django_components.attributes.attributes_to_string","title":"attributes_to_string","text":"<pre><code>attributes_to_string(attributes: Mapping[str, Any]) -&gt; str\n</code></pre> <p>Convert a dict of attributes to a string.</p> Source code in <code>src/django_components/attributes.py</code> <pre><code>def attributes_to_string(attributes: Mapping[str, Any]) -&gt; str:\n    \"\"\"Convert a dict of attributes to a string.\"\"\"\n    attr_list = []\n\n    for key, value in attributes.items():\n        if value is None or value is False:\n            continue\n        if value is True:\n            attr_list.append(conditional_escape(key))\n        else:\n            attr_list.append(format_html('{}=\"{}\"', key, value))\n\n    return mark_safe(SafeString(\" \").join(attr_list))\n</code></pre>"},{"location":"reference/django_components/autodiscover/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> autodiscover","text":""},{"location":"reference/django_components/autodiscover/#django_components.autodiscover","title":"autodiscover","text":""},{"location":"reference/django_components/autodiscover/#django_components.autodiscover.autodiscover","title":"autodiscover","text":"<pre><code>autodiscover(map_module: Optional[Callable[[str], str]] = None) -&gt; List[str]\n</code></pre> <p>Search for component files and import them. Returns a list of module paths of imported files.</p> <p>Autodiscover searches in the locations as defined by <code>Loader.get_dirs</code>.</p> <p>You can map the module paths with <code>map_module</code> function. This serves as an escape hatch for when you need to use this function in tests.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def autodiscover(\n    map_module: Optional[Callable[[str], str]] = None,\n) -&gt; List[str]:\n    \"\"\"\n    Search for component files and import them. Returns a list of module\n    paths of imported files.\n\n    Autodiscover searches in the locations as defined by `Loader.get_dirs`.\n\n    You can map the module paths with `map_module` function. This serves\n    as an escape hatch for when you need to use this function in tests.\n    \"\"\"\n    dirs = get_dirs()\n    component_filepaths = search_dirs(dirs, \"**/*.py\")\n    logger.debug(f\"Autodiscover found {len(component_filepaths)} files in component directories.\")\n\n    modules = [_filepath_to_python_module(filepath) for filepath in component_filepaths]\n    return _import_modules(modules, map_module)\n</code></pre>"},{"location":"reference/django_components/autodiscover/#django_components.autodiscover.get_dirs","title":"get_dirs","text":"<pre><code>get_dirs(engine: Optional[Engine] = None) -&gt; List[Path]\n</code></pre> <p>Helper for using django_component's FilesystemLoader class to obtain a list of directories where component python files may be defined.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def get_dirs(engine: Optional[Engine] = None) -&gt; List[Path]:\n    \"\"\"\n    Helper for using django_component's FilesystemLoader class to obtain a list\n    of directories where component python files may be defined.\n    \"\"\"\n    current_engine = engine\n    if current_engine is None:\n        current_engine = Engine.get_default()\n\n    loader = Loader(current_engine)\n    return loader.get_dirs()\n</code></pre>"},{"location":"reference/django_components/autodiscover/#django_components.autodiscover.import_libraries","title":"import_libraries","text":"<pre><code>import_libraries(map_module: Optional[Callable[[str], str]] = None) -&gt; List[str]\n</code></pre> <p>Import modules set in <code>COMPONENTS.libraries</code> setting.</p> <p>You can map the module paths with <code>map_module</code> function. This serves as an escape hatch for when you need to use this function in tests.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def import_libraries(\n    map_module: Optional[Callable[[str], str]] = None,\n) -&gt; List[str]:\n    \"\"\"\n    Import modules set in `COMPONENTS.libraries` setting.\n\n    You can map the module paths with `map_module` function. This serves\n    as an escape hatch for when you need to use this function in tests.\n    \"\"\"\n    from django_components.app_settings import app_settings\n\n    return _import_modules(app_settings.LIBRARIES, map_module)\n</code></pre>"},{"location":"reference/django_components/autodiscover/#django_components.autodiscover.search_dirs","title":"search_dirs","text":"<pre><code>search_dirs(dirs: List[Path], search_glob: str) -&gt; List[Path]\n</code></pre> <p>Search the directories for the given glob pattern. Glob search results are returned as a flattened list.</p> Source code in <code>src/django_components/autodiscover.py</code> <pre><code>def search_dirs(dirs: List[Path], search_glob: str) -&gt; List[Path]:\n    \"\"\"\n    Search the directories for the given glob pattern. Glob search results are returned\n    as a flattened list.\n    \"\"\"\n    matched_files: List[Path] = []\n    for directory in dirs:\n        for path in glob.iglob(str(Path(directory) / search_glob), recursive=True):\n            matched_files.append(Path(path))\n\n    return matched_files\n</code></pre>"},{"location":"reference/django_components/component/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> component","text":""},{"location":"reference/django_components/component/#django_components.component","title":"component","text":""},{"location":"reference/django_components/component/#django_components.component.Component","title":"Component","text":"<pre><code>Component(\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,\n)\n</code></pre> <p>               Bases: <code>Generic[ArgsType, KwargsType, DataType, SlotsType]</code></p> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,  # noqa F811\n):\n    # When user first instantiates the component class before calling\n    # `render` or `render_to_response`, then we want to allow the render\n    # function to make use of the instantiated object.\n    #\n    # So while `MyComp.render()` creates a new instance of MyComp internally,\n    # if we do `MyComp(registered_name=\"abc\").render()`, then we use the\n    # already-instantiated object.\n    #\n    # To achieve that, we want to re-assign the class methods as instance methods.\n    # For that we have to \"unwrap\" the class methods via __func__.\n    # See https://stackoverflow.com/a/76706399/9788634\n    self.render_to_response = types.MethodType(self.__class__.render_to_response.__func__, self)  # type: ignore\n    self.render = types.MethodType(self.__class__.render.__func__, self)  # type: ignore\n\n    self.registered_name: Optional[str] = registered_name\n    self.outer_context: Context = outer_context or Context()\n    self.fill_content = fill_content or {}\n    self.component_id = component_id or gen_id()\n    self.registry = registry or registry_\n    self._render_stack: Deque[RenderInput[ArgsType, KwargsType, SlotsType]] = deque()\n    # None == uninitialized, False == No types, Tuple == types\n    self._types: Optional[Union[Tuple[Any, Any, Any, Any], Literal[False]]] = None\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.Media","title":"Media  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Media = ComponentMediaInput\n</code></pre> <p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.css","title":"css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>css: Optional[str] = None\n</code></pre> <p>Inlined CSS associated with this component.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.input","title":"input  <code>property</code>","text":"<pre><code>input: RenderInput[ArgsType, KwargsType, SlotsType]\n</code></pre> <p>Input holds the data (like arg, kwargs, slots) that were passsed to the current execution of the <code>render</code> method.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.js","title":"js  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>js: Optional[str] = None\n</code></pre> <p>Inlined JS associated with this component.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.media","title":"media  <code>instance-attribute</code>","text":"<pre><code>media: Media\n</code></pre> <p>Normalized definition of JS and CSS media files associated with this component.</p> <p>NOTE: This field is generated from Component.Media class.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.response_class","title":"response_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>response_class = HttpResponse\n</code></pre> <p>This allows to configure what class is used to generate response from <code>render_to_response</code></p>"},{"location":"reference/django_components/component/#django_components.component.Component.template","title":"template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template: Optional[str] = None\n</code></pre> <p>Inlined Django template associated with this component.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.template_name","title":"template_name  <code>class-attribute</code>","text":"<pre><code>template_name: Optional[str] = None\n</code></pre> <p>Relative filepath to the Django template associated with this component.</p>"},{"location":"reference/django_components/component/#django_components.component.Component.as_view","title":"as_view  <code>classmethod</code>","text":"<pre><code>as_view(**initkwargs: Any) -&gt; ViewFn\n</code></pre> <p>Shortcut for calling <code>Component.View.as_view</code> and passing component instance to it.</p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef as_view(cls, **initkwargs: Any) -&gt; ViewFn:\n    \"\"\"\n    Shortcut for calling `Component.View.as_view` and passing component instance to it.\n    \"\"\"\n    # Allow the View class to access this component via `self.component`\n    component = cls()\n    return component.View.as_view(**initkwargs, component=component)\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.inject","title":"inject","text":"<pre><code>inject(key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Use this method to retrieve the data that was passed to a <code>{% provide %}</code> tag with the corresponding key.</p> <p>To retrieve the data, <code>inject()</code> must be called inside a component that's inside the <code>{% provide %}</code> tag.</p> <p>You may also pass a default that will be used if the <code>provide</code> tag with given key was NOT found.</p> <p>This method mut be used inside the <code>get_context_data()</code> method and raises an error if called elsewhere.</p> <p>Example:</p> <p>Given this template: <pre><code>{% provide \"provider\" hello=\"world\" %}\n    {% component \"my_comp\" %}\n    {% endcomponent %}\n{% endprovide %}\n</code></pre></p> <p>And given this definition of \"my_comp\" component: <pre><code>from django_components import Component, register\n\n@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"hi {{ data.hello }}!\"\n    def get_context_data(self):\n        data = self.inject(\"provider\")\n        return {\"data\": data}\n</code></pre></p> <p>This renders into: <pre><code>hi world!\n</code></pre></p> <p>As the <code>{{ data.hello }}</code> is taken from the \"provider\".</p> Source code in <code>src/django_components/component.py</code> <pre><code>def inject(self, key: str, default: Optional[Any] = None) -&gt; Any:\n    \"\"\"\n    Use this method to retrieve the data that was passed to a `{% provide %}` tag\n    with the corresponding key.\n\n    To retrieve the data, `inject()` must be called inside a component that's\n    inside the `{% provide %}` tag.\n\n    You may also pass a default that will be used if the `provide` tag with given\n    key was NOT found.\n\n    This method mut be used inside the `get_context_data()` method and raises\n    an error if called elsewhere.\n\n    Example:\n\n    Given this template:\n    ```django\n    {% provide \"provider\" hello=\"world\" %}\n        {% component \"my_comp\" %}\n        {% endcomponent %}\n    {% endprovide %}\n    ```\n\n    And given this definition of \"my_comp\" component:\n    ```py\n    from django_components import Component, register\n\n    @register(\"my_comp\")\n    class MyComp(Component):\n        template = \"hi {{ data.hello }}!\"\n        def get_context_data(self):\n            data = self.inject(\"provider\")\n            return {\"data\": data}\n    ```\n\n    This renders into:\n    ```\n    hi world!\n    ```\n\n    As the `{{ data.hello }}` is taken from the \"provider\".\n    \"\"\"\n    if self.input is None:\n        raise RuntimeError(\n            f\"Method 'inject()' of component '{self.name}' was called outside of 'get_context_data()'\"\n        )\n\n    return get_injected_context_var(self.name, self.input.context, key, default)\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.on_render_after","title":"on_render_after","text":"<pre><code>on_render_after(context: Context, template: Template, content: str) -&gt; Optional[SlotResult]\n</code></pre> <p>Hook that runs just after the component's template was rendered. It receives the rendered output as the last argument.</p> <p>You can use this hook to access the context or the template, but modifying them won't have any effect.</p> <p>To override the content that gets rendered, you can return a string or SafeString from this hook.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_after(self, context: Context, template: Template, content: str) -&gt; Optional[SlotResult]:\n    \"\"\"\n    Hook that runs just after the component's template was rendered.\n    It receives the rendered output as the last argument.\n\n    You can use this hook to access the context or the template, but modifying\n    them won't have any effect.\n\n    To override the content that gets rendered, you can return a string or SafeString\n    from this hook.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.on_render_before","title":"on_render_before","text":"<pre><code>on_render_before(context: Context, template: Template) -&gt; None\n</code></pre> <p>Hook that runs just before the component's template is rendered.</p> <p>You can use this hook to access or modify the context or the template.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_before(self, context: Context, template: Template) -&gt; None:\n    \"\"\"\n    Hook that runs just before the component's template is rendered.\n\n    You can use this hook to access or modify the context or the template.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.render","title":"render  <code>classmethod</code>","text":"<pre><code>render(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str\n</code></pre> <p>Render the component into a string.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Example: <pre><code>MyComponent.render(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str:\n    \"\"\"\n    Render the component into a string.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Example:\n    ```py\n    MyComponent.render(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n    )\n    ```\n    \"\"\"\n    # This method may be called as class method or as instance method.\n    # If called as class method, create a new instance.\n    if isinstance(cls, Component):\n        comp: Component = cls\n    else:\n        comp = cls()\n\n    return comp._render(context, args, kwargs, slots, escape_slots_content)\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.render_css_dependencies","title":"render_css_dependencies","text":"<pre><code>render_css_dependencies() -&gt; SafeString\n</code></pre> <p>Render only CSS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_css_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only CSS dependencies available in the media class or provided as a string.\"\"\"\n    if self.css is not None:\n        return mark_safe(f\"&lt;style&gt;{self.css}&lt;/style&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_css()))\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.render_dependencies","title":"render_dependencies","text":"<pre><code>render_dependencies() -&gt; SafeString\n</code></pre> <p>Helper function to render all dependencies for a component.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_dependencies(self) -&gt; SafeString:\n    \"\"\"Helper function to render all dependencies for a component.\"\"\"\n    dependencies = []\n\n    css_deps = self.render_css_dependencies()\n    if css_deps:\n        dependencies.append(css_deps)\n\n    js_deps = self.render_js_dependencies()\n    if js_deps:\n        dependencies.append(js_deps)\n\n    return mark_safe(\"\\n\".join(dependencies))\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.render_js_dependencies","title":"render_js_dependencies","text":"<pre><code>render_js_dependencies() -&gt; SafeString\n</code></pre> <p>Render only JS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_js_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only JS dependencies available in the media class or provided as a string.\"\"\"\n    if self.js is not None:\n        return mark_safe(f\"&lt;script&gt;{self.js}&lt;/script&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_js()))\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.Component.render_to_response","title":"render_to_response  <code>classmethod</code>","text":"<pre><code>render_to_response(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any\n) -&gt; HttpResponse\n</code></pre> <p>Render the component and wrap the content in the response class.</p> <p>The response class is taken from <code>Component.response_class</code>. Defaults to <code>django.http.HttpResponse</code>.</p> <p>This is the interface for the <code>django.views.View</code> class which allows us to use components as Django views with <code>component.as_view()</code>.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Any additional args and kwargs are passed to the <code>response_class</code>.</p> <p>Example: <pre><code>MyComponent.render_to_response(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n    # HttpResponse input\n    status=201,\n    headers={...},\n)\n# HttpResponse(content=..., status=201, headers=...)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render_to_response(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any,\n) -&gt; HttpResponse:\n    \"\"\"\n    Render the component and wrap the content in the response class.\n\n    The response class is taken from `Component.response_class`. Defaults to `django.http.HttpResponse`.\n\n    This is the interface for the `django.views.View` class which allows us to\n    use components as Django views with `component.as_view()`.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Any additional args and kwargs are passed to the `response_class`.\n\n    Example:\n    ```py\n    MyComponent.render_to_response(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n        # HttpResponse input\n        status=201,\n        headers={...},\n    )\n    # HttpResponse(content=..., status=201, headers=...)\n    ```\n    \"\"\"\n    content = cls.render(\n        args=args,\n        kwargs=kwargs,\n        context=context,\n        slots=slots,\n        escape_slots_content=escape_slots_content,\n    )\n    return cls.response_class(content, *response_args, **response_kwargs)\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.ComponentNode","title":"ComponentNode","text":"<pre><code>ComponentNode(\n    name: str,\n    args: List[Expression],\n    kwargs: RuntimeKwargs,\n    registry: ComponentRegistry,\n    isolated_context: bool = False,\n    fill_nodes: Optional[List[FillNode]] = None,\n    node_id: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> <p>Django.template.Node subclass that renders a django-components component</p> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    args: List[Expression],\n    kwargs: RuntimeKwargs,\n    registry: ComponentRegistry,  # noqa F811\n    isolated_context: bool = False,\n    fill_nodes: Optional[List[FillNode]] = None,\n    node_id: Optional[str] = None,\n) -&gt; None:\n    super().__init__(nodelist=NodeList(fill_nodes), args=args, kwargs=kwargs, node_id=node_id)\n\n    self.name = name\n    self.isolated_context = isolated_context\n    self.fill_nodes = fill_nodes or []\n    self.registry = registry\n</code></pre>"},{"location":"reference/django_components/component/#django_components.component.ComponentView","title":"ComponentView","text":"<pre><code>ComponentView(component: Component, **kwargs: Any)\n</code></pre> <p>               Bases: <code>View</code></p> <p>Subclass of <code>django.views.View</code> where the <code>Component</code> instance is available via <code>self.component</code>.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(self, component: \"Component\", **kwargs: Any) -&gt; None:\n    super().__init__(**kwargs)\n    self.component = component\n</code></pre>"},{"location":"reference/django_components/component_media/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> component_media","text":""},{"location":"reference/django_components/component_media/#django_components.component_media","title":"component_media","text":""},{"location":"reference/django_components/component_media/#django_components.component_media.ComponentMediaInput","title":"ComponentMediaInput","text":"<p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/component_media/#django_components.component_media.MediaMeta","title":"MediaMeta","text":"<p>               Bases: <code>MediaDefiningClass</code></p> <p>Metaclass for handling media files for components.</p> <p>Similar to <code>MediaDefiningClass</code>, this class supports the use of <code>Media</code> attribute to define associated JS/CSS files, which are then available under <code>media</code> attribute as a instance of <code>Media</code> class.</p> <p>This subclass has following changes:</p>"},{"location":"reference/django_components/component_media/#django_components.component_media.MediaMeta--1-support-for-multiple-interfaces-of-jscss","title":"1. Support for multiple interfaces of JS/CSS","text":"<ol> <li> <p>As plain strings     <pre><code>class MyComponent(Component):\n    class Media:\n        js = \"path/to/script.js\"\n        css = \"path/to/style.css\"\n</code></pre></p> </li> <li> <p>As lists     <pre><code>class MyComponent(Component):\n    class Media:\n        js = [\"path/to/script1.js\", \"path/to/script2.js\"]\n        css = [\"path/to/style1.css\", \"path/to/style2.css\"]\n</code></pre></p> </li> <li> <p>[CSS ONLY] Dicts of strings     <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": \"path/to/style1.css\",\n            \"print\": \"path/to/style2.css\",\n        }\n</code></pre></p> </li> <li> <p>[CSS ONLY] Dicts of lists     <pre><code>class MyComponent(Component):\n    class Media:\n        css = {\n            \"all\": [\"path/to/style1.css\"],\n            \"print\": [\"path/to/style2.css\"],\n        }\n</code></pre></p> </li> </ol>"},{"location":"reference/django_components/component_media/#django_components.component_media.MediaMeta--2-media-are-first-resolved-relative-to-class-definition-file","title":"2. Media are first resolved relative to class definition file","text":"<p>E.g. if in a directory <code>my_comp</code> you have <code>script.js</code> and <code>my_comp.py</code>, and <code>my_comp.py</code> looks like this:</p> <pre><code>class MyComponent(Component):\n    class Media:\n        js = \"script.js\"\n</code></pre> <p>Then <code>script.js</code> will be resolved as <code>my_comp/script.js</code>.</p>"},{"location":"reference/django_components/component_media/#django_components.component_media.MediaMeta--3-media-can-be-defined-as-str-bytes-pathlike-safestring-or-function-of-thereof","title":"3. Media can be defined as str, bytes, PathLike, SafeString, or function of thereof","text":"<p>E.g.:</p> <pre><code>def lazy_eval_css():\n    # do something\n    return path\n\nclass MyComponent(Component):\n    class Media:\n        js = b\"script.js\"\n        css = lazy_eval_css\n</code></pre>"},{"location":"reference/django_components/component_media/#django_components.component_media.MediaMeta--4-subclass-media-class-with-media_class","title":"4. Subclass <code>Media</code> class with <code>media_class</code>","text":"<p>Normal <code>MediaDefiningClass</code> creates an instance of <code>Media</code> class under the <code>media</code> attribute. This class allows to override which class will be instantiated with <code>media_class</code> attribute:</p> <pre><code>class MyMedia(Media):\n    def render_js(self):\n        ...\n\nclass MyComponent(Component):\n    media_class = MyMedia\n    def get_context_data(self):\n        assert isinstance(self.media, MyMedia)\n</code></pre>"},{"location":"reference/django_components/component_registry/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> component_registry","text":""},{"location":"reference/django_components/component_registry/#django_components.component_registry","title":"component_registry","text":""},{"location":"reference/django_components/component_registry/#django_components.component_registry.registry","title":"registry  <code>module-attribute</code>","text":"<pre><code>registry: ComponentRegistry = ComponentRegistry()\n</code></pre> <p>The default and global component registry. Use this instance to directly register or remove components:</p> <pre><code># Register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n# Get single\nregistry.get(\"button\")\n# Get all\nregistry.all()\n# Unregister single\nregistry.unregister(\"button\")\n# Unregister all\nregistry.clear()\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry","title":"ComponentRegistry","text":"<pre><code>ComponentRegistry(\n    library: Optional[Library] = None, settings: Optional[Union[RegistrySettings, Callable[[ComponentRegistry], RegistrySettings]]] = None\n)\n</code></pre> <p>Manages which components can be used in the template tags.</p> <p>Each ComponentRegistry instance is associated with an instance of Django's Library. So when you register or unregister a component to/from a component registry, behind the scenes the registry automatically adds/removes the component's template tag to/from the Library.</p> <p>The Library instance can be set at instantiation. If omitted, then the default Library instance from django_components is used. The Library instance can be accessed under <code>library</code> attribute.</p> <p>Example:</p> <pre><code># Use with default Library\nregistry = ComponentRegistry()\n\n# Or a custom one\nmy_lib = Library()\nregistry = ComponentRegistry(library=my_lib)\n\n# Usage\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\nregistry.all()\nregistry.clear()\nregistry.get()\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def __init__(\n    self,\n    library: Optional[Library] = None,\n    settings: Optional[Union[RegistrySettings, Callable[[\"ComponentRegistry\"], RegistrySettings]]] = None,\n) -&gt; None:\n    self._registry: Dict[str, ComponentRegistryEntry] = {}  # component name -&gt; component_entry mapping\n    self._tags: Dict[str, Set[str]] = {}  # tag -&gt; list[component names]\n    self._library = library\n    self._settings_input = settings\n    self._settings: Optional[Callable[[], InternalRegistrySettings]] = None\n\n    all_registries.append(self)\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry.library","title":"library  <code>property</code>","text":"<pre><code>library: Library\n</code></pre> <p>The template tag library with which the component registry is associated.</p>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry.all","title":"all","text":"<pre><code>all() -&gt; Dict[str, Type[Component]]\n</code></pre> <p>Retrieve all registered component classes.</p> <p>Example:</p> <pre><code># First register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n# Then get all\nregistry.all()\n# &gt; {\n# &gt;   \"button\": ButtonComponent,\n# &gt;   \"card\": CardComponent,\n# &gt; }\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def all(self) -&gt; Dict[str, Type[\"Component\"]]:\n    \"\"\"\n    Retrieve all registered component classes.\n\n    Example:\n\n    ```py\n    # First register components\n    registry.register(\"button\", ButtonComponent)\n    registry.register(\"card\", CardComponent)\n    # Then get all\n    registry.all()\n    # &gt; {\n    # &gt;   \"button\": ButtonComponent,\n    # &gt;   \"card\": CardComponent,\n    # &gt; }\n    ```\n    \"\"\"\n    comps = {key: entry.cls for key, entry in self._registry.items()}\n    return comps\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clears the registry, unregistering all components.</p> <p>Example:</p> <pre><code># First register components\nregistry.register(\"button\", ButtonComponent)\nregistry.register(\"card\", CardComponent)\n# Then clear\nregistry.clear()\n# Then get all\nregistry.all()\n# &gt; {}\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    Clears the registry, unregistering all components.\n\n    Example:\n\n    ```py\n    # First register components\n    registry.register(\"button\", ButtonComponent)\n    registry.register(\"card\", CardComponent)\n    # Then clear\n    registry.clear()\n    # Then get all\n    registry.all()\n    # &gt; {}\n    ```\n    \"\"\"\n    all_comp_names = list(self._registry.keys())\n    for comp_name in all_comp_names:\n        self.unregister(comp_name)\n\n    self._registry = {}\n    self._tags = {}\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry.get","title":"get","text":"<pre><code>get(name: str) -&gt; Type[Component]\n</code></pre> <p>Retrieve a component class registered under the given name.</p> <p>Raises <code>NotRegistered</code> if the given name is not registered.</p> <p>Example:</p> <pre><code># First register component\nregistry.register(\"button\", ButtonComponent)\n# Then get\nregistry.get(\"button\")\n# &gt; ButtonComponent\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def get(self, name: str) -&gt; Type[\"Component\"]:\n    \"\"\"\n    Retrieve a component class registered under the given name.\n\n    Raises `NotRegistered` if the given name is not registered.\n\n    Example:\n\n    ```py\n    # First register component\n    registry.register(\"button\", ButtonComponent)\n    # Then get\n    registry.get(\"button\")\n    # &gt; ButtonComponent\n    ```\n    \"\"\"\n    if name not in self._registry:\n        raise NotRegistered('The component \"%s\" is not registered' % name)\n\n    return self._registry[name].cls\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry.register","title":"register","text":"<pre><code>register(name: str, component: Type[Component]) -&gt; None\n</code></pre> <p>Register a component with this registry under the given name.</p> <p>A component MUST be registered before it can be used in a template such as: <pre><code>{% component \"my_comp\" %}{% endcomponent %}\n</code></pre></p> <p>Raises <code>AlreadyRegistered</code> if a different component was already registered under the same name.</p> <p>Example:</p> <pre><code>registry.register(\"button\", ButtonComponent)\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def register(self, name: str, component: Type[\"Component\"]) -&gt; None:\n    \"\"\"\n    Register a component with this registry under the given name.\n\n    A component MUST be registered before it can be used in a template such as:\n    ```django\n    {% component \"my_comp\" %}{% endcomponent %}\n    ```\n\n    Raises `AlreadyRegistered` if a different component was already registered\n    under the same name.\n\n    Example:\n\n    ```py\n    registry.register(\"button\", ButtonComponent)\n    ```\n    \"\"\"\n    existing_component = self._registry.get(name)\n    if existing_component and existing_component.cls._class_hash != component._class_hash:\n        raise AlreadyRegistered('The component \"%s\" has already been registered' % name)\n\n    entry = self._register_to_library(name, component)\n\n    # Keep track of which components use which tags, because multiple components may\n    # use the same tag.\n    tag = entry.tag\n    if tag not in self._tags:\n        self._tags[tag] = set()\n    self._tags[tag].add(name)\n\n    self._registry[name] = entry\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.ComponentRegistry.unregister","title":"unregister","text":"<pre><code>unregister(name: str) -&gt; None\n</code></pre> <p>Unlinks a previously-registered component from the registry under the given name.</p> <p>Once a component is unregistered, it CANNOT be used in a template anymore. Following would raise an error: <pre><code>{% component \"my_comp\" %}{% endcomponent %}\n</code></pre></p> <p>Raises <code>NotRegistered</code> if the given name is not registered.</p> <p>Example:</p> <pre><code># First register component\nregistry.register(\"button\", ButtonComponent)\n# Then unregister\nregistry.unregister(\"button\")\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def unregister(self, name: str) -&gt; None:\n    \"\"\"\n    Unlinks a previously-registered component from the registry under the given name.\n\n    Once a component is unregistered, it CANNOT be used in a template anymore.\n    Following would raise an error:\n    ```django\n    {% component \"my_comp\" %}{% endcomponent %}\n    ```\n\n    Raises `NotRegistered` if the given name is not registered.\n\n    Example:\n\n    ```py\n    # First register component\n    registry.register(\"button\", ButtonComponent)\n    # Then unregister\n    registry.unregister(\"button\")\n    ```\n    \"\"\"\n    # Validate\n    self.get(name)\n\n    entry = self._registry[name]\n    tag = entry.tag\n\n    # Unregister the tag from library if this was the last component using this tag\n    # Unlink component from tag\n    self._tags[tag].remove(name)\n\n    # Cleanup\n    is_tag_empty = not len(self._tags[tag])\n    if is_tag_empty:\n        del self._tags[tag]\n\n    # Only unregister a tag if it's NOT protected\n    is_protected = is_tag_protected(self.library, tag)\n    if not is_protected:\n        # Unregister the tag from library if this was the last component using this tag\n        if is_tag_empty and tag in self.library.tags:\n            del self.library.tags[tag]\n\n    del self._registry[name]\n</code></pre>"},{"location":"reference/django_components/component_registry/#django_components.component_registry.register","title":"register","text":"<pre><code>register(name: str, registry: Optional[ComponentRegistry] = None) -&gt; Callable[[_TComp], _TComp]\n</code></pre> <p>Class decorator to register a component.</p> <p>Usage:</p> <pre><code>@register(\"my_component\")\nclass MyComponent(Component):\n    ...\n</code></pre> <p>Optionally specify which <code>ComponentRegistry</code> the component should be registered to by setting the <code>registry</code> kwarg:</p> <pre><code>my_lib = django.template.Library()\nmy_reg = ComponentRegistry(library=my_lib)\n\n@register(\"my_component\", registry=my_reg)\nclass MyComponent(Component):\n    ...\n</code></pre> Source code in <code>src/django_components/component_registry.py</code> <pre><code>def register(name: str, registry: Optional[ComponentRegistry] = None) -&gt; Callable[[_TComp], _TComp]:\n    \"\"\"\n    Class decorator to register a component.\n\n    Usage:\n\n    ```py\n    @register(\"my_component\")\n    class MyComponent(Component):\n        ...\n    ```\n\n    Optionally specify which `ComponentRegistry` the component should be registered to by\n    setting the `registry` kwarg:\n\n    ```py\n    my_lib = django.template.Library()\n    my_reg = ComponentRegistry(library=my_lib)\n\n    @register(\"my_component\", registry=my_reg)\n    class MyComponent(Component):\n        ...\n    ```\n    \"\"\"\n    if registry is None:\n        registry = _the_registry\n\n    def decorator(component: _TComp) -&gt; _TComp:\n        registry.register(name=name, component=component)\n        return component\n\n    return decorator\n</code></pre>"},{"location":"reference/django_components/components/","title":"Index","text":""},{"location":"reference/django_components/components/#django_components.components","title":"components","text":""},{"location":"reference/django_components/components/#django_components.components.dynamic","title":"dynamic","text":""},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent","title":"DynamicComponent","text":"<pre><code>DynamicComponent(\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,\n)\n</code></pre> <p>               Bases: <code>Component</code></p> <p>Dynamic component - This component takes inputs and renders the outputs depending on the <code>is</code> and <code>registry</code> arguments.</p> <ul> <li> <p><code>is</code> - required - The component class or registered name of the component that will be rendered in this place.</p> </li> <li> <p><code>registry</code> - optional - Specify the registry to search for the registered name. If omitted, all registries are searched.</p> </li> </ul> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,  # noqa F811\n):\n    # When user first instantiates the component class before calling\n    # `render` or `render_to_response`, then we want to allow the render\n    # function to make use of the instantiated object.\n    #\n    # So while `MyComp.render()` creates a new instance of MyComp internally,\n    # if we do `MyComp(registered_name=\"abc\").render()`, then we use the\n    # already-instantiated object.\n    #\n    # To achieve that, we want to re-assign the class methods as instance methods.\n    # For that we have to \"unwrap\" the class methods via __func__.\n    # See https://stackoverflow.com/a/76706399/9788634\n    self.render_to_response = types.MethodType(self.__class__.render_to_response.__func__, self)  # type: ignore\n    self.render = types.MethodType(self.__class__.render.__func__, self)  # type: ignore\n\n    self.registered_name: Optional[str] = registered_name\n    self.outer_context: Context = outer_context or Context()\n    self.fill_content = fill_content or {}\n    self.component_id = component_id or gen_id()\n    self.registry = registry or registry_\n    self._render_stack: Deque[RenderInput[ArgsType, KwargsType, SlotsType]] = deque()\n    # None == uninitialized, False == No types, Tuple == types\n    self._types: Optional[Union[Tuple[Any, Any, Any, Any], Literal[False]]] = None\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.Media","title":"Media  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Media = ComponentMediaInput\n</code></pre> <p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.css","title":"css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>css: Optional[str] = None\n</code></pre> <p>Inlined CSS associated with this component.</p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.input","title":"input  <code>property</code>","text":"<pre><code>input: RenderInput[ArgsType, KwargsType, SlotsType]\n</code></pre> <p>Input holds the data (like arg, kwargs, slots) that were passsed to the current execution of the <code>render</code> method.</p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.js","title":"js  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>js: Optional[str] = None\n</code></pre> <p>Inlined JS associated with this component.</p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.media","title":"media  <code>instance-attribute</code>","text":"<pre><code>media: Media\n</code></pre> <p>Normalized definition of JS and CSS media files associated with this component.</p> <p>NOTE: This field is generated from Component.Media class.</p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.response_class","title":"response_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>response_class = HttpResponse\n</code></pre> <p>This allows to configure what class is used to generate response from <code>render_to_response</code></p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.template_name","title":"template_name  <code>class-attribute</code>","text":"<pre><code>template_name: Optional[str] = None\n</code></pre> <p>Relative filepath to the Django template associated with this component.</p>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.as_view","title":"as_view  <code>classmethod</code>","text":"<pre><code>as_view(**initkwargs: Any) -&gt; ViewFn\n</code></pre> <p>Shortcut for calling <code>Component.View.as_view</code> and passing component instance to it.</p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef as_view(cls, **initkwargs: Any) -&gt; ViewFn:\n    \"\"\"\n    Shortcut for calling `Component.View.as_view` and passing component instance to it.\n    \"\"\"\n    # Allow the View class to access this component via `self.component`\n    component = cls()\n    return component.View.as_view(**initkwargs, component=component)\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.inject","title":"inject","text":"<pre><code>inject(key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Use this method to retrieve the data that was passed to a <code>{% provide %}</code> tag with the corresponding key.</p> <p>To retrieve the data, <code>inject()</code> must be called inside a component that's inside the <code>{% provide %}</code> tag.</p> <p>You may also pass a default that will be used if the <code>provide</code> tag with given key was NOT found.</p> <p>This method mut be used inside the <code>get_context_data()</code> method and raises an error if called elsewhere.</p> <p>Example:</p> <p>Given this template: <pre><code>{% provide \"provider\" hello=\"world\" %}\n    {% component \"my_comp\" %}\n    {% endcomponent %}\n{% endprovide %}\n</code></pre></p> <p>And given this definition of \"my_comp\" component: <pre><code>from django_components import Component, register\n\n@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"hi {{ data.hello }}!\"\n    def get_context_data(self):\n        data = self.inject(\"provider\")\n        return {\"data\": data}\n</code></pre></p> <p>This renders into: <pre><code>hi world!\n</code></pre></p> <p>As the <code>{{ data.hello }}</code> is taken from the \"provider\".</p> Source code in <code>src/django_components/component.py</code> <pre><code>def inject(self, key: str, default: Optional[Any] = None) -&gt; Any:\n    \"\"\"\n    Use this method to retrieve the data that was passed to a `{% provide %}` tag\n    with the corresponding key.\n\n    To retrieve the data, `inject()` must be called inside a component that's\n    inside the `{% provide %}` tag.\n\n    You may also pass a default that will be used if the `provide` tag with given\n    key was NOT found.\n\n    This method mut be used inside the `get_context_data()` method and raises\n    an error if called elsewhere.\n\n    Example:\n\n    Given this template:\n    ```django\n    {% provide \"provider\" hello=\"world\" %}\n        {% component \"my_comp\" %}\n        {% endcomponent %}\n    {% endprovide %}\n    ```\n\n    And given this definition of \"my_comp\" component:\n    ```py\n    from django_components import Component, register\n\n    @register(\"my_comp\")\n    class MyComp(Component):\n        template = \"hi {{ data.hello }}!\"\n        def get_context_data(self):\n            data = self.inject(\"provider\")\n            return {\"data\": data}\n    ```\n\n    This renders into:\n    ```\n    hi world!\n    ```\n\n    As the `{{ data.hello }}` is taken from the \"provider\".\n    \"\"\"\n    if self.input is None:\n        raise RuntimeError(\n            f\"Method 'inject()' of component '{self.name}' was called outside of 'get_context_data()'\"\n        )\n\n    return get_injected_context_var(self.name, self.input.context, key, default)\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.on_render_after","title":"on_render_after","text":"<pre><code>on_render_after(context: Context, template: Template, content: str) -&gt; Optional[SlotResult]\n</code></pre> <p>Hook that runs just after the component's template was rendered. It receives the rendered output as the last argument.</p> <p>You can use this hook to access the context or the template, but modifying them won't have any effect.</p> <p>To override the content that gets rendered, you can return a string or SafeString from this hook.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_after(self, context: Context, template: Template, content: str) -&gt; Optional[SlotResult]:\n    \"\"\"\n    Hook that runs just after the component's template was rendered.\n    It receives the rendered output as the last argument.\n\n    You can use this hook to access the context or the template, but modifying\n    them won't have any effect.\n\n    To override the content that gets rendered, you can return a string or SafeString\n    from this hook.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.on_render_before","title":"on_render_before","text":"<pre><code>on_render_before(context: Context, template: Template) -&gt; None\n</code></pre> <p>Hook that runs just before the component's template is rendered.</p> <p>You can use this hook to access or modify the context or the template.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_before(self, context: Context, template: Template) -&gt; None:\n    \"\"\"\n    Hook that runs just before the component's template is rendered.\n\n    You can use this hook to access or modify the context or the template.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.render","title":"render  <code>classmethod</code>","text":"<pre><code>render(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str\n</code></pre> <p>Render the component into a string.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Example: <pre><code>MyComponent.render(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str:\n    \"\"\"\n    Render the component into a string.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Example:\n    ```py\n    MyComponent.render(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n    )\n    ```\n    \"\"\"\n    # This method may be called as class method or as instance method.\n    # If called as class method, create a new instance.\n    if isinstance(cls, Component):\n        comp: Component = cls\n    else:\n        comp = cls()\n\n    return comp._render(context, args, kwargs, slots, escape_slots_content)\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.render_css_dependencies","title":"render_css_dependencies","text":"<pre><code>render_css_dependencies() -&gt; SafeString\n</code></pre> <p>Render only CSS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_css_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only CSS dependencies available in the media class or provided as a string.\"\"\"\n    if self.css is not None:\n        return mark_safe(f\"&lt;style&gt;{self.css}&lt;/style&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_css()))\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.render_dependencies","title":"render_dependencies","text":"<pre><code>render_dependencies() -&gt; SafeString\n</code></pre> <p>Helper function to render all dependencies for a component.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_dependencies(self) -&gt; SafeString:\n    \"\"\"Helper function to render all dependencies for a component.\"\"\"\n    dependencies = []\n\n    css_deps = self.render_css_dependencies()\n    if css_deps:\n        dependencies.append(css_deps)\n\n    js_deps = self.render_js_dependencies()\n    if js_deps:\n        dependencies.append(js_deps)\n\n    return mark_safe(\"\\n\".join(dependencies))\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.render_js_dependencies","title":"render_js_dependencies","text":"<pre><code>render_js_dependencies() -&gt; SafeString\n</code></pre> <p>Render only JS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_js_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only JS dependencies available in the media class or provided as a string.\"\"\"\n    if self.js is not None:\n        return mark_safe(f\"&lt;script&gt;{self.js}&lt;/script&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_js()))\n</code></pre>"},{"location":"reference/django_components/components/#django_components.components.dynamic.DynamicComponent.render_to_response","title":"render_to_response  <code>classmethod</code>","text":"<pre><code>render_to_response(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any\n) -&gt; HttpResponse\n</code></pre> <p>Render the component and wrap the content in the response class.</p> <p>The response class is taken from <code>Component.response_class</code>. Defaults to <code>django.http.HttpResponse</code>.</p> <p>This is the interface for the <code>django.views.View</code> class which allows us to use components as Django views with <code>component.as_view()</code>.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Any additional args and kwargs are passed to the <code>response_class</code>.</p> <p>Example: <pre><code>MyComponent.render_to_response(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n    # HttpResponse input\n    status=201,\n    headers={...},\n)\n# HttpResponse(content=..., status=201, headers=...)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render_to_response(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any,\n) -&gt; HttpResponse:\n    \"\"\"\n    Render the component and wrap the content in the response class.\n\n    The response class is taken from `Component.response_class`. Defaults to `django.http.HttpResponse`.\n\n    This is the interface for the `django.views.View` class which allows us to\n    use components as Django views with `component.as_view()`.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Any additional args and kwargs are passed to the `response_class`.\n\n    Example:\n    ```py\n    MyComponent.render_to_response(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n        # HttpResponse input\n        status=201,\n        headers={...},\n    )\n    # HttpResponse(content=..., status=201, headers=...)\n    ```\n    \"\"\"\n    content = cls.render(\n        args=args,\n        kwargs=kwargs,\n        context=context,\n        slots=slots,\n        escape_slots_content=escape_slots_content,\n    )\n    return cls.response_class(content, *response_args, **response_kwargs)\n</code></pre>"},{"location":"reference/django_components/components/dynamic/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dynamic","text":""},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic","title":"dynamic","text":""},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent","title":"DynamicComponent","text":"<pre><code>DynamicComponent(\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,\n)\n</code></pre> <p>               Bases: <code>Component</code></p> <p>Dynamic component - This component takes inputs and renders the outputs depending on the <code>is</code> and <code>registry</code> arguments.</p> <ul> <li> <p><code>is</code> - required - The component class or registered name of the component that will be rendered in this place.</p> </li> <li> <p><code>registry</code> - optional - Specify the registry to search for the registered name. If omitted, all registries are searched.</p> </li> </ul> Source code in <code>src/django_components/component.py</code> <pre><code>def __init__(\n    self,\n    registered_name: Optional[str] = None,\n    component_id: Optional[str] = None,\n    outer_context: Optional[Context] = None,\n    fill_content: Optional[Dict[str, FillContent]] = None,\n    registry: Optional[ComponentRegistry] = None,  # noqa F811\n):\n    # When user first instantiates the component class before calling\n    # `render` or `render_to_response`, then we want to allow the render\n    # function to make use of the instantiated object.\n    #\n    # So while `MyComp.render()` creates a new instance of MyComp internally,\n    # if we do `MyComp(registered_name=\"abc\").render()`, then we use the\n    # already-instantiated object.\n    #\n    # To achieve that, we want to re-assign the class methods as instance methods.\n    # For that we have to \"unwrap\" the class methods via __func__.\n    # See https://stackoverflow.com/a/76706399/9788634\n    self.render_to_response = types.MethodType(self.__class__.render_to_response.__func__, self)  # type: ignore\n    self.render = types.MethodType(self.__class__.render.__func__, self)  # type: ignore\n\n    self.registered_name: Optional[str] = registered_name\n    self.outer_context: Context = outer_context or Context()\n    self.fill_content = fill_content or {}\n    self.component_id = component_id or gen_id()\n    self.registry = registry or registry_\n    self._render_stack: Deque[RenderInput[ArgsType, KwargsType, SlotsType]] = deque()\n    # None == uninitialized, False == No types, Tuple == types\n    self._types: Optional[Union[Tuple[Any, Any, Any, Any], Literal[False]]] = None\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.Media","title":"Media  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Media = ComponentMediaInput\n</code></pre> <p>Defines JS and CSS media files associated with this component.</p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.css","title":"css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>css: Optional[str] = None\n</code></pre> <p>Inlined CSS associated with this component.</p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.input","title":"input  <code>property</code>","text":"<pre><code>input: RenderInput[ArgsType, KwargsType, SlotsType]\n</code></pre> <p>Input holds the data (like arg, kwargs, slots) that were passsed to the current execution of the <code>render</code> method.</p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.js","title":"js  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>js: Optional[str] = None\n</code></pre> <p>Inlined JS associated with this component.</p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.media","title":"media  <code>instance-attribute</code>","text":"<pre><code>media: Media\n</code></pre> <p>Normalized definition of JS and CSS media files associated with this component.</p> <p>NOTE: This field is generated from Component.Media class.</p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.response_class","title":"response_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>response_class = HttpResponse\n</code></pre> <p>This allows to configure what class is used to generate response from <code>render_to_response</code></p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.template_name","title":"template_name  <code>class-attribute</code>","text":"<pre><code>template_name: Optional[str] = None\n</code></pre> <p>Relative filepath to the Django template associated with this component.</p>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.as_view","title":"as_view  <code>classmethod</code>","text":"<pre><code>as_view(**initkwargs: Any) -&gt; ViewFn\n</code></pre> <p>Shortcut for calling <code>Component.View.as_view</code> and passing component instance to it.</p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef as_view(cls, **initkwargs: Any) -&gt; ViewFn:\n    \"\"\"\n    Shortcut for calling `Component.View.as_view` and passing component instance to it.\n    \"\"\"\n    # Allow the View class to access this component via `self.component`\n    component = cls()\n    return component.View.as_view(**initkwargs, component=component)\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.inject","title":"inject","text":"<pre><code>inject(key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Use this method to retrieve the data that was passed to a <code>{% provide %}</code> tag with the corresponding key.</p> <p>To retrieve the data, <code>inject()</code> must be called inside a component that's inside the <code>{% provide %}</code> tag.</p> <p>You may also pass a default that will be used if the <code>provide</code> tag with given key was NOT found.</p> <p>This method mut be used inside the <code>get_context_data()</code> method and raises an error if called elsewhere.</p> <p>Example:</p> <p>Given this template: <pre><code>{% provide \"provider\" hello=\"world\" %}\n    {% component \"my_comp\" %}\n    {% endcomponent %}\n{% endprovide %}\n</code></pre></p> <p>And given this definition of \"my_comp\" component: <pre><code>from django_components import Component, register\n\n@register(\"my_comp\")\nclass MyComp(Component):\n    template = \"hi {{ data.hello }}!\"\n    def get_context_data(self):\n        data = self.inject(\"provider\")\n        return {\"data\": data}\n</code></pre></p> <p>This renders into: <pre><code>hi world!\n</code></pre></p> <p>As the <code>{{ data.hello }}</code> is taken from the \"provider\".</p> Source code in <code>src/django_components/component.py</code> <pre><code>def inject(self, key: str, default: Optional[Any] = None) -&gt; Any:\n    \"\"\"\n    Use this method to retrieve the data that was passed to a `{% provide %}` tag\n    with the corresponding key.\n\n    To retrieve the data, `inject()` must be called inside a component that's\n    inside the `{% provide %}` tag.\n\n    You may also pass a default that will be used if the `provide` tag with given\n    key was NOT found.\n\n    This method mut be used inside the `get_context_data()` method and raises\n    an error if called elsewhere.\n\n    Example:\n\n    Given this template:\n    ```django\n    {% provide \"provider\" hello=\"world\" %}\n        {% component \"my_comp\" %}\n        {% endcomponent %}\n    {% endprovide %}\n    ```\n\n    And given this definition of \"my_comp\" component:\n    ```py\n    from django_components import Component, register\n\n    @register(\"my_comp\")\n    class MyComp(Component):\n        template = \"hi {{ data.hello }}!\"\n        def get_context_data(self):\n            data = self.inject(\"provider\")\n            return {\"data\": data}\n    ```\n\n    This renders into:\n    ```\n    hi world!\n    ```\n\n    As the `{{ data.hello }}` is taken from the \"provider\".\n    \"\"\"\n    if self.input is None:\n        raise RuntimeError(\n            f\"Method 'inject()' of component '{self.name}' was called outside of 'get_context_data()'\"\n        )\n\n    return get_injected_context_var(self.name, self.input.context, key, default)\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.on_render_after","title":"on_render_after","text":"<pre><code>on_render_after(context: Context, template: Template, content: str) -&gt; Optional[SlotResult]\n</code></pre> <p>Hook that runs just after the component's template was rendered. It receives the rendered output as the last argument.</p> <p>You can use this hook to access the context or the template, but modifying them won't have any effect.</p> <p>To override the content that gets rendered, you can return a string or SafeString from this hook.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_after(self, context: Context, template: Template, content: str) -&gt; Optional[SlotResult]:\n    \"\"\"\n    Hook that runs just after the component's template was rendered.\n    It receives the rendered output as the last argument.\n\n    You can use this hook to access the context or the template, but modifying\n    them won't have any effect.\n\n    To override the content that gets rendered, you can return a string or SafeString\n    from this hook.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.on_render_before","title":"on_render_before","text":"<pre><code>on_render_before(context: Context, template: Template) -&gt; None\n</code></pre> <p>Hook that runs just before the component's template is rendered.</p> <p>You can use this hook to access or modify the context or the template.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def on_render_before(self, context: Context, template: Template) -&gt; None:\n    \"\"\"\n    Hook that runs just before the component's template is rendered.\n\n    You can use this hook to access or modify the context or the template.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.render","title":"render  <code>classmethod</code>","text":"<pre><code>render(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str\n</code></pre> <p>Render the component into a string.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Example: <pre><code>MyComponent.render(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n) -&gt; str:\n    \"\"\"\n    Render the component into a string.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Example:\n    ```py\n    MyComponent.render(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n    )\n    ```\n    \"\"\"\n    # This method may be called as class method or as instance method.\n    # If called as class method, create a new instance.\n    if isinstance(cls, Component):\n        comp: Component = cls\n    else:\n        comp = cls()\n\n    return comp._render(context, args, kwargs, slots, escape_slots_content)\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.render_css_dependencies","title":"render_css_dependencies","text":"<pre><code>render_css_dependencies() -&gt; SafeString\n</code></pre> <p>Render only CSS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_css_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only CSS dependencies available in the media class or provided as a string.\"\"\"\n    if self.css is not None:\n        return mark_safe(f\"&lt;style&gt;{self.css}&lt;/style&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_css()))\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.render_dependencies","title":"render_dependencies","text":"<pre><code>render_dependencies() -&gt; SafeString\n</code></pre> <p>Helper function to render all dependencies for a component.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_dependencies(self) -&gt; SafeString:\n    \"\"\"Helper function to render all dependencies for a component.\"\"\"\n    dependencies = []\n\n    css_deps = self.render_css_dependencies()\n    if css_deps:\n        dependencies.append(css_deps)\n\n    js_deps = self.render_js_dependencies()\n    if js_deps:\n        dependencies.append(js_deps)\n\n    return mark_safe(\"\\n\".join(dependencies))\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.render_js_dependencies","title":"render_js_dependencies","text":"<pre><code>render_js_dependencies() -&gt; SafeString\n</code></pre> <p>Render only JS dependencies available in the media class or provided as a string.</p> Source code in <code>src/django_components/component.py</code> <pre><code>def render_js_dependencies(self) -&gt; SafeString:\n    \"\"\"Render only JS dependencies available in the media class or provided as a string.\"\"\"\n    if self.js is not None:\n        return mark_safe(f\"&lt;script&gt;{self.js}&lt;/script&gt;\")\n    return mark_safe(\"\\n\".join(self.media.render_js()))\n</code></pre>"},{"location":"reference/django_components/components/dynamic/#django_components.components.dynamic.DynamicComponent.render_to_response","title":"render_to_response  <code>classmethod</code>","text":"<pre><code>render_to_response(\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any\n) -&gt; HttpResponse\n</code></pre> <p>Render the component and wrap the content in the response class.</p> <p>The response class is taken from <code>Component.response_class</code>. Defaults to <code>django.http.HttpResponse</code>.</p> <p>This is the interface for the <code>django.views.View</code> class which allows us to use components as Django views with <code>component.as_view()</code>.</p> <p>Inputs: - <code>args</code> - Positional args for the component. This is the same as calling the component   as <code>{% component \"my_comp\" arg1 arg2 ... %}</code> - <code>kwargs</code> - Kwargs for the component. This is the same as calling the component   as <code>{% component \"my_comp\" key1=val1 key2=val2 ... %}</code> - <code>slots</code> - Component slot fills. This is the same as pasing <code>{% fill %}</code> tags to the component.     Accepts a dictionary of <code>{ slot_name: slot_content }</code> where <code>slot_content</code> can be a string     or render function. - <code>escape_slots_content</code> - Whether the content from <code>slots</code> should be escaped. - <code>context</code> - A context (dictionary or Django's Context) within which the component   is rendered. The keys on the context can be accessed from within the template.     - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via       component's args and kwargs.</p> <p>Any additional args and kwargs are passed to the <code>response_class</code>.</p> <p>Example: <pre><code>MyComponent.render_to_response(\n    args=[1, \"two\", {}],\n    kwargs={\n        \"key\": 123,\n    },\n    slots={\n        \"header\": 'STATIC TEXT HERE',\n        \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n    },\n    escape_slots_content=False,\n    # HttpResponse input\n    status=201,\n    headers={...},\n)\n# HttpResponse(content=..., status=201, headers=...)\n</code></pre></p> Source code in <code>src/django_components/component.py</code> <pre><code>@classmethod\ndef render_to_response(\n    cls,\n    context: Optional[Union[Dict[str, Any], Context]] = None,\n    slots: Optional[SlotsType] = None,\n    escape_slots_content: bool = True,\n    args: Optional[ArgsType] = None,\n    kwargs: Optional[KwargsType] = None,\n    *response_args: Any,\n    **response_kwargs: Any,\n) -&gt; HttpResponse:\n    \"\"\"\n    Render the component and wrap the content in the response class.\n\n    The response class is taken from `Component.response_class`. Defaults to `django.http.HttpResponse`.\n\n    This is the interface for the `django.views.View` class which allows us to\n    use components as Django views with `component.as_view()`.\n\n    Inputs:\n    - `args` - Positional args for the component. This is the same as calling the component\n      as `{% component \"my_comp\" arg1 arg2 ... %}`\n    - `kwargs` - Kwargs for the component. This is the same as calling the component\n      as `{% component \"my_comp\" key1=val1 key2=val2 ... %}`\n    - `slots` - Component slot fills. This is the same as pasing `{% fill %}` tags to the component.\n        Accepts a dictionary of `{ slot_name: slot_content }` where `slot_content` can be a string\n        or render function.\n    - `escape_slots_content` - Whether the content from `slots` should be escaped.\n    - `context` - A context (dictionary or Django's Context) within which the component\n      is rendered. The keys on the context can be accessed from within the template.\n        - NOTE: In \"isolated\" mode, context is NOT accessible, and data MUST be passed via\n          component's args and kwargs.\n\n    Any additional args and kwargs are passed to the `response_class`.\n\n    Example:\n    ```py\n    MyComponent.render_to_response(\n        args=[1, \"two\", {}],\n        kwargs={\n            \"key\": 123,\n        },\n        slots={\n            \"header\": 'STATIC TEXT HERE',\n            \"footer\": lambda ctx, slot_kwargs, slot_ref: f'CTX: {ctx['hello']} SLOT_DATA: {slot_kwargs['abc']}',\n        },\n        escape_slots_content=False,\n        # HttpResponse input\n        status=201,\n        headers={...},\n    )\n    # HttpResponse(content=..., status=201, headers=...)\n    ```\n    \"\"\"\n    content = cls.render(\n        args=args,\n        kwargs=kwargs,\n        context=context,\n        slots=slots,\n        escape_slots_content=escape_slots_content,\n    )\n    return cls.response_class(content, *response_args, **response_kwargs)\n</code></pre>"},{"location":"reference/django_components/context/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> context","text":""},{"location":"reference/django_components/context/#django_components.context","title":"context","text":"<p>This file centralizes various ways we use Django's Context class pass data across components, nodes, slots, and contexts.</p> <p>You can think of the Context as our storage system.</p>"},{"location":"reference/django_components/context/#django_components.context.copy_forloop_context","title":"copy_forloop_context","text":"<pre><code>copy_forloop_context(from_context: Context, to_context: Context) -&gt; None\n</code></pre> <p>Forward the info about the current loop</p> Source code in <code>src/django_components/context.py</code> <pre><code>def copy_forloop_context(from_context: Context, to_context: Context) -&gt; None:\n    \"\"\"Forward the info about the current loop\"\"\"\n    # Note that the ForNode (which implements for loop behavior) does not\n    # only add the `forloop` key, but also keys corresponding to the loop elements\n    # So if the loop syntax is `{% for my_val in my_lists %}`, then ForNode also\n    # sets a `my_val` key.\n    # For this reason, instead of copying individual keys, we copy the whole stack layer\n    # set by ForNode.\n    if \"forloop\" in from_context:\n        forloop_dict_index = find_last_index(from_context.dicts, lambda d: \"forloop\" in d)\n        to_context.update(from_context.dicts[forloop_dict_index])\n</code></pre>"},{"location":"reference/django_components/context/#django_components.context.get_injected_context_var","title":"get_injected_context_var","text":"<pre><code>get_injected_context_var(component_name: str, context: Context, key: str, default: Optional[Any] = None) -&gt; Any\n</code></pre> <p>Retrieve a 'provided' field. The field MUST have been previously 'provided' by the component's ancestors using the <code>{% provide %}</code> template tag.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def get_injected_context_var(\n    component_name: str,\n    context: Context,\n    key: str,\n    default: Optional[Any] = None,\n) -&gt; Any:\n    \"\"\"\n    Retrieve a 'provided' field. The field MUST have been previously 'provided'\n    by the component's ancestors using the `{% provide %}` template tag.\n    \"\"\"\n    # NOTE: For simplicity, we keep the provided values directly on the context.\n    # This plays nicely with Django's Context, which behaves like a stack, so \"newer\"\n    # values overshadow the \"older\" ones.\n    internal_key = _INJECT_CONTEXT_KEY_PREFIX + key\n\n    # Return provided value if found\n    if internal_key in context:\n        return context[internal_key]\n\n    # If a default was given, return that\n    if default is not None:\n        return default\n\n    # Otherwise raise error\n    raise KeyError(\n        f\"Component '{component_name}' tried to inject a variable '{key}' before it was provided.\"\n        f\" To fix this, make sure that at least one ancestor of component '{component_name}' has\"\n        f\" the variable '{key}' in their 'provide' attribute.\"\n    )\n</code></pre>"},{"location":"reference/django_components/context/#django_components.context.prepare_context","title":"prepare_context","text":"<pre><code>prepare_context(context: Context, component_id: str) -&gt; None\n</code></pre> <p>Initialize the internal context state.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def prepare_context(\n    context: Context,\n    component_id: str,\n) -&gt; None:\n    \"\"\"Initialize the internal context state.\"\"\"\n    # Initialize mapping dicts within this rendering run.\n    # This is shared across the whole render chain, thus we set it only once.\n    if _FILLED_SLOTS_CONTENT_CONTEXT_KEY not in context:\n        context[_FILLED_SLOTS_CONTENT_CONTEXT_KEY] = {}\n\n    set_component_id(context, component_id)\n</code></pre>"},{"location":"reference/django_components/context/#django_components.context.set_component_id","title":"set_component_id","text":"<pre><code>set_component_id(context: Context, component_id: str) -&gt; None\n</code></pre> <p>We use the Context object to pass down info on inside of which component we are currently rendering.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def set_component_id(context: Context, component_id: str) -&gt; None:\n    \"\"\"\n    We use the Context object to pass down info on inside of which component\n    we are currently rendering.\n    \"\"\"\n    # Store the previous component so we can detect if the current component\n    # is the top-most or not. If it is, then \"_parent_component_id\" is None\n    context[_PARENT_COMP_CONTEXT_KEY] = context.get(_CURRENT_COMP_CONTEXT_KEY, None)\n    context[_CURRENT_COMP_CONTEXT_KEY] = component_id\n</code></pre>"},{"location":"reference/django_components/context/#django_components.context.set_provided_context_var","title":"set_provided_context_var","text":"<pre><code>set_provided_context_var(context: Context, key: str, provided_kwargs: Dict[str, Any]) -&gt; None\n</code></pre> <p>'Provide' given data under given key. In other words, this data can be retrieved using <code>self.inject(key)</code> inside of <code>get_context_data()</code> method of components that are nested inside the <code>{% provide %}</code> tag.</p> Source code in <code>src/django_components/context.py</code> <pre><code>def set_provided_context_var(\n    context: Context,\n    key: str,\n    provided_kwargs: Dict[str, Any],\n) -&gt; None:\n    \"\"\"\n    'Provide' given data under given key. In other words, this data can be retrieved\n    using `self.inject(key)` inside of `get_context_data()` method of components that\n    are nested inside the `{% provide %}` tag.\n    \"\"\"\n    # NOTE: We raise TemplateSyntaxError since this func should be called only from\n    # within template.\n    if not key:\n        raise TemplateSyntaxError(\n            \"Provide tag received an empty string. Key must be non-empty and a valid identifier.\"\n        )\n    if not key.isidentifier():\n        raise TemplateSyntaxError(\n            \"Provide tag received a non-identifier string. Key must be non-empty and a valid identifier.\"\n        )\n\n    # We turn the kwargs into a NamedTuple so that the object that's \"provided\"\n    # is immutable. This ensures that the data returned from `inject` will always\n    # have all the keys that were passed to the `provide` tag.\n    tpl_cls = namedtuple(\"DepInject\", provided_kwargs.keys())  # type: ignore[misc]\n    payload = tpl_cls(**provided_kwargs)\n\n    internal_key = _INJECT_CONTEXT_KEY_PREFIX + key\n    context[internal_key] = payload\n</code></pre>"},{"location":"reference/django_components/expression/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> expression","text":""},{"location":"reference/django_components/expression/#django_components.expression","title":"expression","text":""},{"location":"reference/django_components/expression/#django_components.expression.Operator","title":"Operator","text":"<p>               Bases: <code>ABC</code></p> <p>Operator describes something that somehow changes the inputs to template tags (the <code>{% %}</code>).</p> <p>For example, a SpreadOperator inserts one or more kwargs at the specified location.</p>"},{"location":"reference/django_components/expression/#django_components.expression.SpreadOperator","title":"SpreadOperator","text":"<pre><code>SpreadOperator(expr: Expression)\n</code></pre> <p>               Bases: <code>Operator</code></p> <p>Operator that inserts one or more kwargs at the specified location.</p> Source code in <code>src/django_components/expression.py</code> <pre><code>def __init__(self, expr: Expression) -&gt; None:\n    self.expr = expr\n</code></pre>"},{"location":"reference/django_components/expression/#django_components.expression.process_aggregate_kwargs","title":"process_aggregate_kwargs","text":"<pre><code>process_aggregate_kwargs(kwargs: Mapping[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>This function aggregates \"prefixed\" kwargs into dicts. \"Prefixed\" kwargs start with some prefix delimited with <code>:</code> (e.g. <code>attrs:</code>).</p> <p>Example: <pre><code>process_component_kwargs({\"abc:one\": 1, \"abc:two\": 2, \"def:three\": 3, \"four\": 4})\n# {\"abc\": {\"one\": 1, \"two\": 2}, \"def\": {\"three\": 3}, \"four\": 4}\n</code></pre></p> <p>We want to support a use case similar to Vue's fallthrough attributes. In other words, where a component author can designate a prop (input) which is a dict and which will be rendered as HTML attributes.</p> <p>This is useful for allowing component users to tweak styling or add event handling to the underlying HTML. E.g.:</p> <p><code>class=\"pa-4 d-flex text-black\"</code> or <code>@click.stop=\"alert('clicked!')\"</code></p> <p>So if the prop is <code>attrs</code>, and the component is called like so: <pre><code>{% component \"my_comp\" attrs=attrs %}\n</code></pre></p> <p>then, if <code>attrs</code> is: <pre><code>{\"class\": \"text-red pa-4\", \"@click\": \"dispatch('my_event', 123)\"}\n</code></pre></p> <p>and the component template is: <pre><code>&lt;div {% html_attrs attrs add:class=\"extra-class\" %}&gt;&lt;/div&gt;\n</code></pre></p> <p>Then this renders: <pre><code>&lt;div class=\"text-red pa-4 extra-class\" @click=\"dispatch('my_event', 123)\" &gt;&lt;/div&gt;\n</code></pre></p> <p>However, this way it is difficult for the component user to define the <code>attrs</code> variable, especially if they want to combine static and dynamic values. Because they will need to pre-process the <code>attrs</code> dict.</p> <p>So, instead, we allow to \"aggregate\" props into a dict. So all props that start with <code>attrs:</code>, like <code>attrs:class=\"text-red\"</code>, will be collected into a dict at key <code>attrs</code>.</p> <p>This provides sufficient flexiblity to make it easy for component users to provide \"fallthrough attributes\", and sufficiently easy for component authors to process that input while still being able to provide their own keys.</p> Source code in <code>src/django_components/expression.py</code> <pre><code>def process_aggregate_kwargs(kwargs: Mapping[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    This function aggregates \"prefixed\" kwargs into dicts. \"Prefixed\" kwargs\n    start with some prefix delimited with `:` (e.g. `attrs:`).\n\n    Example:\n    ```py\n    process_component_kwargs({\"abc:one\": 1, \"abc:two\": 2, \"def:three\": 3, \"four\": 4})\n    # {\"abc\": {\"one\": 1, \"two\": 2}, \"def\": {\"three\": 3}, \"four\": 4}\n    ```\n\n    ---\n\n    We want to support a use case similar to Vue's fallthrough attributes.\n    In other words, where a component author can designate a prop (input)\n    which is a dict and which will be rendered as HTML attributes.\n\n    This is useful for allowing component users to tweak styling or add\n    event handling to the underlying HTML. E.g.:\n\n    `class=\"pa-4 d-flex text-black\"` or `@click.stop=\"alert('clicked!')\"`\n\n    So if the prop is `attrs`, and the component is called like so:\n    ```django\n    {% component \"my_comp\" attrs=attrs %}\n    ```\n\n    then, if `attrs` is:\n    ```py\n    {\"class\": \"text-red pa-4\", \"@click\": \"dispatch('my_event', 123)\"}\n    ```\n\n    and the component template is:\n    ```django\n    &lt;div {% html_attrs attrs add:class=\"extra-class\" %}&gt;&lt;/div&gt;\n    ```\n\n    Then this renders:\n    ```html\n    &lt;div class=\"text-red pa-4 extra-class\" @click=\"dispatch('my_event', 123)\" &gt;&lt;/div&gt;\n    ```\n\n    However, this way it is difficult for the component user to define the `attrs`\n    variable, especially if they want to combine static and dynamic values. Because\n    they will need to pre-process the `attrs` dict.\n\n    So, instead, we allow to \"aggregate\" props into a dict. So all props that start\n    with `attrs:`, like `attrs:class=\"text-red\"`, will be collected into a dict\n    at key `attrs`.\n\n    This provides sufficient flexiblity to make it easy for component users to provide\n    \"fallthrough attributes\", and sufficiently easy for component authors to process\n    that input while still being able to provide their own keys.\n    \"\"\"\n    processed_kwargs = {}\n    nested_kwargs: Dict[str, Dict[str, Any]] = {}\n    for key, val in kwargs.items():\n        if not is_aggregate_key(key):\n            processed_kwargs[key] = val\n            continue\n\n        # NOTE: Trim off the prefix from keys\n        prefix, sub_key = key.split(\":\", 1)\n        if prefix not in nested_kwargs:\n            nested_kwargs[prefix] = {}\n        nested_kwargs[prefix][sub_key] = val\n\n    # Assign aggregated values into normal input\n    for key, val in nested_kwargs.items():\n        if key in processed_kwargs:\n            raise TemplateSyntaxError(\n                f\"Received argument '{key}' both as a regular input ({key}=...)\"\n                f\" and as an aggregate dict ('{key}:key=...'). Must be only one of the two\"\n            )\n        processed_kwargs[key] = val\n\n    return processed_kwargs\n</code></pre>"},{"location":"reference/django_components/library/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> library","text":""},{"location":"reference/django_components/library/#django_components.library","title":"library","text":"<p>Module for interfacing with Django's Library (<code>django.template.library</code>)</p>"},{"location":"reference/django_components/library/#django_components.library.PROTECTED_TAGS","title":"PROTECTED_TAGS  <code>module-attribute</code>","text":"<pre><code>PROTECTED_TAGS = [\n    \"component_dependencies\",\n    \"component_css_dependencies\",\n    \"component_js_dependencies\",\n    \"fill\",\n    \"html_attrs\",\n    \"provide\",\n    \"slot\",\n]\n</code></pre> <p>These are the names that users cannot choose for their components, as they would conflict with other tags in the Library.</p>"},{"location":"reference/django_components/logger/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> logger","text":""},{"location":"reference/django_components/logger/#django_components.logger","title":"logger","text":""},{"location":"reference/django_components/logger/#django_components.logger.trace","title":"trace","text":"<pre><code>trace(logger: Logger, message: str, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>TRACE level logger.</p> <p>To display TRACE logs, set the logging level to 5.</p> <p>Example: <pre><code>LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"stream\": sys.stdout,\n        },\n    },\n    \"loggers\": {\n        \"django_components\": {\n            \"level\": 5,\n            \"handlers\": [\"console\"],\n        },\n    },\n}\n</code></pre></p> Source code in <code>src/django_components/logger.py</code> <pre><code>def trace(logger: logging.Logger, message: str, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"\n    TRACE level logger.\n\n    To display TRACE logs, set the logging level to 5.\n\n    Example:\n    ```py\n    LOGGING = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"handlers\": {\n            \"console\": {\n                \"class\": \"logging.StreamHandler\",\n                \"stream\": sys.stdout,\n            },\n        },\n        \"loggers\": {\n            \"django_components\": {\n                \"level\": 5,\n                \"handlers\": [\"console\"],\n            },\n        },\n    }\n    ```\n    \"\"\"\n    if actual_trace_level_num == -1:\n        setup_logging()\n    if logger.isEnabledFor(actual_trace_level_num):\n        logger.log(actual_trace_level_num, message, *args, **kwargs)\n</code></pre>"},{"location":"reference/django_components/logger/#django_components.logger.trace_msg","title":"trace_msg","text":"<pre><code>trace_msg(\n    action: Literal[\"PARSE\", \"ASSOC\", \"RENDR\", \"GET\", \"SET\"],\n    node_type: Literal[\"COMP\", \"FILL\", \"SLOT\", \"PROVIDE\", \"N/A\"],\n    node_name: str,\n    node_id: str,\n    msg: str = \"\",\n    component_id: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>TRACE level logger with opinionated format for tracing interaction of components, nodes, and slots. Formats messages like so:</p> <p><code>\"ASSOC SLOT test_slot ID 0088 TO COMP 0087\"</code></p> Source code in <code>src/django_components/logger.py</code> <pre><code>def trace_msg(\n    action: Literal[\"PARSE\", \"ASSOC\", \"RENDR\", \"GET\", \"SET\"],\n    node_type: Literal[\"COMP\", \"FILL\", \"SLOT\", \"PROVIDE\", \"N/A\"],\n    node_name: str,\n    node_id: str,\n    msg: str = \"\",\n    component_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    TRACE level logger with opinionated format for tracing interaction of components,\n    nodes, and slots. Formats messages like so:\n\n    `\"ASSOC SLOT test_slot ID 0088 TO COMP 0087\"`\n    \"\"\"\n    msg_prefix = \"\"\n    if action == \"ASSOC\":\n        if not component_id:\n            raise ValueError(\"component_id must be set for the ASSOC action\")\n        msg_prefix = f\"TO COMP {component_id}\"\n    elif action == \"RENDR\" and node_type == \"FILL\":\n        if not component_id:\n            raise ValueError(\"component_id must be set for the RENDER action\")\n        msg_prefix = f\"FOR COMP {component_id}\"\n\n    msg_parts = [f\"{action} {node_type} {node_name} ID {node_id}\", *([msg_prefix] if msg_prefix else []), msg]\n    full_msg = \" \".join(msg_parts)\n\n    # NOTE: When debugging tests during development, it may be easier to change\n    # this to `print()`\n    trace(logger, full_msg)\n</code></pre>"},{"location":"reference/django_components/management/","title":"Index","text":""},{"location":"reference/django_components/management/#django_components.management","title":"management","text":""},{"location":"reference/django_components/management/commands/","title":"Index","text":""},{"location":"reference/django_components/management/commands/#django_components.management.commands","title":"commands","text":""},{"location":"reference/django_components/management/commands/startcomponent/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> startcomponent","text":""},{"location":"reference/django_components/management/commands/startcomponent/#django_components.management.commands.startcomponent","title":"startcomponent","text":""},{"location":"reference/django_components/management/commands/upgradecomponent/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> upgradecomponent","text":""},{"location":"reference/django_components/management/commands/upgradecomponent/#django_components.management.commands.upgradecomponent","title":"upgradecomponent","text":""},{"location":"reference/django_components/middleware/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> middleware","text":""},{"location":"reference/django_components/middleware/#django_components.middleware","title":"middleware","text":""},{"location":"reference/django_components/middleware/#django_components.middleware.ComponentDependencyMiddleware","title":"ComponentDependencyMiddleware","text":"<pre><code>ComponentDependencyMiddleware(get_response: Callable[[HttpRequest], HttpResponse])\n</code></pre> <p>Middleware that inserts CSS/JS dependencies for all rendered components at points marked with template tags.</p> Source code in <code>src/django_components/middleware.py</code> <pre><code>def __init__(self, get_response: \"Callable[[HttpRequest], HttpResponse]\") -&gt; None:\n    self.get_response = get_response\n\n    if iscoroutinefunction(self.get_response):\n        markcoroutinefunction(self)\n</code></pre>"},{"location":"reference/django_components/middleware/#django_components.middleware.DependencyReplacer","title":"DependencyReplacer","text":"<pre><code>DependencyReplacer(css_string: bytes, js_string: bytes)\n</code></pre> <p>Replacer for use in re.sub that replaces the first placeholder CSS and JS tags it encounters and removes any subsequent ones.</p> Source code in <code>src/django_components/middleware.py</code> <pre><code>def __init__(self, css_string: bytes, js_string: bytes) -&gt; None:\n    self.js_string = js_string\n    self.css_string = css_string\n</code></pre>"},{"location":"reference/django_components/middleware/#django_components.middleware.join_media","title":"join_media","text":"<pre><code>join_media(components: Iterable[Component]) -&gt; Media\n</code></pre> <p>Return combined media object for iterable of components.</p> Source code in <code>src/django_components/middleware.py</code> <pre><code>def join_media(components: Iterable[\"Component\"]) -&gt; Media:\n    \"\"\"Return combined media object for iterable of components.\"\"\"\n\n    return sum([component.media for component in components], Media())\n</code></pre>"},{"location":"reference/django_components/node/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> node","text":""},{"location":"reference/django_components/node/#django_components.node","title":"node","text":""},{"location":"reference/django_components/node/#django_components.node.BaseNode","title":"BaseNode","text":"<pre><code>BaseNode(\n    nodelist: Optional[NodeList] = None,\n    node_id: Optional[str] = None,\n    args: Optional[List[Expression]] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n)\n</code></pre> <p>               Bases: <code>Node</code></p> <p>Shared behavior for our subclasses of Django's <code>Node</code></p> Source code in <code>src/django_components/node.py</code> <pre><code>def __init__(\n    self,\n    nodelist: Optional[NodeList] = None,\n    node_id: Optional[str] = None,\n    args: Optional[List[Expression]] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n):\n    self.nodelist = nodelist or NodeList()\n    self.node_id = node_id or gen_id()\n    self.args = args or []\n    self.kwargs = kwargs or RuntimeKwargs({})\n</code></pre>"},{"location":"reference/django_components/node/#django_components.node.get_node_children","title":"get_node_children","text":"<pre><code>get_node_children(node: Node, context: Optional[Context] = None) -&gt; NodeList\n</code></pre> <p>Get child Nodes from Node's nodelist atribute.</p> <p>This function is taken from <code>get_nodes_by_type</code> method of <code>django.template.base.Node</code>.</p> Source code in <code>src/django_components/node.py</code> <pre><code>def get_node_children(node: Node, context: Optional[Context] = None) -&gt; NodeList:\n    \"\"\"\n    Get child Nodes from Node's nodelist atribute.\n\n    This function is taken from `get_nodes_by_type` method of `django.template.base.Node`.\n    \"\"\"\n    # Special case - {% extends %} tag - Load the template and go deeper\n    if isinstance(node, ExtendsNode):\n        # NOTE: When {% extends %} node is being parsed, it collects all remaining template\n        # under node.nodelist.\n        # Hence, when we come across ExtendsNode in the template, we:\n        # 1. Go over all nodes in the template using `node.nodelist`\n        # 2. Go over all nodes in the \"parent\" template, via `node.get_parent`\n        nodes = NodeList()\n        nodes.extend(node.nodelist)\n        template = node.get_parent(context)\n        nodes.extend(template.nodelist)\n        return nodes\n\n    # Special case - {% include %} tag - Load the template and go deeper\n    elif isinstance(node, IncludeNode):\n        template = get_template_for_include_node(node, context)\n        return template.nodelist\n\n    nodes = NodeList()\n    for attr in node.child_nodelists:\n        nodelist = getattr(node, attr, [])\n        if nodelist:\n            nodes.extend(nodelist)\n    return nodes\n</code></pre>"},{"location":"reference/django_components/node/#django_components.node.get_template_for_include_node","title":"get_template_for_include_node","text":"<pre><code>get_template_for_include_node(include_node: IncludeNode, context: Context) -&gt; Template\n</code></pre> <p>This snippet is taken directly from <code>IncludeNode.render()</code>. Unfortunately the render logic doesn't separate out template loading logic from rendering, so we have to copy the method.</p> Source code in <code>src/django_components/node.py</code> <pre><code>def get_template_for_include_node(include_node: IncludeNode, context: Context) -&gt; Template:\n    \"\"\"\n    This snippet is taken directly from `IncludeNode.render()`. Unfortunately the\n    render logic doesn't separate out template loading logic from rendering, so we\n    have to copy the method.\n    \"\"\"\n    template = include_node.template.resolve(context)\n    # Does this quack like a Template?\n    if not callable(getattr(template, \"render\", None)):\n        # If not, try the cache and select_template().\n        template_name = template or ()\n        if isinstance(template_name, str):\n            template_name = (\n                construct_relative_path(\n                    include_node.origin.template_name,\n                    template_name,\n                ),\n            )\n        else:\n            template_name = tuple(template_name)\n        cache = context.render_context.dicts[0].setdefault(include_node, {})\n        template = cache.get(template_name)\n        if template is None:\n            template = context.template.engine.select_template(template_name)\n            cache[template_name] = template\n    # Use the base.Template of a backends.django.Template.\n    elif hasattr(template, \"template\"):\n        template = template.template\n    return template\n</code></pre>"},{"location":"reference/django_components/node/#django_components.node.walk_nodelist","title":"walk_nodelist","text":"<pre><code>walk_nodelist(nodes: NodeList, callback: Callable[[Node], Optional[str]], context: Optional[Context] = None) -&gt; None\n</code></pre> <p>Recursively walk a NodeList, calling <code>callback</code> for each Node.</p> Source code in <code>src/django_components/node.py</code> <pre><code>def walk_nodelist(\n    nodes: NodeList,\n    callback: Callable[[Node], Optional[str]],\n    context: Optional[Context] = None,\n) -&gt; None:\n    \"\"\"Recursively walk a NodeList, calling `callback` for each Node.\"\"\"\n    node_queue: List[NodeTraverse] = [NodeTraverse(node=node, parent=None) for node in nodes]\n    while len(node_queue):\n        traverse = node_queue.pop()\n        callback(traverse)\n        child_nodes = get_node_children(traverse.node, context)\n        child_traverses = [NodeTraverse(node=child_node, parent=traverse) for child_node in child_nodes]\n        node_queue.extend(child_traverses)\n</code></pre>"},{"location":"reference/django_components/provide/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> provide","text":""},{"location":"reference/django_components/provide/#django_components.provide","title":"provide","text":""},{"location":"reference/django_components/provide/#django_components.provide.ProvideNode","title":"ProvideNode","text":"<pre><code>ProvideNode(nodelist: NodeList, trace_id: str, node_id: Optional[str] = None, kwargs: Optional[RuntimeKwargs] = None)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> <p>Implementation of the <code>{% provide %}</code> tag. For more info see <code>Component.inject</code>.</p> Source code in <code>src/django_components/provide.py</code> <pre><code>def __init__(\n    self,\n    nodelist: NodeList,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n):\n    super().__init__(nodelist=nodelist, args=None, kwargs=kwargs, node_id=node_id)\n\n    self.nodelist = nodelist\n    self.node_id = node_id or gen_id()\n    self.trace_id = trace_id\n    self.kwargs = kwargs or RuntimeKwargs({})\n</code></pre>"},{"location":"reference/django_components/safer_staticfiles/","title":"Index","text":""},{"location":"reference/django_components/safer_staticfiles/#django_components.safer_staticfiles","title":"safer_staticfiles","text":""},{"location":"reference/django_components/safer_staticfiles/#django_components.safer_staticfiles.apps","title":"apps","text":""},{"location":"reference/django_components/safer_staticfiles/#django_components.safer_staticfiles.apps.SaferStaticFilesConfig","title":"SaferStaticFilesConfig","text":"<p>               Bases: <code>StaticFilesConfig</code></p> <p>Extend the <code>ignore_patterns</code> class attr of StaticFilesConfig to include Python modules and HTML files.</p> <p>When this class is registered as an installed app, <code>$ ./manage.py collectstatic</code> will ignore .py and .html files, preventing potentially sensitive backend logic from being leaked by the static file server.</p> <p>See https://docs.djangoproject.com/en/5.0/ref/contrib/staticfiles/#customizing-the-ignored-pattern-list</p>"},{"location":"reference/django_components/safer_staticfiles/apps/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> apps","text":""},{"location":"reference/django_components/safer_staticfiles/apps/#django_components.safer_staticfiles.apps","title":"apps","text":""},{"location":"reference/django_components/safer_staticfiles/apps/#django_components.safer_staticfiles.apps.SaferStaticFilesConfig","title":"SaferStaticFilesConfig","text":"<p>               Bases: <code>StaticFilesConfig</code></p> <p>Extend the <code>ignore_patterns</code> class attr of StaticFilesConfig to include Python modules and HTML files.</p> <p>When this class is registered as an installed app, <code>$ ./manage.py collectstatic</code> will ignore .py and .html files, preventing potentially sensitive backend logic from being leaked by the static file server.</p> <p>See https://docs.djangoproject.com/en/5.0/ref/contrib/staticfiles/#customizing-the-ignored-pattern-list</p>"},{"location":"reference/django_components/slots/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> slots","text":""},{"location":"reference/django_components/slots/#django_components.slots","title":"slots","text":""},{"location":"reference/django_components/slots/#django_components.slots.FillContent","title":"FillContent  <code>dataclass</code>","text":"<pre><code>FillContent(content_func: SlotFunc[TSlotData], slot_default_var: Optional[SlotDefaultName], slot_data_var: Optional[SlotDataName])\n</code></pre> <p>               Bases: <code>Generic[TSlotData]</code></p> <p>This represents content set with the <code>{% fill %}</code> tag, e.g.:</p> <pre><code>{% component \"my_comp\" %}\n    {% fill \"first_slot\" %} &lt;--- This\n        hi\n        {{ my_var }}\n        hello\n    {% endfill %}\n{% endcomponent %}\n</code></pre>"},{"location":"reference/django_components/slots/#django_components.slots.FillNode","title":"FillNode","text":"<pre><code>FillNode(nodelist: NodeList, kwargs: RuntimeKwargs, trace_id: str, node_id: Optional[str] = None, is_implicit: bool = False)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> <p>Set when a <code>component</code> tag pair is passed template content that excludes <code>fill</code> tags. Nodes of this type contribute their nodelists to slots marked as 'default'.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def __init__(\n    self,\n    nodelist: NodeList,\n    kwargs: RuntimeKwargs,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    is_implicit: bool = False,\n):\n    super().__init__(nodelist=nodelist, args=None, kwargs=kwargs, node_id=node_id)\n\n    self.is_implicit = is_implicit\n    self.trace_id = trace_id\n    self.component_id: Optional[str] = None\n</code></pre>"},{"location":"reference/django_components/slots/#django_components.slots.Slot","title":"Slot","text":"<p>               Bases: <code>NamedTuple</code></p> <p>This represents content set with the <code>{% slot %}</code> tag, e.g.:</p> <pre><code>{% slot \"my_comp\" default %} &lt;--- This\n    hi\n    {{ my_var }}\n    hello\n{% endslot %}\n</code></pre>"},{"location":"reference/django_components/slots/#django_components.slots.SlotFill","title":"SlotFill  <code>dataclass</code>","text":"<pre><code>SlotFill(\n    name: str,\n    escaped_name: str,\n    is_filled: bool,\n    content_func: SlotFunc[TSlotData],\n    context_data: Mapping,\n    slot_default_var: Optional[SlotDefaultName],\n    slot_data_var: Optional[SlotDataName],\n)\n</code></pre> <p>               Bases: <code>Generic[TSlotData]</code></p> <p>SlotFill describes what WILL be rendered.</p> <p>It is a Slot that has been resolved against FillContents passed to a Component.</p>"},{"location":"reference/django_components/slots/#django_components.slots.SlotNode","title":"SlotNode","text":"<pre><code>SlotNode(\n    nodelist: NodeList,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n    is_required: bool = False,\n    is_default: bool = False,\n)\n</code></pre> <p>               Bases: <code>BaseNode</code></p> Source code in <code>src/django_components/slots.py</code> <pre><code>def __init__(\n    self,\n    nodelist: NodeList,\n    trace_id: str,\n    node_id: Optional[str] = None,\n    kwargs: Optional[RuntimeKwargs] = None,\n    is_required: bool = False,\n    is_default: bool = False,\n):\n    super().__init__(nodelist=nodelist, args=None, kwargs=kwargs, node_id=node_id)\n\n    self.is_required = is_required\n    self.is_default = is_default\n    self.trace_id = trace_id\n</code></pre>"},{"location":"reference/django_components/slots/#django_components.slots.SlotRef","title":"SlotRef","text":"<pre><code>SlotRef(slot: SlotNode, context: Context)\n</code></pre> <p>SlotRef allows to treat a slot as a variable. The slot is rendered only once the instance is coerced to string.</p> <p>This is used to access slots as variables inside the templates. When a SlotRef is rendered in the template with <code>{{ my_lazy_slot }}</code>, it will output the contents of the slot.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def __init__(self, slot: \"SlotNode\", context: Context):\n    self._slot = slot\n    self._context = context\n</code></pre>"},{"location":"reference/django_components/slots/#django_components.slots.parse_slot_fill_nodes_from_component_nodelist","title":"parse_slot_fill_nodes_from_component_nodelist","text":"<pre><code>parse_slot_fill_nodes_from_component_nodelist(component_nodelist: NodeList, ComponentNodeCls: Type[Node]) -&gt; List[FillNode]\n</code></pre> <p>Given a component body (<code>django.template.NodeList</code>), find all slot fills, whether defined explicitly with <code>{% fill %}</code> or implicitly.</p> <p>So if we have a component body: <pre><code>{% component \"mycomponent\" %}\n    {% fill \"first_fill\" %}\n        Hello!\n    {% endfill %}\n    {% fill \"second_fill\" %}\n        Hello too!\n    {% endfill %}\n{% endcomponent %}\n</code></pre> Then this function returns the nodes (<code>django.template.Node</code>) for <code>fill \"first_fill\"</code> and <code>fill \"second_fill\"</code>.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def parse_slot_fill_nodes_from_component_nodelist(\n    component_nodelist: NodeList,\n    ComponentNodeCls: Type[Node],\n) -&gt; List[FillNode]:\n    \"\"\"\n    Given a component body (`django.template.NodeList`), find all slot fills,\n    whether defined explicitly with `{% fill %}` or implicitly.\n\n    So if we have a component body:\n    ```django\n    {% component \"mycomponent\" %}\n        {% fill \"first_fill\" %}\n            Hello!\n        {% endfill %}\n        {% fill \"second_fill\" %}\n            Hello too!\n        {% endfill %}\n    {% endcomponent %}\n    ```\n    Then this function returns the nodes (`django.template.Node`) for `fill \"first_fill\"`\n    and `fill \"second_fill\"`.\n    \"\"\"\n    fill_nodes: List[FillNode] = []\n    if nodelist_has_content(component_nodelist):\n        for parse_fn in (\n            _try_parse_as_default_fill,\n            _try_parse_as_named_fill_tag_set,\n        ):\n            curr_fill_nodes = parse_fn(component_nodelist, ComponentNodeCls)\n            if curr_fill_nodes:\n                fill_nodes = curr_fill_nodes\n                break\n        else:\n            raise TemplateSyntaxError(\n                \"Illegal content passed to 'component' tag pair. \"\n                \"Possible causes: 1) Explicit 'fill' tags cannot occur alongside other \"\n                \"tags except comment tags; 2) Default (default slot-targeting) content \"\n                \"is mixed with explict 'fill' tags.\"\n            )\n    return fill_nodes\n</code></pre>"},{"location":"reference/django_components/slots/#django_components.slots.resolve_slots","title":"resolve_slots","text":"<pre><code>resolve_slots(\n    context: Context,\n    template: Template,\n    component_name: Optional[str],\n    context_data: Mapping[str, Any],\n    fill_content: Dict[SlotName, FillContent],\n    is_dynamic_component: bool = False,\n) -&gt; Tuple[Dict[SlotId, Slot], Dict[SlotId, SlotFill]]\n</code></pre> <p>Search the template for all SlotNodes, and associate the slots with the given fills.</p> <p>Returns tuple of: - Slots defined in the component's Template with <code>{% slot %}</code> tag - SlotFills (AKA slots matched with fills) describing what will be rendered for each slot.</p> Source code in <code>src/django_components/slots.py</code> <pre><code>def resolve_slots(\n    context: Context,\n    template: Template,\n    component_name: Optional[str],\n    context_data: Mapping[str, Any],\n    fill_content: Dict[SlotName, FillContent],\n    is_dynamic_component: bool = False,\n) -&gt; Tuple[Dict[SlotId, Slot], Dict[SlotId, SlotFill]]:\n    \"\"\"\n    Search the template for all SlotNodes, and associate the slots\n    with the given fills.\n\n    Returns tuple of:\n    - Slots defined in the component's Template with `{% slot %}` tag\n    - SlotFills (AKA slots matched with fills) describing what will be rendered for each slot.\n    \"\"\"\n    slot_fills = {\n        name: SlotFill(\n            name=name,\n            escaped_name=_escape_slot_name(name),\n            is_filled=True,\n            content_func=fill.content_func,\n            context_data=context_data,\n            slot_default_var=fill.slot_default_var,\n            slot_data_var=fill.slot_data_var,\n        )\n        for name, fill in fill_content.items()\n    }\n\n    slots: Dict[SlotId, Slot] = {}\n    # This holds info on which slot (key) has which slots nested in it (value list)\n    slot_children: Dict[SlotId, List[SlotId]] = {}\n\n    def on_node(entry: NodeTraverse) -&gt; None:\n        node = entry.node\n        if not isinstance(node, SlotNode):\n            return\n\n        slot_name, _ = node.resolve_kwargs(context, component_name)\n\n        # 1. Collect slots\n        # Basically we take all the important info form the SlotNode, so the logic is\n        # less coupled to Django's Template/Node. Plain tuples should also help with\n        # troubleshooting.\n        slot = Slot(\n            id=node.node_id,\n            name=slot_name,\n            nodelist=node.nodelist,\n            is_default=node.is_default,\n            is_required=node.is_required,\n        )\n        slots[node.node_id] = slot\n\n        # 2. Figure out which Slots are nested in other Slots, so we can render\n        # them from outside-inwards, so we can skip inner Slots if fills are provided.\n        # We should end up with a graph-like data like:\n        # - 0001: [0002]\n        # - 0002: []\n        # - 0003: [0004]\n        # In other words, the data tells us that slot ID 0001 is PARENT of slot 0002.\n        curr_entry = entry.parent\n        while curr_entry and curr_entry.parent is not None:\n            if not isinstance(curr_entry.node, SlotNode):\n                curr_entry = curr_entry.parent\n                continue\n\n            parent_slot_id = curr_entry.node.node_id\n            if parent_slot_id not in slot_children:\n                slot_children[parent_slot_id] = []\n            slot_children[parent_slot_id].append(node.node_id)\n            break\n\n    walk_nodelist(template.nodelist, on_node, context)\n\n    # 3. Figure out which slot the default/implicit fill belongs to\n    slot_fills = _resolve_default_slot(\n        template_name=template.name,\n        component_name=component_name,\n        slots=slots,\n        slot_fills=slot_fills,\n        is_dynamic_component=is_dynamic_component,\n    )\n\n    # 4. Detect any errors with slots/fills\n    # NOTE: We ignore errors for the dynamic component, as the underlying component\n    # will deal with it\n    if not is_dynamic_component:\n        _report_slot_errors(slots, slot_fills, component_name)\n\n    # 5. Find roots of the slot relationships\n    top_level_slot_ids: List[SlotId] = []\n    for node_id, slot in slots.items():\n        if node_id not in slot_children or not slot_children[node_id]:\n            top_level_slot_ids.append(node_id)\n\n    # 6. Walk from out-most slots inwards, and decide whether and how\n    # we will render each slot.\n    resolved_slots: Dict[SlotId, SlotFill] = {}\n    slot_ids_queue = deque([*top_level_slot_ids])\n    while len(slot_ids_queue):\n        slot_id = slot_ids_queue.pop()\n        slot = slots[slot_id]\n\n        # Check if there is a slot fill for given slot name\n        if slot.name in slot_fills:\n            # If yes, we remember which slot we want to replace with already-rendered fills\n            resolved_slots[slot_id] = slot_fills[slot.name]\n            # Since the fill cannot include other slots, we can leave this path\n            continue\n        else:\n            # If no, then the slot is NOT filled, and we will render the slot's default (what's\n            # between the slot tags)\n            resolved_slots[slot_id] = SlotFill(\n                name=slot.name,\n                escaped_name=_escape_slot_name(slot.name),\n                is_filled=False,\n                content_func=_nodelist_to_slot_render_func(slot.nodelist),\n                context_data=context_data,\n                slot_default_var=None,\n                slot_data_var=None,\n            )\n            # Since the slot's default CAN include other slots (because it's defined in\n            # the same template), we need to enqueue the slot's children\n            if slot_id in slot_children and slot_children[slot_id]:\n                slot_ids_queue.extend(slot_children[slot_id])\n\n    # By the time we get here, we should know, for each slot, how it will be rendered\n    # -&gt; Whether it will be replaced with a fill, or whether we render slot's defaults.\n    return slots, resolved_slots\n</code></pre>"},{"location":"reference/django_components/tag_formatter/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> tag_formatter","text":""},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter","title":"tag_formatter","text":""},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.ComponentFormatter","title":"ComponentFormatter","text":"<pre><code>ComponentFormatter(tag: str)\n</code></pre> <p>               Bases: <code>TagFormatterABC</code></p> <p>The original django_component's component tag formatter, it uses the <code>component</code> and <code>endcomponent</code> tags, and the component name is gives as the first positional arg.</p> <p>Example as block: <pre><code>{% component \"mycomp\" abc=123 %}\n    {% fill \"myfill\" %}\n        ...\n    {% endfill %}\n{% endcomponent %}\n</code></pre></p> <p>Example as inlined tag: <pre><code>{% component \"mycomp\" abc=123 / %}\n</code></pre></p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>def __init__(self, tag: str):\n    self.tag = tag\n</code></pre>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.InternalTagFormatter","title":"InternalTagFormatter","text":"<pre><code>InternalTagFormatter(tag_formatter: TagFormatterABC)\n</code></pre> <p>Internal wrapper around user-provided TagFormatters, so that we validate the outputs.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>def __init__(self, tag_formatter: TagFormatterABC):\n    self.tag_formatter = tag_formatter\n</code></pre>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.ShorthandComponentFormatter","title":"ShorthandComponentFormatter","text":"<p>               Bases: <code>TagFormatterABC</code></p> <p>The component tag formatter that uses <code>&lt;name&gt;</code> / <code>end&lt;name&gt;</code> tags.</p> <p>This is similar to django-web-components and django-slippers syntax.</p> <p>Example as block: <pre><code>{% mycomp abc=123 %}\n    {% fill \"myfill\" %}\n        ...\n    {% endfill %}\n{% endmycomp %}\n</code></pre></p> <p>Example as inlined tag: <pre><code>{% mycomp abc=123 / %}\n</code></pre></p>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagFormatterABC","title":"TagFormatterABC","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagFormatterABC.end_tag","title":"end_tag  <code>abstractmethod</code>","text":"<pre><code>end_tag(name: str) -&gt; str\n</code></pre> <p>Formats the end tag of a block component.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>@abc.abstractmethod\ndef end_tag(self, name: str) -&gt; str:\n    \"\"\"Formats the end tag of a block component.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagFormatterABC.parse","title":"parse  <code>abstractmethod</code>","text":"<pre><code>parse(tokens: List[str]) -&gt; TagResult\n</code></pre> <p>Given the tokens (words) of a component start tag, this function extracts the component name from the tokens list, and returns <code>TagResult</code>, which is a tuple of <code>(component_name, remaining_tokens)</code>.</p> <p>Example:</p> <p>Given a component declarations:</p> <p><code>{% component \"my_comp\" key=val key2=val2 %}</code></p> <p>This function receives a list of tokens</p> <p><code>['component', '\"my_comp\"', 'key=val', 'key2=val2']</code></p> <p><code>component</code> is the tag name, which we drop. <code>\"my_comp\"</code> is the component name, but we must remove the extra quotes. And we pass remaining tokens unmodified, as that's the input to the component.</p> <p>So in the end, we return a tuple:</p> <p><code>('my_comp', ['key=val', 'key2=val2'])</code></p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>@abc.abstractmethod\ndef parse(self, tokens: List[str]) -&gt; TagResult:\n    \"\"\"\n    Given the tokens (words) of a component start tag, this function extracts\n    the component name from the tokens list, and returns `TagResult`, which\n    is a tuple of `(component_name, remaining_tokens)`.\n\n    Example:\n\n    Given a component declarations:\n\n    `{% component \"my_comp\" key=val key2=val2 %}`\n\n    This function receives a list of tokens\n\n    `['component', '\"my_comp\"', 'key=val', 'key2=val2']`\n\n    `component` is the tag name, which we drop. `\"my_comp\"` is the component name,\n    but we must remove the extra quotes. And we pass remaining tokens unmodified,\n    as that's the input to the component.\n\n    So in the end, we return a tuple:\n\n    `('my_comp', ['key=val', 'key2=val2'])`\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagFormatterABC.start_tag","title":"start_tag  <code>abstractmethod</code>","text":"<pre><code>start_tag(name: str) -&gt; str\n</code></pre> <p>Formats the start tag of a component.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>@abc.abstractmethod\ndef start_tag(self, name: str) -&gt; str:\n    \"\"\"Formats the start tag of a component.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagResult","title":"TagResult","text":"<p>               Bases: <code>NamedTuple</code></p> <p>The return value from <code>TagFormatter.parse()</code></p>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagResult.component_name","title":"component_name  <code>instance-attribute</code>","text":"<pre><code>component_name: str\n</code></pre> <p>Component name extracted from the template tag</p>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.TagResult.tokens","title":"tokens  <code>instance-attribute</code>","text":"<pre><code>tokens: List[str]\n</code></pre> <p>Remaining tokens (words) that were passed to the tag, with component name removed</p>"},{"location":"reference/django_components/tag_formatter/#django_components.tag_formatter.get_tag_formatter","title":"get_tag_formatter","text":"<pre><code>get_tag_formatter(registry: ComponentRegistry) -&gt; InternalTagFormatter\n</code></pre> <p>Returns an instance of the currently configured component tag formatter.</p> Source code in <code>src/django_components/tag_formatter.py</code> <pre><code>def get_tag_formatter(registry: \"ComponentRegistry\") -&gt; InternalTagFormatter:\n    \"\"\"Returns an instance of the currently configured component tag formatter.\"\"\"\n    # Allow users to configure the component TagFormatter\n    formatter_cls_or_str = registry.settings.TAG_FORMATTER\n\n    if isinstance(formatter_cls_or_str, str):\n        tag_formatter: TagFormatterABC = import_string(formatter_cls_or_str)\n    else:\n        tag_formatter = formatter_cls_or_str\n\n    return InternalTagFormatter(tag_formatter)\n</code></pre>"},{"location":"reference/django_components/template_loader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> template_loader","text":""},{"location":"reference/django_components/template_loader/#django_components.template_loader","title":"template_loader","text":"<p>Template loader that loads templates from each Django app's \"components\" directory.</p>"},{"location":"reference/django_components/template_loader/#django_components.template_loader.Loader","title":"Loader","text":"<p>               Bases: <code>Loader</code></p>"},{"location":"reference/django_components/template_loader/#django_components.template_loader.Loader.get_dirs","title":"get_dirs","text":"<pre><code>get_dirs() -&gt; List[Path]\n</code></pre> <p>Prepare directories that may contain component files:</p> <p>Searches for dirs set in <code>STATICFILES_DIRS</code> settings. If none set, defaults to searching for a \"components\" app. The dirs in <code>STATICFILES_DIRS</code> must be absolute paths.</p> <p>Paths are accepted only if they resolve to a directory. E.g. <code>/path/to/django_project/my_app/components/</code>.</p> <p>If <code>STATICFILES_DIRS</code> is not set or empty, then <code>BASE_DIR</code> is required.</p> Source code in <code>src/django_components/template_loader.py</code> <pre><code>def get_dirs(self) -&gt; List[Path]:\n    \"\"\"\n    Prepare directories that may contain component files:\n\n    Searches for dirs set in `STATICFILES_DIRS` settings. If none set, defaults to searching\n    for a \"components\" app. The dirs in `STATICFILES_DIRS` must be absolute paths.\n\n    Paths are accepted only if they resolve to a directory.\n    E.g. `/path/to/django_project/my_app/components/`.\n\n    If `STATICFILES_DIRS` is not set or empty, then `BASE_DIR` is required.\n    \"\"\"\n    # Allow to configure from settings which dirs should be checked for components\n    if hasattr(settings, \"STATICFILES_DIRS\") and settings.STATICFILES_DIRS:\n        component_dirs = settings.STATICFILES_DIRS\n    else:\n        component_dirs = [settings.BASE_DIR / \"components\"]\n\n    logger.debug(\n        \"Template loader will search for valid template dirs from following options:\\n\"\n        + \"\\n\".join([f\" - {str(d)}\" for d in component_dirs])\n    )\n\n    directories: Set[Path] = set()\n    for component_dir in component_dirs:\n        # Consider tuples for STATICFILES_DIRS (See #489)\n        # See https://docs.djangoproject.com/en/5.0/ref/settings/#prefixes-optional\n        if isinstance(component_dir, (tuple, list)) and len(component_dir) == 2:\n            component_dir = component_dir[1]\n        try:\n            Path(component_dir)\n        except TypeError:\n            logger.warning(\n                f\"STATICFILES_DIRS expected str, bytes or os.PathLike object, or tuple/list of length 2. \"\n                f\"See Django documentation. Got {type(component_dir)} : {component_dir}\"\n            )\n            continue\n\n        if not Path(component_dir).is_absolute():\n            raise ValueError(f\"STATICFILES_DIRS must contain absolute paths, got '{component_dir}'\")\n        else:\n            directories.add(Path(component_dir).resolve())\n\n    logger.debug(\n        \"Template loader matched following template dirs:\\n\" + \"\\n\".join([f\" - {str(d)}\" for d in directories])\n    )\n    return list(directories)\n</code></pre>"},{"location":"reference/django_components/template_parser/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> template_parser","text":""},{"location":"reference/django_components/template_parser/#django_components.template_parser","title":"template_parser","text":"<p>Overrides for the Django Template system to allow finer control over template parsing.</p> <p>Based on Django Slippers v0.6.2 - https://github.com/mixxorz/slippers/blob/main/slippers/template.py</p>"},{"location":"reference/django_components/template_parser/#django_components.template_parser.parse_bits","title":"parse_bits","text":"<pre><code>parse_bits(\n    parser: Parser, bits: List[str], params: List[str], name: str\n) -&gt; Tuple[List[FilterExpression], List[Tuple[str, FilterExpression]]]\n</code></pre> <p>Parse bits for template tag helpers simple_tag and inclusion_tag, in particular by detecting syntax errors and by extracting positional and keyword arguments.</p> <p>This is a simplified version of <code>django.template.library.parse_bits</code> where we use custom regex to handle special characters in keyword names.</p> <p>Furthermore, our version allows duplicate keys, and instead of return kwargs as a dict, we return it as a list of key-value pairs. So it is up to the user of this function to decide whether they support duplicate keys or not.</p> Source code in <code>src/django_components/template_parser.py</code> <pre><code>def parse_bits(\n    parser: Parser,\n    bits: List[str],\n    params: List[str],\n    name: str,\n) -&gt; Tuple[List[FilterExpression], List[Tuple[str, FilterExpression]]]:\n    \"\"\"\n    Parse bits for template tag helpers simple_tag and inclusion_tag, in\n    particular by detecting syntax errors and by extracting positional and\n    keyword arguments.\n\n    This is a simplified version of `django.template.library.parse_bits`\n    where we use custom regex to handle special characters in keyword names.\n\n    Furthermore, our version allows duplicate keys, and instead of return kwargs\n    as a dict, we return it as a list of key-value pairs. So it is up to the\n    user of this function to decide whether they support duplicate keys or not.\n    \"\"\"\n    args: List[FilterExpression] = []\n    kwargs: List[Tuple[str, FilterExpression]] = []\n    unhandled_params = list(params)\n    for bit in bits:\n        # First we try to extract a potential kwarg from the bit\n        kwarg = token_kwargs([bit], parser)\n        if kwarg:\n            # The kwarg was successfully extracted\n            param, value = kwarg.popitem()\n            # All good, record the keyword argument\n            kwargs.append((str(param), value))\n            if param in unhandled_params:\n                # If using the keyword syntax for a positional arg, then\n                # consume it.\n                unhandled_params.remove(param)\n        else:\n            if kwargs:\n                raise TemplateSyntaxError(\n                    \"'%s' received some positional argument(s) after some \" \"keyword argument(s)\" % name\n                )\n            else:\n                # Record the positional argument\n                args.append(parser.compile_filter(bit))\n                try:\n                    # Consume from the list of expected positional arguments\n                    unhandled_params.pop(0)\n                except IndexError:\n                    pass\n    if unhandled_params:\n        # Some positional arguments were not supplied\n        raise TemplateSyntaxError(\n            \"'%s' did not receive value(s) for the argument(s): %s\"\n            % (name, \", \".join(\"'%s'\" % p for p in unhandled_params))\n        )\n    return args, kwargs\n</code></pre>"},{"location":"reference/django_components/template_parser/#django_components.template_parser.token_kwargs","title":"token_kwargs","text":"<pre><code>token_kwargs(bits: List[str], parser: Parser) -&gt; Dict[str, FilterExpression]\n</code></pre> <p>Parse token keyword arguments and return a dictionary of the arguments retrieved from the <code>bits</code> token list.</p> <p><code>bits</code> is a list containing the remainder of the token (split by spaces) that is to be checked for arguments. Valid arguments are removed from this list.</p> <p>There is no requirement for all remaining token <code>bits</code> to be keyword arguments, so return the dictionary as soon as an invalid argument format is reached.</p> Source code in <code>src/django_components/template_parser.py</code> <pre><code>def token_kwargs(bits: List[str], parser: Parser) -&gt; Dict[str, FilterExpression]:\n    \"\"\"\n    Parse token keyword arguments and return a dictionary of the arguments\n    retrieved from the ``bits`` token list.\n\n    `bits` is a list containing the remainder of the token (split by spaces)\n    that is to be checked for arguments. Valid arguments are removed from this\n    list.\n\n    There is no requirement for all remaining token ``bits`` to be keyword\n    arguments, so return the dictionary as soon as an invalid argument format\n    is reached.\n    \"\"\"\n    if not bits:\n        return {}\n    match = kwarg_re.match(bits[0])\n    kwarg_format = match and match[1]\n    if not kwarg_format:\n        return {}\n\n    kwargs: Dict[str, FilterExpression] = {}\n    while bits:\n        if kwarg_format:\n            match = kwarg_re.match(bits[0])\n            if not match or not match[1]:\n                return kwargs\n            key, value = match.groups()\n            del bits[:1]\n        else:\n            if len(bits) &lt; 3 or bits[1] != \"as\":\n                return kwargs\n            key, value = bits[2], bits[0]\n            del bits[:3]\n\n        # This is the only difference from the original token_kwargs. We use\n        # the ComponentsFilterExpression instead of the original FilterExpression.\n        kwargs[key] = ComponentsFilterExpression(value, parser)\n        if bits and not kwarg_format:\n            if bits[0] != \"and\":\n                return kwargs\n            del bits[:1]\n    return kwargs\n</code></pre>"},{"location":"reference/django_components/templatetags/","title":"Index","text":""},{"location":"reference/django_components/templatetags/#django_components.templatetags","title":"templatetags","text":""},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags","title":"component_tags","text":""},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags.component","title":"component","text":"<pre><code>component(parser: Parser, token: Token, registry: ComponentRegistry, tag_name: str) -&gt; ComponentNode\n</code></pre> To give the component access to the template context <p><code>{% component \"name\" positional_arg keyword_arg=value ... %}</code></p> To render the component in an isolated context <p><code>{% component \"name\" positional_arg keyword_arg=value ... only %}</code></p> <p>Positional and keyword arguments can be literals or template variables. The component name must be a single- or double-quotes string and must be either the first positional argument or, if there are no positional arguments, passed as 'name'.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>def component(parser: Parser, token: Token, registry: ComponentRegistry, tag_name: str) -&gt; ComponentNode:\n    \"\"\"\n    To give the component access to the template context:\n        ```#!htmldjango {% component \"name\" positional_arg keyword_arg=value ... %}```\n\n    To render the component in an isolated context:\n        ```#!htmldjango {% component \"name\" positional_arg keyword_arg=value ... only %}```\n\n    Positional and keyword arguments can be literals or template variables.\n    The component name must be a single- or double-quotes string and must\n    be either the first positional argument or, if there are no positional\n    arguments, passed as 'name'.\n    \"\"\"\n    _fix_nested_tags(parser, token)\n    bits = token.split_contents()\n\n    # Let the TagFormatter pre-process the tokens\n    formatter = get_tag_formatter(registry)\n    result = formatter.parse([*bits])\n    end_tag = formatter.end_tag(result.component_name)\n\n    # NOTE: The tokens returned from TagFormatter.parse do NOT include the tag itself\n    bits = [bits[0], *result.tokens]\n    token.contents = \" \".join(bits)\n\n    tag = _parse_tag(\n        tag_name,\n        parser,\n        token,\n        params=[],\n        extra_params=True,  # Allow many args\n        flags=[COMP_ONLY_FLAG],\n        keywordonly_kwargs=True,\n        repeatable_kwargs=False,\n        end_tag=end_tag,\n    )\n\n    # Check for isolated context keyword\n    isolated_context = tag.flags[COMP_ONLY_FLAG]\n\n    trace_msg(\"PARSE\", \"COMP\", result.component_name, tag.id)\n\n    body = tag.parse_body()\n    fill_nodes = parse_slot_fill_nodes_from_component_nodelist(body, ComponentNode)\n\n    # Tag all fill nodes as children of this particular component instance\n    for node in fill_nodes:\n        trace_msg(\"ASSOC\", \"FILL\", node.trace_id, node.node_id, component_id=tag.id)\n        node.component_id = tag.id\n\n    component_node = ComponentNode(\n        name=result.component_name,\n        args=tag.args,\n        kwargs=tag.kwargs,\n        isolated_context=isolated_context,\n        fill_nodes=fill_nodes,\n        node_id=tag.id,\n        registry=registry,\n    )\n\n    trace_msg(\"PARSE\", \"COMP\", result.component_name, tag.id, \"...Done!\")\n    return component_node\n</code></pre>"},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags.component_css_dependencies","title":"component_css_dependencies","text":"<pre><code>component_css_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where CSS link tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_css_dependencies\")\ndef component_css_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where CSS link tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + CSS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_css_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags.component_dependencies","title":"component_dependencies","text":"<pre><code>component_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where CSS link and JS script tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_dependencies\")\ndef component_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where CSS link and JS script tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + CSS_DEPENDENCY_PLACEHOLDER + JS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags.component_js_dependencies","title":"component_js_dependencies","text":"<pre><code>component_js_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where JS script tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_js_dependencies\")\ndef component_js_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where JS script tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + JS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_js_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags.fill","title":"fill","text":"<pre><code>fill(parser: Parser, token: Token) -&gt; FillNode\n</code></pre> <p>Block tag whose contents 'fill' (are inserted into) an identically named 'slot'-block in the component template referred to by a parent component. It exists to make component nesting easier.</p> <p>This tag is available only within a {% component %}..{% endcomponent %} block. Runtime checks should prohibit other usages.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.tag(\"fill\")\ndef fill(parser: Parser, token: Token) -&gt; FillNode:\n    \"\"\"\n    Block tag whose contents 'fill' (are inserted into) an identically named\n    'slot'-block in the component template referred to by a parent component.\n    It exists to make component nesting easier.\n\n    This tag is available only within a {% component %}..{% endcomponent %} block.\n    Runtime checks should prohibit other usages.\n    \"\"\"\n    tag = _parse_tag(\n        \"fill\",\n        parser,\n        token,\n        params=[SLOT_NAME_KWARG],\n        optional_params=[SLOT_NAME_KWARG],\n        keywordonly_kwargs=[SLOT_DATA_KWARG, SLOT_DEFAULT_KWARG],\n        repeatable_kwargs=False,\n        end_tag=\"endfill\",\n    )\n\n    fill_name_kwarg = tag.kwargs.kwargs.get(SLOT_NAME_KWARG, None)\n    trace_id = f\"fill-id-{tag.id} ({fill_name_kwarg})\" if fill_name_kwarg else f\"fill-id-{tag.id}\"\n\n    trace_msg(\"PARSE\", \"FILL\", trace_id, tag.id)\n\n    body = tag.parse_body()\n    fill_node = FillNode(\n        nodelist=body,\n        node_id=tag.id,\n        kwargs=tag.kwargs,\n        trace_id=trace_id,\n    )\n\n    trace_msg(\"PARSE\", \"FILL\", trace_id, tag.id, \"...Done!\")\n    return fill_node\n</code></pre>"},{"location":"reference/django_components/templatetags/#django_components.templatetags.component_tags.html_attrs","title":"html_attrs","text":"<pre><code>html_attrs(parser: Parser, token: Token) -&gt; HtmlAttrsNode\n</code></pre> <p>This tag takes: - Optional dictionary of attributes (<code>attrs</code>) - Optional dictionary of defaults (<code>defaults</code>) - Additional kwargs that are appended to the former two</p> <p>The inputs are merged and resulting dict is rendered as HTML attributes (<code>key=\"value\"</code>).</p> <p>Rules: 1. Both <code>attrs</code> and <code>defaults</code> can be passed as positional args or as kwargs 2. Both <code>attrs</code> and <code>defaults</code> are optional (can be omitted) 3. Both <code>attrs</code> and <code>defaults</code> are dictionaries, and we can define them the same way    we define dictionaries for the <code>component</code> tag. So either as <code>attrs=attrs</code> or    <code>attrs:key=value</code>. 4. All other kwargs (<code>key=value</code>) are appended and can be repeated.</p> <p>Normal kwargs (<code>key=value</code>) are concatenated to existing keys. So if e.g. key \"class\" is supplied with value \"my-class\", then adding <code>class=\"extra-class\"</code> will result in `class=\"my-class extra-class\".</p> <p>Example: <pre><code>{% html_attrs attrs defaults:class=\"default-class\" class=\"extra-class\" data-id=\"123\" %}\n</code></pre></p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.tag(\"html_attrs\")\ndef html_attrs(parser: Parser, token: Token) -&gt; HtmlAttrsNode:\n    \"\"\"\n    This tag takes:\n    - Optional dictionary of attributes (`attrs`)\n    - Optional dictionary of defaults (`defaults`)\n    - Additional kwargs that are appended to the former two\n\n    The inputs are merged and resulting dict is rendered as HTML attributes\n    (`key=\"value\"`).\n\n    Rules:\n    1. Both `attrs` and `defaults` can be passed as positional args or as kwargs\n    2. Both `attrs` and `defaults` are optional (can be omitted)\n    3. Both `attrs` and `defaults` are dictionaries, and we can define them the same way\n       we define dictionaries for the `component` tag. So either as `attrs=attrs` or\n       `attrs:key=value`.\n    4. All other kwargs (`key=value`) are appended and can be repeated.\n\n    Normal kwargs (`key=value`) are concatenated to existing keys. So if e.g. key\n    \"class\" is supplied with value \"my-class\", then adding `class=\"extra-class\"`\n    will result in `class=\"my-class extra-class\".\n\n    Example:\n    ```htmldjango\n    {% html_attrs attrs defaults:class=\"default-class\" class=\"extra-class\" data-id=\"123\" %}\n    ```\n    \"\"\"\n    tag = _parse_tag(\n        \"html_attrs\",\n        parser,\n        token,\n        params=[HTML_ATTRS_ATTRS_KEY, HTML_ATTRS_DEFAULTS_KEY],\n        optional_params=[HTML_ATTRS_ATTRS_KEY, HTML_ATTRS_DEFAULTS_KEY],\n        flags=[],\n        keywordonly_kwargs=True,\n        repeatable_kwargs=True,\n    )\n\n    return HtmlAttrsNode(\n        kwargs=tag.kwargs,\n        kwarg_pairs=tag.kwarg_pairs,\n    )\n</code></pre>"},{"location":"reference/django_components/templatetags/component_tags/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> component_tags","text":""},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags","title":"component_tags","text":""},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags.component","title":"component","text":"<pre><code>component(parser: Parser, token: Token, registry: ComponentRegistry, tag_name: str) -&gt; ComponentNode\n</code></pre> To give the component access to the template context <p><code>{% component \"name\" positional_arg keyword_arg=value ... %}</code></p> To render the component in an isolated context <p><code>{% component \"name\" positional_arg keyword_arg=value ... only %}</code></p> <p>Positional and keyword arguments can be literals or template variables. The component name must be a single- or double-quotes string and must be either the first positional argument or, if there are no positional arguments, passed as 'name'.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>def component(parser: Parser, token: Token, registry: ComponentRegistry, tag_name: str) -&gt; ComponentNode:\n    \"\"\"\n    To give the component access to the template context:\n        ```#!htmldjango {% component \"name\" positional_arg keyword_arg=value ... %}```\n\n    To render the component in an isolated context:\n        ```#!htmldjango {% component \"name\" positional_arg keyword_arg=value ... only %}```\n\n    Positional and keyword arguments can be literals or template variables.\n    The component name must be a single- or double-quotes string and must\n    be either the first positional argument or, if there are no positional\n    arguments, passed as 'name'.\n    \"\"\"\n    _fix_nested_tags(parser, token)\n    bits = token.split_contents()\n\n    # Let the TagFormatter pre-process the tokens\n    formatter = get_tag_formatter(registry)\n    result = formatter.parse([*bits])\n    end_tag = formatter.end_tag(result.component_name)\n\n    # NOTE: The tokens returned from TagFormatter.parse do NOT include the tag itself\n    bits = [bits[0], *result.tokens]\n    token.contents = \" \".join(bits)\n\n    tag = _parse_tag(\n        tag_name,\n        parser,\n        token,\n        params=[],\n        extra_params=True,  # Allow many args\n        flags=[COMP_ONLY_FLAG],\n        keywordonly_kwargs=True,\n        repeatable_kwargs=False,\n        end_tag=end_tag,\n    )\n\n    # Check for isolated context keyword\n    isolated_context = tag.flags[COMP_ONLY_FLAG]\n\n    trace_msg(\"PARSE\", \"COMP\", result.component_name, tag.id)\n\n    body = tag.parse_body()\n    fill_nodes = parse_slot_fill_nodes_from_component_nodelist(body, ComponentNode)\n\n    # Tag all fill nodes as children of this particular component instance\n    for node in fill_nodes:\n        trace_msg(\"ASSOC\", \"FILL\", node.trace_id, node.node_id, component_id=tag.id)\n        node.component_id = tag.id\n\n    component_node = ComponentNode(\n        name=result.component_name,\n        args=tag.args,\n        kwargs=tag.kwargs,\n        isolated_context=isolated_context,\n        fill_nodes=fill_nodes,\n        node_id=tag.id,\n        registry=registry,\n    )\n\n    trace_msg(\"PARSE\", \"COMP\", result.component_name, tag.id, \"...Done!\")\n    return component_node\n</code></pre>"},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags.component_css_dependencies","title":"component_css_dependencies","text":"<pre><code>component_css_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where CSS link tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_css_dependencies\")\ndef component_css_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where CSS link tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + CSS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_css_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags.component_dependencies","title":"component_dependencies","text":"<pre><code>component_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where CSS link and JS script tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_dependencies\")\ndef component_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where CSS link and JS script tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + CSS_DEPENDENCY_PLACEHOLDER + JS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags.component_js_dependencies","title":"component_js_dependencies","text":"<pre><code>component_js_dependencies(preload: str = '') -&gt; SafeString\n</code></pre> <p>Marks location where JS script tags should be rendered.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.simple_tag(name=\"component_js_dependencies\")\ndef component_js_dependencies(preload: str = \"\") -&gt; SafeString:\n    \"\"\"Marks location where JS script tags should be rendered.\"\"\"\n\n    if is_dependency_middleware_active():\n        preloaded_dependencies = []\n        for component in _get_components_from_preload_str(preload):\n            preloaded_dependencies.append(RENDERED_COMMENT_TEMPLATE.format(name=component.registered_name))\n        return mark_safe(\"\\n\".join(preloaded_dependencies) + JS_DEPENDENCY_PLACEHOLDER)\n    else:\n        rendered_dependencies = []\n        for component in _get_components_from_registry(component_registry):\n            rendered_dependencies.append(component.render_js_dependencies())\n\n        return mark_safe(\"\\n\".join(rendered_dependencies))\n</code></pre>"},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags.fill","title":"fill","text":"<pre><code>fill(parser: Parser, token: Token) -&gt; FillNode\n</code></pre> <p>Block tag whose contents 'fill' (are inserted into) an identically named 'slot'-block in the component template referred to by a parent component. It exists to make component nesting easier.</p> <p>This tag is available only within a {% component %}..{% endcomponent %} block. Runtime checks should prohibit other usages.</p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.tag(\"fill\")\ndef fill(parser: Parser, token: Token) -&gt; FillNode:\n    \"\"\"\n    Block tag whose contents 'fill' (are inserted into) an identically named\n    'slot'-block in the component template referred to by a parent component.\n    It exists to make component nesting easier.\n\n    This tag is available only within a {% component %}..{% endcomponent %} block.\n    Runtime checks should prohibit other usages.\n    \"\"\"\n    tag = _parse_tag(\n        \"fill\",\n        parser,\n        token,\n        params=[SLOT_NAME_KWARG],\n        optional_params=[SLOT_NAME_KWARG],\n        keywordonly_kwargs=[SLOT_DATA_KWARG, SLOT_DEFAULT_KWARG],\n        repeatable_kwargs=False,\n        end_tag=\"endfill\",\n    )\n\n    fill_name_kwarg = tag.kwargs.kwargs.get(SLOT_NAME_KWARG, None)\n    trace_id = f\"fill-id-{tag.id} ({fill_name_kwarg})\" if fill_name_kwarg else f\"fill-id-{tag.id}\"\n\n    trace_msg(\"PARSE\", \"FILL\", trace_id, tag.id)\n\n    body = tag.parse_body()\n    fill_node = FillNode(\n        nodelist=body,\n        node_id=tag.id,\n        kwargs=tag.kwargs,\n        trace_id=trace_id,\n    )\n\n    trace_msg(\"PARSE\", \"FILL\", trace_id, tag.id, \"...Done!\")\n    return fill_node\n</code></pre>"},{"location":"reference/django_components/templatetags/component_tags/#django_components.templatetags.component_tags.html_attrs","title":"html_attrs","text":"<pre><code>html_attrs(parser: Parser, token: Token) -&gt; HtmlAttrsNode\n</code></pre> <p>This tag takes: - Optional dictionary of attributes (<code>attrs</code>) - Optional dictionary of defaults (<code>defaults</code>) - Additional kwargs that are appended to the former two</p> <p>The inputs are merged and resulting dict is rendered as HTML attributes (<code>key=\"value\"</code>).</p> <p>Rules: 1. Both <code>attrs</code> and <code>defaults</code> can be passed as positional args or as kwargs 2. Both <code>attrs</code> and <code>defaults</code> are optional (can be omitted) 3. Both <code>attrs</code> and <code>defaults</code> are dictionaries, and we can define them the same way    we define dictionaries for the <code>component</code> tag. So either as <code>attrs=attrs</code> or    <code>attrs:key=value</code>. 4. All other kwargs (<code>key=value</code>) are appended and can be repeated.</p> <p>Normal kwargs (<code>key=value</code>) are concatenated to existing keys. So if e.g. key \"class\" is supplied with value \"my-class\", then adding <code>class=\"extra-class\"</code> will result in `class=\"my-class extra-class\".</p> <p>Example: <pre><code>{% html_attrs attrs defaults:class=\"default-class\" class=\"extra-class\" data-id=\"123\" %}\n</code></pre></p> Source code in <code>src/django_components/templatetags/component_tags.py</code> <pre><code>@register.tag(\"html_attrs\")\ndef html_attrs(parser: Parser, token: Token) -&gt; HtmlAttrsNode:\n    \"\"\"\n    This tag takes:\n    - Optional dictionary of attributes (`attrs`)\n    - Optional dictionary of defaults (`defaults`)\n    - Additional kwargs that are appended to the former two\n\n    The inputs are merged and resulting dict is rendered as HTML attributes\n    (`key=\"value\"`).\n\n    Rules:\n    1. Both `attrs` and `defaults` can be passed as positional args or as kwargs\n    2. Both `attrs` and `defaults` are optional (can be omitted)\n    3. Both `attrs` and `defaults` are dictionaries, and we can define them the same way\n       we define dictionaries for the `component` tag. So either as `attrs=attrs` or\n       `attrs:key=value`.\n    4. All other kwargs (`key=value`) are appended and can be repeated.\n\n    Normal kwargs (`key=value`) are concatenated to existing keys. So if e.g. key\n    \"class\" is supplied with value \"my-class\", then adding `class=\"extra-class\"`\n    will result in `class=\"my-class extra-class\".\n\n    Example:\n    ```htmldjango\n    {% html_attrs attrs defaults:class=\"default-class\" class=\"extra-class\" data-id=\"123\" %}\n    ```\n    \"\"\"\n    tag = _parse_tag(\n        \"html_attrs\",\n        parser,\n        token,\n        params=[HTML_ATTRS_ATTRS_KEY, HTML_ATTRS_DEFAULTS_KEY],\n        optional_params=[HTML_ATTRS_ATTRS_KEY, HTML_ATTRS_DEFAULTS_KEY],\n        flags=[],\n        keywordonly_kwargs=True,\n        repeatable_kwargs=True,\n    )\n\n    return HtmlAttrsNode(\n        kwargs=tag.kwargs,\n        kwarg_pairs=tag.kwarg_pairs,\n    )\n</code></pre>"},{"location":"reference/django_components/types/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> types","text":""},{"location":"reference/django_components/types/#django_components.types","title":"types","text":"<p>Helper types for IDEs.</p>"},{"location":"reference/django_components/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":""},{"location":"reference/django_components/utils/#django_components.utils","title":"utils","text":""},{"location":"reference/django_components/utils/#django_components.utils.gen_id","title":"gen_id","text":"<pre><code>gen_id(length: int = 5) -&gt; str\n</code></pre> <p>Generate a unique ID that can be associated with a Node</p> Source code in <code>src/django_components/utils.py</code> <pre><code>def gen_id(length: int = 5) -&gt; str:\n    \"\"\"Generate a unique ID that can be associated with a Node\"\"\"\n    # Global counter to avoid conflicts\n    global _id\n    _id += 1\n\n    # Pad the ID with `0`s up to 4 digits, e.g. `0007`\n    return f\"{_id:04}\"\n</code></pre>"}]}